likelihood(up)
detach("package:nuclear", unload=TRUE)
library("nuclear", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
likelihood(up)
setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
settings <- list(iterations = 500000,
burnin = 50000, message = T)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
ensamble
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/He3dp/Real_data")
######################################################################
## Read DATA
ensamble <- read.csv("ensamble.csv",header = T) %>%
mutate(Syst=replace(Syst,Syst==0.06,0.078))  %>% filter(E <= 0.5)
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
ik <- as.numeric(ensamble$invK)
Nik <- length(unique(ensamble$invK))
# Radius
# r_i = 6
# r_f = 5
# Literature
#  0.35779   # resonance energy
#  1.0085    # reduced width incoming
#  0.025425   # reduced width outgoing
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
lab <- ensamble$invK
syst = c(0.03,unique(ensamble$Syst))
likelihood <- function(par){
e0 = par[1]
gd2 = par[2]
gp2 = par[3]
sigmax = par[4]
scale = par[5:11]
ue = par[12:13]
y = par[14:(N + 13)]
llRandom = sum(dlnorm(scale,meanlog = log(1), sdlog = log(1 + syst^2), log = T))
lly <- sum(dnorm(y,mean = scale[re]*sfactor3Hedp_5p(obsx, e0,e0,gd2, gp2,6,5,ue = ue[ik]), sd = sigmax,  log = T))
llobs = sum(dnorm(obsy,mean = y,sd = erry,log = T))
return(llRandom + llobs + lly)
}
low <- c(1e-3,1e-5,1e-5,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(1,3,1,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 3, log = TRUE))
d3 = dnorm(par[4], mean = 0, sd = 1, log = TRUE)
d4 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d6 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
#prior <- createUniformPrior(lower = low,
#                            upper = up)
setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
settings <- list(iterations = 500000,
burnin = 50000, message = T)
setup
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
prior
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
prior
setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup
likelihood
length(c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
prior
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup <- createBayesianSetup(likelihood = likelihood,prior = prior)
setup
prior
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/He3dp/Real_data")
# preparation: remove all variables from the work space
rm(list=ls())
set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);
library(dplyr);require(lessR);library(BayesianTools)
######################################################################
## Read DATA
ensamble <- read.csv("ensamble.csv",header = T) %>%
mutate(Syst=replace(Syst,Syst==0.06,0.078))  %>% filter(E <= 0.5)
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
ik <- as.numeric(ensamble$invK)
Nik <- length(unique(ensamble$invK))
# Radius
# r_i = 6
# r_f = 5
# Literature
#  0.35779   # resonance energy
#  1.0085    # reduced width incoming
#  0.025425   # reduced width outgoing
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
lab <- ensamble$invK
syst = c(0.03,unique(ensamble$Syst))
likelihood <- function(par){
e0 = par[1]
gd2 = par[2]
gp2 = par[3]
sigmax = par[4]
scale = par[5:11]
ue = par[12:13]
y = par[14:(N + 13)]
llRandom = sum(dlnorm(scale,meanlog = log(1), sdlog = log(1 + syst^2), log = T))
lly <- sum(dnorm(y,mean = scale[re]*sfactor3Hedp_5p(obsx, e0,e0,gd2, gp2,6,5,ue = ue[ik]), sd = sigmax,  log = T))
llobs = sum(dnorm(obsy,mean = y,sd = erry,log = T))
return(llRandom + llobs + lly)
}
low <- c(1e-3,1e-5,1e-5,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(1,3,1,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 3, log = TRUE))
d3 = dnorm(par[4], mean = 0, sd = 1, log = TRUE)
d4 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d6 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
prior
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
settings <- list(iterations = 500000,
burnin = 50000, message = T)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res, thin = 10, start = 25000, whichParameters = c(1,2,3,12,13))
summary(res)
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
createBayesianSetup(likelihood = likelihood,prior = prior,
row.names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
length(c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup
to("scale", 7)
to("ue", 2)
to("y", N)
c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N))
setup
row.names(setup) <- c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N))
row.names(setup)
setup
row.names(setup)
dim(setup)
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
setup
setup[,1]
setup[1,]
setup$names
setup$names <- c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N))
setup
setup$names <- c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N))
setup
setup$names
setup
setup$info
setup$parNames <- c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N))
setup
setup$parNames
setup$names
createBayesianSetup(likelihood = likelihood,prior = prior,
names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up,parallel = T)
settings <- list(iterations = 500000,
burnin = 50000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 25000, whichParameters = c(1,2,3,12,13))
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
settings <- list(iterations = 500000,
burnin = 50000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 25000, whichParameters = c(1,2,3,12,13))
low <- c(1e-3,1e-3,1e-5,1e-5,2,2,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(0.5,2,3,3,10,10,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = dnorm(par[2], mean = 0, sd = 1, log = TRUE)
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 2, 10, log = TRUE))
d5 = dnorm(par[7], mean = 0, sd = 1, log = TRUE)
d6 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d7 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d8 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d7)
}
density(low)
density(up)
likelihood <- function(par){
e0 = par[1]
er = par[2]
gd2 = par[3]
gp2 = par[4]
ad   = par[5]
ap =  par[6]
sigmax = par[7]
scale = par[8:15]
ue = par[16:17]
y = par[18:(N + 17)]
llRandom = sum(dlnorm(scale,meanlog = log(1), sdlog = log(1 + syst^2), log = T))
lly <- sum(dnorm(y,mean = scale[re]*sfactor3Hedp_5p(obsx, e0,er,gd2, gp2,ad,ap,ue = ue[ik]), sd = sigmax,  log = T))
llobs = sum(dnorm(obsy,mean = y,sd = erry,log = T))
return(llRandom + llobs + lly)
}
low <- c(1e-3,1e-3,1e-5,1e-5,2,2,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(0.5,2,3,3,10,10,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = dnorm(par[2], mean = 0, sd = 1, log = TRUE)
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 2, 10, log = TRUE))
d5 = dnorm(par[7], mean = 0, sd = 1, log = TRUE)
d6 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d7 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d8 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d7)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
#prior <- createUniformPrior(lower = low,
#                            upper = up)
#setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
#        names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
#createBayesianSetup(likelihood = likelihood,prior = prior,
#                          names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
settings <- list(iterations = 500000,
burnin = 50000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
settings <- list(iterations = 500,
burnin = 50, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
likelihood(low)
likelihood(up)
8:15
likelihood <- function(par){
e0 = par[1]
er = par[2]
gd2 = par[3]
gp2 = par[4]
ad   = par[5]
ap =  par[6]
sigmax = par[7]
scale = par[8:14]
ue = par[15:16]
y = par[17:(N + 16)]
llRandom = sum(dlnorm(scale,meanlog = log(1), sdlog = log(1 + syst^2), log = T))
lly <- sum(dnorm(y,mean = scale[re]*sfactor3Hedp_5p(obsx, e0,er,gd2, gp2,ad,ap,ue = ue[ik]), sd = sigmax,  log = T))
llobs = sum(dnorm(obsy,mean = y,sd = erry,log = T))
return(llRandom + llobs + lly)
}
low <- c(1e-3,1e-3,1e-5,1e-5,2,2,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(0.5,2,3,3,10,10,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = dnorm(par[2], mean = 0, sd = 1, log = TRUE)
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 2, 10, log = TRUE))
d5 = dnorm(par[7], mean = 0, sd = 1, log = TRUE)
d6 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d7 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d8 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d7)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
#prior <- createUniformPrior(lower = low,
#                            upper = up)
#setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
#        names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
#createBayesianSetup(likelihood = likelihood,prior = prior,
#                          names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
settings <- list(iterations = 500,
burnin = 50, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
likelihood(up)
settings <- list(iterations = 20000,
burnin = 5000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 25000, whichParameters = c(1,2,3,12,13))
tracePlot(sampler = res, thin = 10, start = 2500, whichParameters = c(1,2,3,12,13))
tracePlot(sampler = res, thin = 10, start = 2500, whichParameters = c(1,2,3,4,5,6,15,16))
settings <- list(iterations = 1000000,
burnin = 100000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 2500, whichParameters = c(1,2,3,4,5,6,15,16))
settings <- list(iterations = 5000000,
burnin = 500000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
low <- c(1e-3,1e-3,1e-5,1e-5,1,1,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(1,2,10,10,15,15,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = dnorm(par[2], mean = 0, sd = 1, log = TRUE)
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 2, 10, log = TRUE))
d5 = dnorm(par[7], mean = 0, sd = 1, log = TRUE)
d6 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d7 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d8 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d7)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
#prior <- createUniformPrior(lower = low,
#                            upper = up)
#setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
#        names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
#createBayesianSetup(likelihood = likelihood,prior = prior,
#                          names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
settings <- list(iterations = 50000,
burnin = 5000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 2500, whichParameters = c(1,2,3,4,5,6,15,16))
settings <- list(iterations = 200000,
burnin = 50000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 2500, whichParameters = c(1,2,3,4,5,6,15,16))
tracePlot(sampler = res, thin = 10, start = 3500, whichParameters = c(1,2,3,4,5,6,15,16))
low <- c(1e-3,1e-3,1e-5,1e-5,1,1,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(1,2,10,10,15,15,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = dnorm(par[2], mean = 0, sd = 1, log = TRUE)
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 1, 15, log = TRUE))
d5 = dnorm(par[7], mean = 0, sd = 1, log = TRUE)
d6 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d7 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d8 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d7)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
#prior <- createUniformPrior(lower = low,
#                            upper = up)
#setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
#        names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
#createBayesianSetup(likelihood = likelihood,prior = prior,
#                          names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
low <- c(1e-3,1e-3,1e-5,1e-5,1,1,1e-2,rep(0.8,7),rep(0,2),obsy - 2*abs(erry))
up <- c(1,2,10,10,15,15,5,rep(1.2,7),rep(300,2),obsy + 2*abs(erry))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = dnorm(par[2], mean = 0, sd = 1, log = TRUE)
d3 = sum(dnorm(par[3:4], mean = 0, sd = 3, log = TRUE))
d4 = sum(dunif(par[5:6], 1, 15, log = TRUE))
d5 = dnorm(par[7], mean = 0, sd = 1, log = TRUE)
d6 = sum(dlnorm(par[5:11],1,log(1 + syst^2),log = TRUE))
d7 = sum(dnorm(par[12:13], mean = 0, sd = 100, log = TRUE))
d8 = sum(dnorm(par[14:(N + 13)],mean=obsy,sd=erry))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d7)
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
#prior <- createUniformPrior(lower = low,
#                            upper = up)
#setup <- createBayesianSetup(likelihood = likelihood,prior = prior,
#        names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
#createBayesianSetup(likelihood = likelihood,prior = prior,
#                          names = c("e0","gd2","gp2","sigma",to("scale", 7),to("ue", 2),to("y", N)))
setup <- createBayesianSetup(likelihood = likelihood,lower = low,upper = up)
settings <- list(iterations = 500000,
burnin = 100000, message = T)
system.time(
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
)
tracePlot(sampler = res, thin = 10, start = 3500, whichParameters = c(1,2,3,4,5,6,15,16))
tracePlot(sampler = res, thin = 10, start = 50000, whichParameters = c(1,2,3,4,5,6,15,16))
summary(res)
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Real_data")
rm(list=ls())
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Real_data")
rm(list=ls())
set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);
library(dplyr);require(lessR);library(BayesianTools)
######################################################################
## Read DATA
ensamble <- read.csv("ensamble_Tdn_extra.csv",header = T) %>%  filter(E <= 0.5)
#filter(dat!= "Mag75")
#%>% filter(E <= 0.5) %>%   filter(dat!= "Arn53") %>%
# droplevels(ensamble$dat)
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
Nik <- length(unique(ensamble$invK))
# Radius
# r_i = 6
# r_f = 5
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
lab <- ensamble$invK
syst = c(unique(ensamble$Syst))
i = seq(1:N)
likelihood <- function(par){
e1 = par[1]
gin = par[2]
gout = par[3]
sigmax = par[4]
scale = par[5:9]
y = par[10:(N + 9)]
#  y = par[10:133]
llRandom = sum(dlnorm(scale,meanlog = log(1), sdlog = log(1 + syst^2), log = T))
lly <- sum(dnorm(y,mean = scale[re]*sfactorTdn_5p(obsx, e1,gin, gout,6,5), sd = sigmax,  log = T))
llobs = sum(dnorm(obsy,mean = y,sd = erry,log = T))
return(llRandom + llobs + lly)
}
setup <- createBayesianSetup(likelihood = likelihood,
lower = c(0.001,0.001,0.001,0.001,rep(0.5,5),obsy - 5*abs(erry)),
upper = c(1,2,2,5,rep(1.5,5),obsy + 5*abs(erry)),
names = c("e0","gd2","gn2","sigma",to("scale", 5),to("y", N)),
setup <- createBayesianSetup(likelihood = likelihood,
lower = c(0.001,0.001,0.001,0.001,rep(0.5,5),obsy - 5*abs(erry)),
upper = c(1,2,2,5,rep(1.5,5),obsy + 5*abs(erry)),
names = c("e0","gd2","gn2","sigma",to("scale", 5),to("y", N)))
settings <- list(iterations = 200000,
burnin = 50000, message = T)
setup <- createBayesianSetup(likelihood = likelihood,
lower = c(0.001,0.001,0.001,0.001,rep(0.5,5),obsy - 5*abs(erry)),
upper = c(1,2,2,5,rep(1.5,5),obsy + 5*abs(erry)),
names = c("e0","gd2","gn2","sigma",to("scale", 5),to("y", N)))
settings <- list(iterations = 200000,
burnin = 50000, message = T)
settings <- list(iterations = 20000,
burnin = 5000, message = T)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
summary(res)
tracePlot(sampler = res, thin = 20, start = 10000, whichParameters = c(1,2,3))
tracePlot(sampler = res, thin = 20, start = 1000, whichParameters = c(1,2,3))
settings <- list(iterations = 50000,
burnin = 15000, message = T)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
summary(res)
tracePlot(sampler = res, thin = 20, start = 1000, whichParameters = c(1,2,3))
settings <- list(iterations = 150000,
burnin = 55000, message = T)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
summary(res)
tracePlot(sampler = res, thin = 20, start = 1000, whichParameters = c(1,2,3))
settings <- list(iterations = 500000,
burnin = 100000, message = T)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
summary(res)
tracePlot(sampler = res, thin = 20, start = 1000, whichParameters = c(1,2,3))
tracePlot(sampler = res, thin = 20, start = 10000, whichParameters = c(1,2,3))
