to("y", N),to("x", N)))
settings <- list(iterations = 7000,adaptation = 0.4,
burnin = 350, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res, start = 100000, whichParameters = c(1,2,3,19))
tracePlot(sampler = res, start = 1000, whichParameters = c(1,2,3,19))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(log(dtruncnorm(par[2:3], mean = 0, sd = 2)))
d3 = sum(log(dtruncnorm(par[4:8], 0, 2)))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dunif(par[19], 0, 1000)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = rtruncnorm(2, mean= 0, sd=3)
d[4:8] = rtruncnorm(5, 0, 2)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
settings <- list(iterations = 70000,adaptation = 0.4,
burnin = 3500, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res, start = 1000, whichParameters = c(1,2,3,19))
settings <- list(iterations = 500000,adaptation = 0.4,
burnin = 35000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res, start = 1000, whichParameters = c(1,2,3,19))
tracePlot(sampler = res, start = 10000, whichParameters = c(1,2,3,19))
tracePlot(sampler = res, start = 20000, whichParameters = c(1,2,3,19))
tracePlot(sampler = res, start = 30000, whichParameters = c(1,2,3,19))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(norm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dunif(par[19], 0, 1000)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
rtruncnorm(2, mean= 0, sd=2)
rtruncnorm(2, mean= 0, sd=1)
rtruncnorm(2, mean= 0, sd=1)
rtruncnorm(2, mean= 0, sd=1)
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(norm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dunif(par[19], 0, 1000)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(norm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dunif(par[19], 0, 1000,log = TRUE)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 50000,adaptation = 0.4,
burnin = 3500, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
settings <- list(iterations = 800000,adaptation = 0.4,
burnin = 250000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
low <- c(1e-3,1e-3,1e-3,rep(1e-4,5),rep(0.8,5),rep(-0.9,5),0,obsy - 2*abs(erry),obsx - abs(errx))
up <- c(1,6,6,rep(1,5),rep(1.2,5),rep(0.1,5),100,obsy + 2*abs(erry),obsx + abs(errx))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(norm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dnorm(par[19], 0, 1000,log = TRUE)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 800000,adaptation = 0.4,
burnin = 250000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res, start = 30000, whichParameters = c(1,2,3,19))
tracePlot(sampler = res, start = 50000, whichParameters = c(1,2,3,19))
low <- c(1e-3,1e-3,1e-3,rep(1e-4,5),rep(0.8,5),rep(-0.9,5),0,obsy - 2*abs(erry),obsx - abs(errx))
up <- c(1,20,20,rep(1,5),rep(1.2,5),rep(0.1,5),100,obsy + 2*abs(erry),obsx + abs(errx))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(norm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dnorm(par[19], 0, 1000,log = TRUE)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
tracePlot(sampler = res, start = 50000, whichParameters = c(1,2,3,19))
tracePlot(sampler = res, start = 5000, whichParameters = c(1,2,3,19))
setup
setup <- createBayesianSetup(likelihood = likelihood, prior = prior , priorSampler = sampler, lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
setup <- createBayesianSetup(likelihood = likelihood, prior = prior , priorSampler = sampler,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
setup <- createBayesianSetup(likelihood = likelihood, prior = prior , priorSampler = sampler,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, priorDensity=density,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, density=density,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
prior <- createPrior(density = density,sampler=sampler,
lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
prior
prior <- createPrior(density = density,sampler=sampler,
best = NULL)
prior
createPrior(density = density,sampler=sampler,
best = NULL)
sampler
createPrior(density = density,sampler=sampler(),
best = NULL)
sampler()
prior <- createPrior(density = density,sampler=sampler(),lower = low, upper = up,
best = NULL)
prior
prior$density()
prior$density
prior$sampler()
density()
prior$density()
prior$sampler()
prior$best
prior$density()
density(prior$sampler())
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(dnorm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dnorm(par[19], 0, 1000,log = TRUE)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
prior <- createPrior(density = density,sampler=sampler,lower = low, upper = up,
best = NULL)
prior$density()
density()
density(prior$sampler())
prior <- createPrior(density = density,sampler=sampler,lower = low, upper = up,
best = NULL)
prior
prior <- createPrior(density = density,sampler=sampler,
best = NULL)
prior
sampler = function(n=1){
d1 = runif(n, -2,6)
d2 = rnorm(n, mean= 2, sd = 3)
return(cbind(d1,d2))
}
sampler
sampler()
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(dnorm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dnorm(par[19], 0, 1000,log = TRUE)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
sampler()
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.matrix(d))
}
sampler()
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(t(as.matrix(d)))
}
sampler()
prior <- createPrior(density = density,sampler=sampler,
best = NULL)
prior
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
d
cbind(d)
rbind(d)
as.data.frame(d)
d
as.matrix(d)
as.data.frame(as.matrix(d))
t(as.data.frame(as.matrix(d)))
as.data.frame(as.matrix(d))
row.names(as.data.frame(as.matrix(d)))<- to("d",351)
dd <- as.data.frame(as.matrix(d)))
dd <- as.data.frame(as.matrix(d))
dd
row.names(dd)
row.names(dd) <- to("d",351)
dd
tt(dd)
t(dd)
colnames(dd) <- NULL
dd
t(dd)
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
dd <- as.data.frame(as.matrix(d))
row.names(dd) <- to("d",351)
colnames(dd) <- NULL
t(dd)
return(dd)
}
sampler()
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
dd <- as.data.frame(as.matrix(d))
row.names(dd) <- to("d",351)
colnames(dd) <- NULL
dd <- t(dd)
return(dd)
}
sampler()
prior <- createPrior(density = density,sampler=sampler,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
prior
density
prior$density()
prior$sampler()
prior <- createPrior(density = density,sampler=sampler,lower = low, upper = up,
best = NULL)
prior
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
prior <- createPrior(density = density,lower = low, upper = up,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
rnorm(5, 0, systx)
sampler()
range(sampler())
min(sampler())
prior <- createPrior(density = density,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
prior <- createPrior(density = density,
best = NULL)
prior
createPrior(density = density,sampler = sampler,
best = NULL)
sampler
createPrior(density = density,lower = low, upper = up,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
prior <- createPrior(density = density,lower = low, upper = up,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
prior <- createPrior(density = density,lower = low, upper = up,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
createPrior(sampler= sampler,lower = low, upper = up,
best = NULL)
prior <- createPrior(sampler= sampler,lower = low, upper = up,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
prior <- createPrior(density = density,sampler=sampler,lower = low, upper = up,
best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  prior = prior,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 80000,adaptation = 0.4,
burnin = 25000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
low <- c(1e-3,1e-3,1e-3,rep(1e-4,5),rep(0.8,5),rep(-0.9,5),0,obsy - 2*abs(erry),obsx - abs(errx))
up <- c(1,20,20,rep(1,5),rep(1.2,5),rep(0.1,5),100,obsy + 2*abs(erry),obsx + abs(errx))
density = function(par){
d1 = dnorm(par[1], mean = 0, sd = 1, log = TRUE)
d2 = sum(dnorm(par[2:3], mean = 0, sd = 2,log = TRUE))
d3 = sum(norm(par[4:8], 0, 2,log = TRUE))
d4 = sum(dlnorm(par[9:13],1,log(1 + syst^2),log = TRUE))
d5 = sum(dnorm(par[14:18],0,sd=systx,log = TRUE))
d6 = dnorm(par[19], 0, 1000,log = TRUE)
d7 = sum(dnorm(par[20:(N + 19)],mean=obsy,sd=erry,log = TRUE))
d8 = sum(dunif(par[(N + 20):(2*N + 19)],0.001,0.3,log = TRUE))
return(d1 + d2 + d3 + d4 + d5 + d6 + d7 +d8)
}
sampler = function(){
d <- list()
d[1] = runif(1, 0,  1)
d[2:3] = runif(2, 0.001,  5)
d[4:8] = runif(5, 0, 5)
d[9:13] = runif(5, 0.8, 1.2)
d[14:18] = rnorm(5, 0, systx)
d[19] = runif(1, 0, 100)
d[20:(N + 19)] = rnorm(N, obsy, erry)
d[(N + 20):(2*N + 19)] = runif(N,0.001,0.3)
return(as.numeric(d))
}
prior <- createPrior(density = density,
lower = low, upper = up, best = NULL)
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 800000,adaptation = 0.4,
burnin = 250000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
sampler
sampler()
createBayesianSetup(likelihood = likelihood,  priorSampler = sampler, lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
createBayesianSetup(likelihood = likelihood,  priorSampler = sampler,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
createPriorDensity(sampler=sampler)
createPriorDensity(sampler=sampler())
setup
setup <- createBayesianSetup(likelihood = likelihood,  priorSampler = sampler,lower = low, upper = up,
names = c("e0","gd2","gn2",to("sigma_scat", 5),to("scale", 5),to("xnorm", 5),"ue",
to("y", N),to("x", N)))
settings <- list(iterations = 800000,adaptation = 0.4,
burnin = 250000, message = T,nrChains = 1)
res <- runMCMC(bayesianSetup = setup, settings = settings,sampler = "DREAMzs")
