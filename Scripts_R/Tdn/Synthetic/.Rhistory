Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
#obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
obsy[i] ~ dnorm(sfactorTdn3(obsx[i], e1,0.0912, gin, gout,6,5,0),pow(tau, -2))
res[i] <- obsy[i]-sfactorTdn3(obsx[i], e1,0.0912, gin, gout,6,5,0)
}
RSS <- sum(res^2)
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorTdn3(xx[j], e1,0.0912, gin, gout,6,5,0)
}
# PRIORS
tau ~  dgamma(0.1,0.1)
e1 ~  dnorm(0,0.1)T(0,)
gin ~  dnorm(0,pow(0.5,-2))T(0,)
gout ~ dnorm(0,pow(0.5,-2))T(0,)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.01,10),gout=runif(1,0.01,10),gin=runif(1,0.01,10)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
Normfit <- run.jags(data = model.data,
adapt = 5000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 10,
burnin = 4000,
sample = 10000,
n.chains = 4)
Normfit
traplot(Normfit  ,c("e1","ex", "gin", "gout"),style="plain")
denplot(Normfit  ,c("e1", "gin", "gout","ue"),style="plain")
Normfit
plot(Normfit, layout=c(3,4))
1/0.5^2
N <- 150
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 0.1
obsy1 <- rnorm(N, Sfactor3(obsx1,0.0912,0.0912,2.93,0.0794,6,5,0),sd=sd)
M <- 150
xx <- seq(min(obsx1),max(obsx1),length.out = M)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1,   # Predictors
#                   erry = errobsy1,
N = N, # Sample size
M = M,
xx = xx
)
#
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
#obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
obsy[i] ~ dnorm(sfactorTdn3(obsx[i], e1,0.0912, gin, gout,6,5,0),pow(tau, -2))
res[i] <- obsy[i]-sfactorTdn3(obsx[i], e1,0.0912, gin, gout,6,5,0)
}
RSS <- sum(res^2)
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorTdn3(xx[j], e1,0.0912, gin, gout,6,5,0)
}
# PRIORS
tau ~  dgamma(0.1,0.1)
e1 ~  dnorm(0,0.1)T(0,)
gin ~  dnorm(0,pow(0.5,-2))T(0,)
gout ~ dnorm(0,pow(0.5,-2))T(0,)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.01,10),gout=runif(1,0.01,10),gin=runif(1,0.01,10)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- run.jags(data = model.data,
adapt = 5000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 20,
burnin = 4000,
sample = 5000,
n.chains = 3)
Normfit <- run.jags(data = model.data,
adapt = 10000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 5,
burnin = 2000,
sample = 5000,
n.chains = 3)
plot(Normfit, layout=c(3,4))
Normfit <- run.jags(data = model.data,
adapt = 20000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 10,
burnin = 1000,
sample = 5000,
n.chains = 3)
plot(Normfit, layout=c(3,4))
Normfit
Normfit <- run.jags(data = model.data,
adapt = 30000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 1,
burnin = 1000,
sample = 10000,
n.chains = 3)
plot(Normfit, layout=c(3,4))
# JAGS model with R2Jags;
Normfit <- run.jags(data = model.data,
adapt = 30000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 50,
burnin = 1000,
sample = 2000,
n.chains = 3)
plot(Normfit, layout=c(3,4))
Normfit
65000/12
123500000/12
65000000*0.81
52650000/12
98280/7.8
998280/7.8
127984.6/12
1346940/7.8
172684.6/12
14000*3.2
2700*3.3
4*5
2700/5
2300+500
2800/5
3200+560
3760*3.3
3760*3.4
900*3.4
900*3.42
900*4
3700*4
830/1596
library(LaplacesDemon)
require(gsl)
N <- 200
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=20000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitMWG <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=20000, Status=100, Thinning=1,
Algorithm="MWG", Specs=list(B=NULL))
plot(FitMWG, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Synthetic")
library(LaplacesDemon)
require(gsl)
N <- 200
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=20000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitMWG <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=20000, Status=100, Thinning=1,
Algorithm="MWG", Specs=list(B=NULL))
plot(FitMWG, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
library(LaplacesDemon)
require(nuclear)
require(gsl)
N <- 200
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=20000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
Algorithm="MWG", Specs=list(B=NULL))
plot(FitMWG, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitMWG
FitMWG <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=20000, Status=100, Thinning=1,
Algorithm="MWG", Specs=list(B=NULL))
plot(FitMWG, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=5000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=10000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=50000, Status=100, Thinning=10,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=10000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=20000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=25000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dhalfnorm(gi, scale=1, log=TRUE)
gf.prior <- dhalfnorm(gf, scale=1, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=5000, Status=100, Thinning=10,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=1000, MyData,  Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=2000, MyData,  Parms=c("Er","gi","gf","sigma"))
Model <- cmpfun(Model)
library(compiler)
cmpfun(Model)
Model <- cmpfun(Model)
library(compiler)
Model <- cmpfun(Model)
library(compiler)
Model <- cmpfun(Model)
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=5000, Status=100, Thinning=10,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=2000, MyData,  Parms=c("Er","gi","gf","sigma"))
FitHARM <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=20000, Status=100, Thinning=1,
Algorithm="HARM")
Model <- function(parm, Data)
{
### Parameters
Er <- interval(parm[Data$pos.Er], 1e-100, Inf)
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dhalfnorm(gi, scale=1, log=TRUE)
gf.prior <- dhalfnorm(gf, scale=1, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
library(compiler)
Model <- cmpfun(Model)
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=5000, Status=100, Thinning=10,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=2000, MyData,  Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=2000, MyData,  Parms=c("Er","gi","gf","sigma"))
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=20000, Status=100, Thinning=10,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=5000, MyData,  Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=10000, MyData,  Parms=c("Er","gi","gf","sigma"))
Covar=NULL, Iterations=20000, Status=100, Thinning=1,
Algorithm="HARM")
FitHARM <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=20000, Status=100, Thinning=1,
Algorithm="HARM")
plot(FitHARM, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitLA <- LaplaceApproximation(Model, Data=MyData, Initial.Values,
Iterations=20000)
FitLA
plot(FitLA )
plot(FitLA)
summary(FitLA )
plot(Fit, MyData, PDF=FALSE)
plot(FitLA, MyData, PDF=FALSE)
caterpillar.plot(FitLA, Parms=c("Er","gi","gf","sigma"))
caterpillar.plot(FitLA, Parms=c("Er","gi","gf"))
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Synthetic")
library(LaplacesDemon)
require(nuclear)
require(gsl)
N <- 200
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- interval(parm[Data$pos.Er], 1e-100, Inf)
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfcauchy(sigma, 5, log=TRUE)
gi.prior <- dhalfcauchy(sigma, 5, log=TRUE)
gf.prior <- dhalfcauchy(sigma, 5, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
library(compiler)
Model <- cmpfun(Model)
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=20000, Status=100, Thinning=10,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=10000, MyData,  Parms=c("Er","gi","gf","sigma"))
vignette("Examples")
