<<<<<<< HEAD
}
for (j in 1:M){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
tau ~  dgamma(0.1,0.1)
e1 ~  dgamma(0.1,0.1)
gin ~  dgamma(0.1,0.1)
gout ~ dgamma(0.1,0.1)
})
inits <- function () { list(e1 = runif(1,0.01,10),gout=runif(1,0.01,10),gin=runif(1,0.01,10)) }
mcmc.output <- nimbleMCMC(model, data = model.data, inits = inits,
monitors = c("e1", "gin", "gout","tau"), thin = 10,
niter = 20000, nburnin = 1000, nchains = 3,
summary = TRUE, WAIC = TRUE)
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:M){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dgamma(0.1,0.1)
e1 ~  dgamma(0.1,0.1)
gin ~  dgamma(0.1,0.1)
gout ~ dgamma(0.1,0.1)
})
inits <- function () { list(e1 = runif(1,0.01,10),gout=runif(1,0.01,10),gin=runif(1,0.01,10)) }
mcmc.output <- nimbleMCMC(model, data = model.data, inits = inits,
monitors = c("e1", "gin", "gout","sd"), thin = 10,
niter = 20000, nburnin = 1000, nchains = 3,
summary = TRUE, WAIC = TRUE)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:150){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dgamma(0.1,0.1)
e1 ~  dgamma(0.1,0.1)
gin ~  dgamma(0.1,0.1)
gout ~ dgamma(0.1,0.1)
})
inits <- function () { list(e1 = runif(1,0.01,10),gout=runif(1,0.01,10),gin=runif(1,0.01,10)) }
mcmc.output <- nimbleMCMC(model, data = model.data, inits = inits,
monitors = c("e1", "gin", "gout","sd"), thin = 10,
niter = 20000, nburnin = 1000, nchains = 3,
summary = TRUE, WAIC = TRUE)
mcmc.output <- runMCMC(model, data = model.data, inits = inits,
monitors = c("e1", "gin", "gout","sd"), thin = 10,
niter = 20000, nburnin = 1000, nchains = 3,
summary = TRUE, WAIC = TRUE)
model.data
Rmodel <- nimbleModel(code)
Rmcmc <- buildMCMC(Rmodel)
Rmodel$setData(Rmodel$setData)
Cmodel <- compileNimble(Rmodel)
Cmcmc <- compileNimble(Rmcmc, project = Rmodel)
inits <- function () { list(e1 = runif(1,0.01,10),gout=runif(1,0.01,10),gin=runif(1,0.01,10)) }
Rmodel$setData(model.data)
Cmodel <- compileNimble(Rmodel)
Cmcmc <- compileNimble(Rmcmc, project = Rmodel)
samplesList <- runMCMC(Cmcmc, niter = 10000, nchains = 3, inits = inits)
=======
plot(Normfit, layout=c(3,4))
# JAGS model with R2Jags;
Normfit <- run.jags(data = model.data,
adapt = 30000,
inits = inits,
method ="rjags",
monitor = c("e1", "gin", "gout","tau"),
model  = Model,
thin = 50,
burnin = 1000,
sample = 2000,
n.chains = 3)
plot(Normfit, layout=c(3,4))
Normfit
65000/12
123500000/12
65000000*0.81
52650000/12
98280/7.8
998280/7.8
127984.6/12
1346940/7.8
172684.6/12
14000*3.2
2700*3.3
4*5
2700/5
2300+500
2800/5
3200+560
3760*3.3
3760*3.4
900*3.4
900*3.42
900*4
3700*4
830/1596
require(nuclear)
library(LaplacesDemon)
require(gsl)
source("Sfactor3.R")
N <- 150
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Synthetic")
library(LaplacesDemon)
require(gsl)
source("Sfactor3.R")
N <- 150
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dunif(Er,0, 10, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dunif(Er,0.001, 10, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
runif(1)
y
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dunif(Er,0.01, 10, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Iterations=5000, Status=100, Thinning=1,
Algorithm="HMC", Specs=list(epsilon=0.001, L=2, m=NULL))
Fit
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dunif(Er,0.01, 10, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
rep(runif(4,0.001,1))
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=3000, Status=100, Thinning=1,
Algorithm="RAM", Specs=list(alpha.star=0.234, B=NULL, Dist="N",
gamma=0.66, n=0))
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Iterations=5000, Status=100, Thinning=1,
Algorithm="HMC", Specs=list(epsilon=0.001, L=2, m=NULL))
Fit
LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dunif(Er,0.05, 10, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
Initial.Values
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Iterations=5000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
Fit
Pred <- predict(Fit, Model, MyData, CPUs=1)
MyData
predict(Fit, Model, MyData, CPUs=1)
Fit
Consort(Fit)
caterpillar.plot(Fit)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Iterations=5000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
Fit
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=1000, Status=100, Thinning=1,
Algorithm="THMC", Specs=list(epsilon=0.001, L=2, m=NULL,
Temperature=2))
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=1000, Status=100, Thinning=1,
Algorithm="THMC", Specs=list(epsilon=0.001, L=2, m=NULL,
Temperature=2))
Fit
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=5000, Status=100, Thinning=1,
Algorithm="THMC", Specs=list(epsilon=0.001, L=2, m=NULL,
Temperature=2))
Fit
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=1000, Status=1, Thinning=1,
Algorithm="NUTS", Specs=list(A=500, delta=0.6, epsilon=NULL,
Lmax=Inf))
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=1000, Status=1, Thinning=1,
Algorithm="NUTS", Specs=list(A=500, delta=0.6, epsilon=NULL,
Lmax=Inf))
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=1000, Status=100, Thinning=1,
Algorithm="RWM", Specs=NULL)
Fit
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=5000, Status=100, Thinning=1,
Algorithm="RWM", Specs=NULL)
Fit
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
CPUs=2,Iterations=19000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
Fit
N <- 500
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
CPUs=2,Iterations=5000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
Fit
BurnIn <- Fit$Rec.BurnIn.Thinned
plot(Fit, BurnIn, MyData, PDF=FALSE)
Fit
Fit <- LaplacesDemon.hpc(Model, Data=MyData, Initial.Values,Chains=2,
CPUs=2,Iterations=25000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
library(LaplacesDemon)
require(gsl)
<<<<<<< HEAD
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:150){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dgamma(0.1,0.1)
e1 ~  dgamma(0.1,0.1)
gin ~  dgamma(0.1,0.1)
gout ~ dgamma(0.1,0.1)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:150){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dunif(0.01,2)
e1 ~  dgamma(0.1,0.1)
gin ~  dgamma(0.1,0.1)
gout ~ dgamma(0.1,0.1)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:150){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dunif(0.01,2)
e1 ~  dunif(0.01,1)
gin ~  dgamma(0.1,0.1)
gout ~ dgamma(0.1,0.1)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:150){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dunif(0.01,2)
e1 ~  dunif(0.01,1)
gin ~  dunif(0.01,4)
gout ~ dunif(0.01,4)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
nimbleModel(model)
model
sfactorTdn <- nimbleRcall(function(obsx1 = double(1),
e1 = double(1),ex = double(1),gin = double(1),
gout = double(1),ri = double(1),rf = double(1),ue = double(1)){}, Rfun = 'Sfactor3',
returnType = double(1), envir = .GlobalEnv)
sfactorTdn(0.1,1,1,1,1,1,1,0)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
for (j in 1:150){
# Bare...
mux0[j] <- sfactorTdn(xx[j], e1,0.0912, gin, gout,6,5,0)
}
sd ~  dunif(0.01,1)
e1 ~  dunif(0.01,1)
gin ~  dunif(0.01,4)
gout ~ dunif(0.01,4)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
model$initializeInfo()
model$initializeInfo
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
sd ~  dunif(0.01,1)
e1 ~  dunif(0.01,1)
gin ~  dunif(0.01,4)
gout ~ dunif(0.01,4)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorTdn(obsx[i], e1,0.0912, gin, gout,6,5,0),sd)
}
sd ~  dunif(0.01,1)
e1 ~  dunif(0.01,1)
gin ~  dunif(0.01,1)
gout ~ dunif(1,4)
})
inits <- function () { list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1)) }
Rmodel <- nimbleModel(model)
runMCMC(model, niter = 1000, nchains = 3, inits = inits)
buildMCMC(model)
nimbleModel(model,data = model.data, inits = inits)
inits
nimbleModel(model,data = model.data, inits = inits)
inits <- list(e1 = runif(1,0.01,1),gout=runif(1,0.01,1),gin=runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
samplesList <- runMCMC(mcmcConf, niter = 1000, nchains = 3, inits = inits)
mcmcConf
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
samplesList <- runMCMC(Rmodel, niter = 1000, nchains = 3, inits = inits)
mcmc_CL <- buildMCMC(mcmcConf)
samplesList <- runMCMC(mcmc_CL, niter = 1000, nchains = 3, inits = inits)
samplesList
compileNimble(mcmc_CL)
compileNimble(Rmodel,showCompilerOutput = TRUE)
samplesList <- runMCMC(mcmc_CL, niter = 5000, nchains = 3, inits = inits)
3.26*3300
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/Tdn/Synthetic")
library(LaplacesDemon)
require(gsl)
source("Sfactor3.R")
N <- 150
=======
source("Sfactor3.R")
N <- 500
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
<<<<<<< HEAD
y <- rnorm(N, Sfactor3(obsx1,0.0912,0.0912,2.93,0.0794,6,5,0),sd = sd)
=======
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
<<<<<<< HEAD
Er.prior <- dunif(Er,0, 10, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 5, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- Sfactor3(obsx1,Er,0.0912,gi,gf,6,5,0)
=======
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
<<<<<<< HEAD
Initial.Values <- rep(0.5,4)
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
rep(0.5,4)
Initial.Values <- rep(runif(4,0,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
LaplacesDemon(Model, Data=MyData, Initial.Values,
Iterations=5000, Status=100, Thinning=1,
Algorithm="HMC", Specs=list(epsilon=0.001, L=2, m=NULL))
=======
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
Fit <- LaplacesDemon.hpc(Model, Data=MyData, Initial.Values,Chains=2,
CPUs=2,Iterations=25000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
require(nuclear)
Fit <- LaplacesDemon.hpc(Model, Data=MyData, Initial.Values,Chains=2,
CPUs=2,Iterations=25000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
Fit <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=25000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
Fit
BurnIn <- Fit$Rec.BurnIn.Thinned
plot(Fit, BurnIn, MyData, PDF=FALSE)
plot(BMK.Diagnostic(Fit))
N <- 200
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
mon.names <- c("LP","Er","gi","gf")
parm.names <- c("Er","gi","gf","sigma")
pos.Er <- 1
pos.gi <- 2
pos.gf <- 3
pos.sigma <- 4
PGF <- function(Data) {
Er <- runif(1)
gi <- runif(1)
gi <- runif(1)
sigma <- runif(1)
return(c(Er,gi,gi, sigma))
}
MyData <- list(J=4, PGF=PGF, X=obsx1, mon.names=mon.names,
parm.names=parm.names, pos.Er=pos.Er,pos.gi = pos.gi,pos.gf=pos.gf, pos.sigma=pos.sigma, y=y)
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
Model <- function(parm, Data)
{
### Parameters
Er <- parm[Data$pos.Er]
gi <- parm[Data$pos.gi]
gf <- parm[Data$pos.gf]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log(Prior Densities)
<<<<<<< HEAD
Er.prior <- dunif(Er,0, 10, log=TRUE)
=======
Er.prior <- dhalfnorm(Er, scale=1, log=TRUE)
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
gi.prior <- dunif(gi,0, 10, log=TRUE)
gf.prior <- dunif(gf,0, 10, log=TRUE)
sigma.prior <- dhalfcauchy(sigma, 5, log=TRUE)
### Log-Likelihood
<<<<<<< HEAD
mu <- Sfactor3(obsx1,Er,0.0912,gi,gf,6,5,0)
=======
mu <- sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
LL <- sum(dnorm(y, mu, sigma, log=TRUE))
LP <- LL + Er.prior + gi.prior + gf.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor = c(LP, Er,gi,gf),
yhat=0,#rnorm(length(mu), mu, sigma),
parm=parm)
return(Modelout)
}
<<<<<<< HEAD
Initial.Values <- rep(runif(4,0,1))
########################  Laplace Approximation  ##########################
Fit <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000, Method="NM", CPUs=1)
print(Fit)
=======
Initial.Values <- rep(runif(4,0.001,1))
########################  Laplace Approximation  ##########################
plot(Fit, BurnIn=500, MyData, PDF=FALSE, Parms=NULL)
plot(Fit, BurnIn=5000, MyData, PDF=FALSE, Parms=NULL)
print(Fit)
Fit2 <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=1000, Status=100, Thinning=1,
Algorithm="RDMH", Specs=NULL)
Fit2
Fit2 <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=5000, Status=100, Thinning=1,
Algorithm="RDMH", Specs=NULL)
Fit2
Fit2 <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=10000, Status=100, Thinning=1,
Algorithm="RDMH", Specs=NULL)
Fit2
plot(Fit2, BurnIn=5000, MyData, PDF=FALSE, Parms=NULL)
plot(Fit, BurnIn=5000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitMWG <- LaplacesDemon(Model, Data=MyData, Initial.Values,
Covar=NULL, Iterations=5000, Status=100, Thinning=1,
Algorithm="MWG", Specs=list(B=NULL))
plot(FitMWG, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
FitMWG
FitAFSS
FitAFSS <- LaplacesDemon(Model, Data=MyData, Initial.Values,Chains=2,
Iterations=5000, Status=100, Thinning=1,
Algorithm="AFSS", Specs=list(A=Inf, B=NULL, m=100, n=0, w=1))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitAFSS, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
plot(FitMWG, BurnIn=1000, MyData, PDF=FALSE, Parms=c("Er","gi","gf","sigma"))
>>>>>>> c4509f22a131093a92ce115f89b81ec9b5f291a3
