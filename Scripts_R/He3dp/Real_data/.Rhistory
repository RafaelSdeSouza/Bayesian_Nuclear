#  scale_y_log10() + scale_x_log10()+
theme(legend.position = "none",
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He"))) +
coord_cartesian(xlim=c(0,1.5))
box <- data.frame(x=NV$x,y=(NV$mean/NV5$mean))
bb <- exp(seq(log(1e-3),log(10),length.out =  9))
box$x <- cut(box$x,breaks=bb)
ggplot(box[-1,],aes(x=x,y=y)) +
geom_boxplot(fill="blue") +xlab("T (GK)") +
ylab("Ratio") + theme_bw()
hist((NV$mean-NV5$mean)/NV$mean)
g1
NV_all$x
cmb <- as.data.frame(filter(NV_all, x <= 1.1 & x >= 0.99))
cmb
cmb <- as.data.frame(filter(gg, x <= 1.1 & x >= 0.99))
cmb
df
write.csv(df,"df_5.csv",row.names = F)
# 3Hedp analysis
#
# purpose: Real  DATA
#
# - 3 parameters are assumed: Er, gamma_d^2, gamma_n^2 [e1, gin, gout]
#
# - uses the function sfactorTdn_fast(obsx1[i], e1, gin, gout), which
#   is a C++ version of a Fortran code that includes Coulomb wave
#   function calculations; JAGS has been recompiled with this C++ function
#
######################################################################
# preparation: remove all variables from the work space
rm(list=ls())
set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the indi
######################################################################
# import packages
library(rjags);library(R2jags);library(mcmcplots)
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr)
library(dplyr);require(ggsci);require(ggmcmc);require(plyr);library(latex2exp)
source("https://raw.githubusercontent.com/johnbaums/jagstools/master/R/jagsresults.R")
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
######################################################################
## Read DATA GENERATION
#ensamble <- read.csv("ensamble.csv",header = T,stringsAsFactors=FALSE)  %>%
#  mutate(Stat=replace(Stat,Stat==0,0.1)) %>%
#  mutate(dat=replace(dat,dat %in% c("gei99b","gei99d"),"Gei99")) %>%
#  mutate(dat=replace(dat,dat %in% c("Kra87m","Kra87b"),"Kra87")) %>%
#  mutate(dat=replace(dat,dat == "zhi77b","Zhi77")) %>%
# filter(.,dat!="Lac05")  %>% droplevels(.) %>%
# mutate(dat=as.factor(dat))
ensamble <- read.csv("ensamble_final.csv",header = T) %>%
mutate(Syst=replace(Syst,Syst==0.06,0.078))
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
# Radius
# r_i = 6
# r_f = 5
# Literature
#  0.35779   # resonance energy
#  1.0085    # reduced width incoming
#  0.025425   # reduced width outgoing
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
syst = unique(ensamble$Syst)
#syst <- syst[-3]
M <- 500
xx <- seq(min(obsx),max(obsx),length.out = M)
model.data <- list(obsy = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble), # Sample size
syst = syst,
Nre = Nre,
re = re,
M = M,
xx = xx
)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout),pow(tau, -2))
#y[i] <- scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout)
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp(xx[j], e1, gin, gout)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dgamma(0.01,0.01)
e1 ~   dunif(0,10)
gin ~ dunif(0.001,10)
gout ~ dunif(0.001,10)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","tau","mux","yx","scale"),
model = textConnection(Model),
n.thin = 10,
n.chains = 5,
n.burnin = 15000,
n.iter = 25000)
Nsamp <- 500
mcdat <- as.data.frame(do.call(rbind, as.mcmc(Normfit)[,c("e1","gin","gout")]))
index <- sample(1:nrow(mcdat),size=Nsamp,replace=FALSE)
mcdat <- mcdat[index,]
Tgrid <- exp(seq(log(1e-3),log(10),length.out =  100))
gdat <- list()
for(i in 1:Nsamp){
y <- sapply(Tgrid,nuclear_rate3Hedp,ER = mcdat[i,1],gi = mcdat[i,2],gf = mcdat[i,3])
dd <- data.frame(y)
gdat[[i]] <- dd
}
gg <-  as.data.frame(gdat)
gg$x <- Tgrid
gg2<-apply(gg, 1, quantile, probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995), na.rm=TRUE)
gg2data <- data.frame(x =Tgrid, mean = gg2["50%",],lwr1=gg2["25%",],
lwr2 = gg2["2.5%",],lwr3=gg2["0.5%",],upr1=gg2["75%",],
upr2=gg2["97.5%",],upr3=gg2["99.5%",])
cmb3<- read.csv("df.csv")
cmb5 <- read.csv("df_5.csv")
write.csv(df,"df.csv",row.names = F)
cmb <- as.data.frame(filter(gg, x <= 1.1 & x >= 0.99))
cmbhist <- as.numeric(cmb)[1:Nsamp]
dens <- density(cmbhist)
df <- data.frame(x=dens$x, y=dens$y)
probs=c(0.025, 0.25, 0.5, 0.75, 0.975)
quantiles <- quantile(df$x, prob=probs)
df$quant <- factor(findInterval(df$x,quantiles))
write.csv(df,"df.csv",row.names = F)
cmb3<- read.csv("df.csv")
cmb5 <- read.csv("df_5.csv")
cmb_all <- rbind(cmb3,cmb5 )
cmb3 <- "3p"
cmb5 <- "5p"
cmb_all <- rbind(cmb3,cmb5 )
cmb_all
cmb3<- read.csv("df.csv")
cmb5 <- read.csv("df_5.csv")
cmb3$case <- "3p"
cmb5$case <- "5p"
cmb_all <- rbind(cmb3,cmb5)
cmb_all
ggplot(cmb_all, aes(x,y),group=case) +
geom_ribbon(aes(ymin=0, ymax=y, fill=quant)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y),group=case) +
geom_ribbon(aes(ymin=0, ymax=y, fill=quant)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line()
cmb_all
ggplot(cmb_all, aes(x,y),group=case) +
geom_ribbon(aes(ymin=0, ymax=y, fill=quant)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line()
cmb_all
ggplot(cmb_all, aes(x,y),group=case) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case))
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=quant,color=case)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=quant,color=case))
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
rm(list=ls())
set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
library(rjags);library(R2jags);library(mcmcplots)
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);require(runjags)
library(dplyr);require(ggsci);require(ggmcmc);require(plyr);require(latex2exp)
source("jagsresults.R")
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
load.runjagsmodule()
######################################################################
## Read DATA GENERATION
ensamble <- read.csv("ensamble_final.csv",header = T,stringsAsFactors=FALSE)  %>%
mutate(Stat=replace(Stat,Stat==0,0.1)) %>%
mutate(dat=replace(dat,dat %in% c("gei99b","gei99d"),"Gei99")) %>%
mutate(dat=replace(dat,dat %in% c("Kra87m","Kra87b"),"Kra87")) %>%
mutate(dat=replace(dat,dat == "zhi77b","Zhi77")) %>%
filter(.,dat!="Lac05")  %>% droplevels(.) %>%
mutate(dat=as.factor(dat))
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
# Radius
# ri = 6
# rf = 5
# Literature
#  0.35779   # resonance energy
#  1.0085    # reduced width incoming
#  0.025425   # reduced width outgoing
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
syst = unique(ensamble$Syst)
syst <- syst[-3]
# Literature radii
ri0 <- 6
rf0 <- 5
M <- 500
xx <- seq(min(obsx),max(obsx),length.out = M)
model.data <- list(obsy = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble), # Sample size
syst = syst,
Nre = Nre,
re = re,
M = M,
xx = xx
)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
#gout ~ dnorm(0.05,1)T(0,)
# gin ~  dnorm(6,1)T(0,)
#gin ~  dunif(1,10)
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
#gout ~ dhalfcauchy(1)
#gin ~ dhalfcauchy(5)
gout ~ dbeta(2,2)
gb ~ dbeta(2,2)
gin <- 3*gb + 5
#gin ~ dnorm(6,0.25)T(0,)
#gin ~  dunif(0,20)
# Channel radius
rb ~ dbeta(2,2)
rb2 ~ dbeta(2,2)
ri <- 6*rb + 2
rf <- 6*rb + 2
#ri <- 3*rb + 3
#rf <- rb2 + 4.5
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
#inits <- function () { list(e1 = 0.38,gin= 6,gout=0.1,ri=4,rf=5) }
inits <- function () { list(e1 = 0.38) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 10,
n.chains = 4,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x = Normfit , params = c("e1", "gin", "gout","ri","rf","tau"))
###################################  Nice plots with ggmcmc package
# Reaction rates
Nsamp <- 500
mcdat <- as.data.frame(do.call(rbind, as.mcmc(Normfit)[,c("e1","gin","gout","ri","rf")]))
index <- sample(1:nrow(mcdat),size=Nsamp,replace=FALSE)
mcdat <- mcdat[index,]
Tgrid <- exp(seq(log(1e-3),log(10),length.out =  100))
gdat <- list()
for(i in 1:Nsamp){
y <- sapply(Tgrid,nuclear_rate3Hedp_5p,ER = mcdat[i,1],gi = mcdat[i,2],gf = mcdat[i,3],r_i= mcdat[i,4],r_f=mcdat[i,5])
dd <- data.frame(y)
gdat[[i]] <- dd
}
gg <-  as.data.frame(gdat)
gg$x <- Tgrid
gg2<-apply(gg, 1, quantile, probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995), na.rm=TRUE)
gg2data <- data.frame(x =Tgrid, mean = gg2["50%",],lwr1=gg2["25%",],
lwr2 = gg2["2.5%",],lwr3=gg2["0.5%",],upr1=gg2["75%",],
upr2=gg2["97.5%",],upr3=gg2["99.5%",])
cmb <- as.data.frame(filter(gg, x <= 1.1 & x >= 0.99))
cmbhist <- as.numeric(cmb)[1:Nsamp]
dens <- density(cmbhist)
df <- data.frame(x=dens$x, y=dens$y)
probs=c(0.025, 0.25, 0.5, 0.75, 0.975)
quantiles <- quantile(df$x, prob=probs)
df$quant <- factor(findInterval(df$x,quantiles))
write.csv(df,"df_5W.csv",row.names = F)
cmb5W <- read.csv("df_5W.csv")
cmb3$case <- "3p"
cmb5$case <- "5p"
cmb5W$case <- "5pW"
cmb3<- read.csv("df.csv")
cmb5 <- read.csv("df_5.csv")
cmb5W <- read.csv("df_5W.csv")
cmb3$case <- "3p"
cmb5$case <- "5p"
cmb5W$case <- "5pW"
cmb_all <- rbind(cmb3,cmb5)
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
cmb_all <- rbind(cmb3,cmb5,cmb5W)
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_manual(values=c("#deebf7","#9ecae1","#3182bd","#3182bd","#9ecae1","#deebf7")) +
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y,group=case)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_stata()+
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y,group=case,alpha=0.5)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_stata()+
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
# JAGS model with R2Jags;
Normfit
jagsresults(x = Normfit , params = c("e1", "gin", "gout","ri","rf","tau"))
ggplot(cmb_all, aes(x,y,group=case,alpha=0.5)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_npg()+
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y,group=case,alpha=0.75)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_npg()+
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
ggplot(cmb_all, aes(x,y,group=case,alpha=0.75)) +
geom_ribbon(aes(ymin=0, ymax=y, fill=case)) +
scale_fill_tableau()+
geom_line() + theme_wsj() + xlab(expression(N[A]~sigma*v)) + ylab("Density") +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
