strip.background = element_rect("gray85"))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
1/5
1/2.5
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout,ri,rf,ue[ik[i]]),pow(tau, -2))
#y[i] <- scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout)
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,0)
yx0[j] ~ dnorm(mux0[j],pow(tau,-2))
# No inverse Kinematics
mux1[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),1/log(1+pow(syst[k],2)))
}
for (z in 1:Nik){
ue[z] ~ dnorm(0,1e3)T(0,)
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dnorm(0,0.1)T(0,)
e1 ~   dnorm(0,0.01)T(0,)
gin ~ dnorm(0,0.01)T(0,)
gout ~ dnorm(0,0.01)T(0,)
#ri ~ ddexp(5,100)
#rf ~ ddexp(4,100)
rf ~ dnorm(5,2.5)T(0,)
ri ~  dnorm(5,2.5)T(0,)
#gb ~ dbeta(2,2)
#gin ~ dunif(0,20)
#gout ~ dbeta(2,5)
# Channel radius
#  rb ~ dbeta(2,2)
#  rb2 ~ dbeta(2,2)
#  ri <- 4*rb + 3
#  rf <- 4*rb2 + 3
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","ue","tau", "ri","rf","mux0","mux1","mux2","scale"),
model = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x=Normfit , params=c("e1", "gin", "gout","ue","tau","ri","rf"),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
denplot(Normfit  ,c("e1", "gin", "gout","ri","rf","ue"),style="plain")
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout,ri,rf,ue[ik[i]]),pow(tau, -2))
#y[i] <- scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout)
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,0)
yx0[j] ~ dnorm(mux0[j],pow(tau,-2))
# No inverse Kinematics
mux1[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),1/log(1+pow(syst[k],2)))
}
for (z in 1:Nik){
ue[z] ~ dnorm(0,1e3)T(0,)
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dnorm(0,0.1)T(0,)
e1 ~   dnorm(0,0.01)T(0,)
gin ~ dnorm(0,0.01)T(0,)
gout ~ dnorm(0,5)T(0,)
#ri ~ ddexp(5,100)
#rf ~ ddexp(4,100)
rf ~ dnorm(5,5)T(0,)
ri ~  dnorm(5,5)T(0,)
#gb ~ dbeta(2,2)
#gin ~ dunif(0,20)
#gout ~ dbeta(2,5)
# Channel radius
#  rb ~ dbeta(2,2)
#  rb2 ~ dbeta(2,2)
#  ri <- 4*rb + 3
#  rf <- 4*rb2 + 3
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","ue","tau", "ri","rf","mux0","mux1","mux2","scale"),
model = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x=Normfit , params=c("e1", "gin", "gout","ue","tau","ri","rf"),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
Normfit <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","ue","tau", "ri","rf","mux0","mux1","mux2","scale"),
model = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 10000,
n.iter = 20000)
jagsresults(x=Normfit , params=c("e1", "gin", "gout","ue","tau","ri","rf"),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
denplot(Normfit  ,c("e1", "gin", "gout","ri","rf","ue"),style="plain")
y <- jagsresults(x=Normfit , params=c('mux1'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],lwr3=y[,"0.5%"],upr1=y[,"75%"],
upr2=y[,"97.5%"],upr3=y[,"99.5%"])
gobs <- data.frame(obsx,obsy,erry,set,lab)
gobs$set <- as.factor(gobs$set)
y2 <- jagsresults(x=Normfit , params=c('mux2'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
gdata2 <- data.frame(x =xx, mean = y2[,"mean"],lwr1=y2[,"25%"],lwr2=y2[,"2.5%"],lwr3=y2[,"0.5%"],upr1=y2[,"75%"],
upr2=y2[,"97.5%"],upr3=y2[,"99.5%"])
y0 <- jagsresults(x=Normfit , params=c('mux0'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
gdata0 <- data.frame(x =xx, mean = y0[,"mean"],lwr1=y0[,"25%"],lwr2=y0[,"2.5%"],lwr3=y0[,"0.5%"],upr1=y0[,"75%"],
upr2=y0[,"97.5%"],upr3=y0[,"99.5%"])
ggplot(gobs,aes(x=obsx,y=obsy))+
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.3) +
geom_ribbon(data=gdata2,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#e5f5e0"),show.legend=FALSE)+
geom_ribbon(data=gdata2,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#a1d99b"),show.legend=FALSE) +
geom_ribbon(data=gdata2,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#31a354"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#f0f0f0"),show.legend=FALSE)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#bdbdbd"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#636363"),show.legend=FALSE) +
#
geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#ffeda0"),show.legend=FALSE)+
geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#feb24c"),show.legend=FALSE) +
geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#f03b20"),show.legend=FALSE) +
#
#
geom_point(data=gobs,aes(x=obsx,y=obsy,group=set,color=set,shape=set),size=2.75)+
geom_errorbar(show.legend=FALSE,data=gobs,aes(x=obsx,y=obsy,ymin=obsy-erry,ymax=obsy+erry,group=set,color=set),
width=0.01,alpha=0.4)+
#  geom_line(data=gdata,aes(x=xx,y=mean),linetype="dashed",size=0.75,show.legend=FALSE)+
#  geom_line(data=gdata2,aes(x=xx,y=mean),linetype="dashed",size=0.75,show.legend=FALSE)+
scale_colour_manual(name="",values=c("#636363","#31a354","#31a354","#636363","#636363",
"#636363","#636363"))+
scale_shape_manual(values=c(0,1,2,5,25,11,13),name="")+
coord_cartesian(xlim=c(5e-3,0.85),ylim=c(0,20)) +
theme_bw() + xlab("Energy (MeV)") + ylab("S-Factor (MeV b)") +
scale_x_log10()  +
annotation_logticks(sides = "b") +
annotation_logticks(base=2.875,sides = "l") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.9,0.675),
legend.background = element_rect(colour = "white", fill = "white"),
legend.text = element_text(size=14,colour = set),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=17.5),
axis.text  = element_text(size=13),
strip.text = element_text(size=10),
strip.background = element_rect("gray85"))
denplot(Normfit  ,c("e1", "gin", "gout","ri","rf","ue"),style="plain")
1/2.5
dnorm(0,0.1)
dnorm(10,0,0.1)
rnorm(10,0,0.1)
max(rnorm(10,0,0.1))
max(rnorm(100,0,0.1))
max(rnorm(1000,0,0.1))
max(rnorm(1000,0,0.2))
max(rnorm(1000,0,0.15))
max(rnorm(1000,0,0.2))
max(rnorm(1000,0,0.1))
1/2.5
max(rnorm(1000,5,0.4))
min(rnorm(1000,5,0.4))
1/0.1
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout,ri,rf,ue[ik[i]]),pow(tau, -2))
#y[i] <- scale[re[i]]*sfactor3Hedp(obsx[i], e1, gin, gout)
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,0)
yx0[j] ~ dnorm(mux0[j],pow(tau,-2))
# No inverse Kinematics
mux1[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactor3Hedp(xx[j], e1, gin, gout,ri,rf,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),1/log(1+pow(syst[k],2)))
}
for (z in 1:Nik){
ue[z] ~ dnorm(0,1e3)T(0,)
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dnorm(0,0.1)T(0,)
e1 ~   dnorm(0,0.1)T(0,)
gin ~ dnorm(0,0.1)T(0,)
gout ~ dnorm(0,10)T(0,)
#ri ~ ddexp(5,100)
#rf ~ ddexp(4,100)
rf ~ dnorm(5,5)T(0,)
ri ~  dnorm(5,5)T(0,)
#gb ~ dbeta(2,2)
#gin ~ dunif(0,20)
#gout ~ dbeta(2,5)
# Channel radius
#  rb ~ dbeta(2,2)
#  rb2 ~ dbeta(2,2)
#  ri <- 4*rb + 3
#  rf <- 4*rb2 + 3
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","ue","tau", "ri","rf","mux0","mux1","mux2","scale"),
model = textConnection(Model),
n.thin = 10,
n.chains = 5,
n.burnin = 10000,
n.iter = 20000)
jagsresults(x=Normfit , params=c("e1", "gin", "gout","ue","tau","ri","rf"),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
denplot(Normfit  ,c("e1", "gin", "gout","ri","rf","ue"),style="plain")
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
s <- as.mcmc(Normfit)
s1 <- lump.mcmc.list(s)
HPDinterval(s1, prob = 0.95)[c("e1"),]
y <- jagsresults(x=Normfit , params=c('mux1'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],lwr3=y[,"0.5%"],upr1=y[,"75%"],
upr2=y[,"97.5%"],upr3=y[,"99.5%"])
gobs <- data.frame(obsx,obsy,erry,set,lab)
gobs$set <- as.factor(gobs$set)
y2 <- jagsresults(x=Normfit , params=c('mux2'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
gdata2 <- data.frame(x =xx, mean = y2[,"mean"],lwr1=y2[,"25%"],lwr2=y2[,"2.5%"],lwr3=y2[,"0.5%"],upr1=y2[,"75%"],
upr2=y2[,"97.5%"],upr3=y2[,"99.5%"])
y0 <- jagsresults(x=Normfit , params=c('mux0'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
gdata0 <- data.frame(x =xx, mean = y0[,"mean"],lwr1=y0[,"25%"],lwr2=y0[,"2.5%"],lwr3=y0[,"0.5%"],upr1=y0[,"75%"],
upr2=y0[,"97.5%"],upr3=y0[,"99.5%"])
ggplot(gobs,aes(x=obsx,y=obsy))+
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.3) +
geom_ribbon(data=gdata2,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#e5f5e0"),show.legend=FALSE)+
geom_ribbon(data=gdata2,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#a1d99b"),show.legend=FALSE) +
geom_ribbon(data=gdata2,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#31a354"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#f0f0f0"),show.legend=FALSE)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#bdbdbd"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#636363"),show.legend=FALSE) +
#
geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#ffeda0"),show.legend=FALSE)+
geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#feb24c"),show.legend=FALSE) +
geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#f03b20"),show.legend=FALSE) +
#
#
geom_point(data=gobs,aes(x=obsx,y=obsy,group=set,color=set,shape=set),size=2.75)+
geom_errorbar(show.legend=FALSE,data=gobs,aes(x=obsx,y=obsy,ymin=obsy-erry,ymax=obsy+erry,group=set,color=set),
width=0.01,alpha=0.4)+
#  geom_line(data=gdata,aes(x=xx,y=mean),linetype="dashed",size=0.75,show.legend=FALSE)+
#  geom_line(data=gdata2,aes(x=xx,y=mean),linetype="dashed",size=0.75,show.legend=FALSE)+
scale_colour_manual(name="",values=c("#636363","#31a354","#31a354","#636363","#636363",
"#636363","#636363"))+
scale_shape_manual(values=c(0,1,2,5,25,11,13),name="")+
coord_cartesian(xlim=c(5e-3,0.85),ylim=c(0,20)) +
theme_bw() + xlab("Energy (MeV)") + ylab("S-Factor (MeV b)") +
scale_x_log10()  +
annotation_logticks(sides = "b") +
annotation_logticks(base=2.875,sides = "l") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.9,0.675),
legend.background = element_rect(colour = "white", fill = "white"),
legend.text = element_text(size=14,colour = set),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="#666666", face="bold", size=17.5),
axis.text  = element_text(size=13),
strip.text = element_text(size=10),
strip.background = element_rect("gray85"))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
Sp <- ggs(as.mcmc(out)[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="y",
showStrips=FALSE
)
my_bin <- function(data, mapping, ..., low = "#3698BF", high = "#D97C2B") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high) +
theme_bw()
}
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
#pdf("plot/He3dp_synthetic_corr_syst.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="y",
showStrips=FALSE
)
my_hist <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_histogram(bins = 10,fill="#4271AE",colour="#1F3552",...) +
theme_void() + theme( panel.grid.minor=element_blank(),
panel.grid.major=element_blank())
}
my_bin <- function(data, mapping, ..., low = "#3698BF", high = "#D97C2B") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(...) +
scale_fill_gradient(low = low, high = high) +
theme_bw()
}
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
#pdf("plot/He3dp_synthetic_corr_syst.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="y",
showStrips=FALSE
)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
my_bin <- function(data, mapping, ..., low = "#3698BF", high = "#D97C2B") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(bins = 30) +
scale_fill_gradient(low = low, high = high) +
theme_bw()
}
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
#pdf("plot/He3dp_synthetic_corr_syst.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
my_bin <- function(data, mapping, ..., low = "#3698BF", high = "#D97C2B") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(bins = 60) +
scale_fill_gradient(low = low, high = high) +
theme_bw()
}
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
#pdf("plot/He3dp_synthetic_corr_syst.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
my_hist <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_histogram(bins = 15,fill="#4271AE",colour="#1F3552",...) +
theme_void() + theme( panel.grid.minor=element_blank(),
panel.grid.major=element_blank())
}
my_bin <- function(data, mapping, ..., low = "#3698BF", high = "#D97C2B") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(bins = 60) +
scale_fill_gradient(low = low, high = high) +
theme_bw()
}
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
#pdf("plot/He3dp_synthetic_corr_syst.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
my_hist <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_histogram(bins = 15,fill="#4271AE",colour="#1F3552",...) +
theme_void() + theme( panel.grid.minor=element_blank(),
panel.grid.major=element_blank())
}
my_bin <- function(data, mapping, ..., low = "#3698BF", high = "#D97C2B") {
ggplot(data = data, mapping = mapping) +
geom_bin2d(bins = 50) +
scale_fill_gradient(low = low, high = high) +
theme_bw()
}
Sp <- ggs(as.mcmc(Normfit )[,c("e1", "gin", "gout","ri","rf")])
levels(Sp$Parameter) <- as.factor(c("E[r]","Gamma[d]", "Gamma[p]","a[c]^i","a[c]^f"))
#pdf("plot/He3dp_synthetic_corr_syst.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
pdf("plot/He3dp_corr.pdf",height = 6,width = 6)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
dev.off()
pdf("plot/He3dp_corr.pdf",height = 8,width =8)
ggs_pairs(Sp,
labeller = "label_parsed",
diag=list(continuous = my_hist),
upper = "blank",
lower = list(continuous = my_bin),
switch="both",
showStrips=FALSE
)
dev.off()
