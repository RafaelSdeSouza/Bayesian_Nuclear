burnIn = 5000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
### Summary: #######################
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30,  main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of b", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = trueB, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of sd", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = trueSd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of a", )
abline(h = trueA, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of b", )
abline(h = trueB, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of sd", )
abline(h = trueSd, col="red" )
# for comparison:
summary(lm(y~x))
# create independent x-values
x <- runif(sampleSize,-1,1)
trueMu <- trueA*x + trueB
# create dependent values according to ax + b + N(0,sd)
#y <-  trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd)
# or
y <- rnorm(sampleSize, mean= trueMu, sd = trueSd)
plot(x,y, main="Test Data")
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# Example: plot the likelihood profile of the slope a
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))}
slopelikelihoods <- lapply(seq(0, 10, by=.05), slopevalues )
plot(seq(0, 10, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior distribution
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dunif(b, min=0, max=10, log = T)
sdprior = dunif(sd, min=0.001, max=30, log = T)
return(aprior+bprior+sdprior)
}
posterior <- function(param){
return(likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
proposalfunction <- function(param){
#  ab <- rnorm(2,mean = param[1:2],sd = c(0.5,0.5))
#  sd <- rtruncnorm(1,mean = param[3],sd = 0.5)
#  prop_values <- c(ab,sd)
#  return(prop_values)
return(rnorm(3,mean = param, sd = c(0.5,0.5,0.1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(4,1,0.1)
chain = run_metropolis_MCMC(startvalue, 10000)
burnIn = 5000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
### Summary: #######################
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30,  main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of b", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = trueB, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of sd", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = trueSd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of a", )
abline(h = trueA, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of b", )
abline(h = trueB, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of sd", )
abline(h = trueSd, col="red" )
# for comparison:
summary(lm(y~x))
hist(chain[-(1:burnIn),1],nclass=30,  main="Posterior of a", xlab="True value = red line" )
hist(chain[-(1:burnIn),1],  main="Posterior of a", xlab="True value = red line" )
hist(chain[-(1:burnIn),1],  main="Posterior of a", xlab="True value = red line" )
hist(chain[-(1:burnIn),1],  main="Posterior of a", xlab="True value = red line" )
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# Example: plot the likelihood profile of the slope a
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))}
slopelikelihoods <- lapply(seq(0, 10, by=.05), slopevalues )
plot(seq(0, 10, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior distribution
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dunif(b, min=0, max=10, log = T)
sdprior = dunif(sd, min=0.001, max=30, log = T)
return(aprior+bprior+sdprior)
}
posterior <- function(param){
return(likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
proposalfunction <- function(param){
#  ab <- rnorm(2,mean = param[1:2],sd = c(0.5,0.5))
#  sd <- rtruncnorm(1,mean = param[3],sd = 0.5)
#  prop_values <- c(ab,sd)
#  return(prop_values)
return(rnorm(3,mean = param, sd = c(0.5,0.5,0.1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(4,1,0.1)
chain = run_metropolis_MCMC(startvalue, 10000)
burnIn = 1000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
### Summary: #######################
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],  main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of b", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = trueB, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of sd", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = trueSd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of a", )
abline(h = trueA, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of b", )
abline(h = trueB, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of sd", )
abline(h = trueSd, col="red" )
# for comparison:
summary(lm(y~x))
# Prior distribution
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dnorm(0, 10, log = T)
bprior = dnorm(0, 10, log = T)
sdprior = dunif(sd, min=0.001, max=30, log = T)
return(aprior+bprior+sdprior)
}
posterior <- function(param){
return(likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
proposalfunction <- function(param){
#  ab <- rnorm(2,mean = param[1:2],sd = c(0.5,0.5))
#  sd <- rtruncnorm(1,mean = param[3],sd = 0.5)
#  prop_values <- c(ab,sd)
#  return(prop_values)
return(rnorm(3,mean = param, sd = c(0.5,0.5,0.1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(4,1,0.1)
chain = run_metropolis_MCMC(startvalue, 10000)
burnIn = 1000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
require(truncnorm)
trueA <- 5
trueB <- 2
trueSd <- 1
sampleSize <- 1000
# create independent x-values
x <- runif(sampleSize,-1,1)
trueMu <- trueA*x + trueB
# create dependent values according to ax + b + N(0,sd)
#y <-  trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd)
# or
y <- rnorm(sampleSize, mean= trueMu, sd = trueSd)
plot(x,y, main="Test Data")
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# Example: plot the likelihood profile of the slope a
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))}
slopelikelihoods <- lapply(seq(0, 10, by=.05), slopevalues )
plot(seq(0, 10, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
require(truncnorm)
trueA <- 5
trueB <- 2
trueSd <- 1
sampleSize <- 1000
# create independent x-values
x <- runif(sampleSize,-1,1)
trueMu <- trueA*x + trueB
# create dependent values according to ax + b + N(0,sd)
#y <-  trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd)
# or
y <- rnorm(sampleSize, mean= trueMu, sd = trueSd)
plot(x,y, main="Test Data")
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# Example: plot the likelihood profile of the slope a
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))}
slopelikelihoods <- lapply(seq(0, 10, by=.05), slopevalues )
plot(seq(0, 10, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
trueA <- 5
trueB <- 2
trueSd <- 2
sampleSize <- 100
# create independent x-values
x <- runif(300,0,1)
trueMu <- trueA*x + trueB
# create dependent values according to ax + b + N(0,sd)
#y <-  trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd)
# or
y <- rnorm(sampleSize, mean= trueMu, sd = trueSd)
likelihood=function(param){
a = param[1]
b = param[2]
sd = param[3]
mux = a*x + b
singlelikelihoods = dnorm(y, mean = mux, sd = sd, log = T)
return(sum(singlelikelihoods))
}
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))}
plot(seq(0,10,length.out = 100),sapply(seq(0,10,length.out = 100),slopevalues))
# Prior distribution
prior <- function(param){
a  = param[1]
b = param[2]
sd = param[3]
aprior = dnorm(a, mean=0,sd=10, log = T)
bprior = dnorm(b, mean=0,sd=10, log = T)
sdprior = dunif(sd, min=0.001, max=30, log = T)
return(aprior+bprior+sdprior)
}
posterior <- function(param){
a  = param[1]
b = param[2]
sd = param[3]
return(likelihood(param) + prior( param))
}
proposalfunction <- function(param,alpha=10){
return(c(rnorm(2,mean=param[1:2],sd=0.25),runif(1,x,x+alpha)))
}
prop=c(exp(rnorm(1,log(lam),sqrt(del*(1+log(lam)^2)))),
rbeta(1,1+eps*alp,1+eps*(1-alp)))
startvalue <- c(1,1,1)
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
chain = run_metropolis_MCMC(startvalue, 20000)
plot(chain[,1],chain[,2],type="l")
plot(seq(0,10,length.out = 100),sapply(seq(0,10,length.out = 100),slopevalues))
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = min(posterior(proposal)/posterior(chain[i,]),1)
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
chain = run_metropolis_MCMC(startvalue, 20000)
plot(chain[,1],chain[,2],type="l")
posterior(proposal)
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
chain = run_metropolis_MCMC(startvalue, 20000)
plot(chain[,1],chain[,2],type="l")
plot(chain[,1],chain[,2],type="p")
gc <- data.frame(chain[,1],chain[,2])
gc
require(ggplot2)
ggplot(gc,aes(x=x,y=y)) +
geom_density_2d()
gc <- data.frame(x=chain[,1],y=chain[,2])
ggplot(gc,aes(x=x,y=y)) +
geom_density_2d()
chain$burn <- c(rep(1:1000,"burnin"),rep(1:19000,"burnin"))
chain$burn <- c(rep("burnin",1000),rep("burnin",19000))
chain2 <- as.data.frame(chain)
chain2$burn <- c(rep("burnin",1000),rep("burnin",19000))
chain2$burn
chain2$burn <- c(rep("burnin",1000),rep("chain",19000))
ggplot(gc,aes(x=x,y=y,colour=burn)) +
geom_line()
gc <- data.frame(x=chain2[,1],y=chain2[,2],burn=chain2[,3])
ggplot(gc,aes(x=x,y=y,colour=burn)) +
geom_line()
gc
chain2
chain = run_metropolis_MCMC(startvalue, 10000)
chain
chain2 <- as.data.frame(chain)
chain2[1,]
data.frame(chain[,1],chain[,2],chain[,3])
chain2 <- data.frame(chain[,1],chain[,2],chain[,3])
chain2$burn <- c(rep("burnin",1000),rep("chain",9000))
chain2
c(rep("burnin",1000),rep("chain",9000))
chain2$burn <- c(rep("burnin",1000),rep("chain",9000))
chain2$burn <- c(rep("burnin",1001),rep("chain",9000))
chain2[1,]
colnames(chain2) <- c("x","y","iteraction")
ggplot(gc,aes(x=x,y=y,colour=iteraction)) +
geom_line()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_line()
plot(chain[,1],chain[,2],type="l")
plot(chain2[,1],chain2[,2],type="l")
plot(chain2[,1],chain2[,2],type="l")
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_line()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_point()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path()
require(ggthemes)
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_economist()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata()
colnames(chain2) <- c("x","y","iteraction")
plot(chain2[,1],chain2[,2],type="l")
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata()
chain2
colnames(chain2) <- c("x","y","z","iteraction")
plot(chain2[,1],chain2[,2],type="l")
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata()
chain = run_metropolis_MCMC(startvalue, 15000)
chain2 <- data.frame(chain[,1],chain[,2],chain[,3])
chain2$burn <- as.factor(c(rep("burnin",3001),rep("chain",12000)))
colnames(chain2) <- c("x","y","z","iteraction")
plot(chain2[,1],chain2[,2],type="l")
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata() +
geom_density2d()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata() +
geom_bin2d()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata() +
geom_bin2d() +
scale_fill_brewer()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata() +
geom_bin2d() +
scale_fill_economist()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_path() + scale_color_stata() +
geom_bin2d()
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_point() +
geom_path() + scale_color_stata()
chain = run_metropolis_MCMC(startvalue, 36000)
chain2 <- data.frame(chain[,1],chain[,2],chain[,3])
chain2$burn <- as.factor(c(rep("burnin",3001),rep("chain",30000)))
colnames(chain2) <- c("x","y","z","iteraction")
plot(chain2[,1],chain2[,2],type="l")
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_point() +
geom_path() + scale_color_stata()
chain2 <- data.frame(chain[,1],chain[,2],chain[,3])
chain2$burn <- as.factor(c(rep("burnin",3001),rep("chain",33000)))
colnames(chain2) <- c("x","y","z","iteraction")
plot(chain2[,1],chain2[,2],type="l")
ggplot(chain2,aes(x=x,y=y,colour=iteraction)) +
geom_point() +
geom_path() + scale_color_stata()
ggplot(chain2,aes(x=x,y=y,colour=iteraction,alpha=0.2)) +
geom_point() +
geom_path() + scale_color_stata()
ggplot(chain2,aes(x=x,y=y,colour=iteraction,alpha=0.2)) +
geom_point(size=0.2) +
geom_path() + scale_color_stata()
90000*(11/9)
179.34+101.58+798.35
179.34+101.58+798.35+187.49
1309-1266.76
1315-1266.76
1293-1266
1335-1266.76
179.34+101.58+798.35+187.49
1304.43-1266.76
80*12
50*12+90
99+40+12*40
80*12
960-619
341/12
1528/15
15*106
1590-1528
62-22
0.2129053*11800
2512-2391
23.3535172*106
2475.473-2391.25
84-35
0.21312235*10800
0.21312235*11800
2514.844-2391.35
123-35
23.39837737*106
2480-2391
89-35
0.1760*11431
0.1760*11415
0.1760*11415.28
0.1760*11800
0.1760*12000
0.1760*15000
2640-100
0.1760*12000
2112-50
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/He3dp/Real_data")
ensamble <- read.csv("ensamble.csv",header = T)
19*20
