<<<<<<< HEAD
panel.grid.minor = element_blank(),
legend.position = "none",
=======
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="",labels = c("Descouvemont", "Present","Case I")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(size = 3, linetype='dashed',colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(size = 0.75, linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"))
#       panel.border = element_rect(size = 1.2))
pdf("rate_ratio_he3dp_I_II.pdf",height = 7,width = 10)
ggplot(jointI_II,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data)) +
#  geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="#F0F8FF",alpha=0.2) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE,alpha=0.65) +
geom_line(size=0.75) +
coord_cartesian(ylim=c(0.9,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction rate ratio") +
scale_fill_manual(values=c("#969696","#e41a1c"),name="") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="",labels = c("Descouvemont", "Present","Case I")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(size = 3, linetype='dashed',colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(size = 0.75, linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"))
#       panel.border = element_rect(size = 1.2))
dev.off()
plot_normfactors(Normfit)
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.3,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#d9d9d9","#969696","#525252",
"#969696","#d9d9d9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
plot_normfactors(Normfit)
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.3,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#d9d9B3","#9696B3","#5252B3",
"#9696B3","#d9d9B3"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
plot_normfactors(Normfit)
barplot(1:12, col = gray.colors(12))
barplot(1:12, col = gray.colors(3))
3
barplot(1:3, col = gray.colors(3))
barplot(1:3, col = gray.colors(3),alpha=0.75)
barplot(1:3, col = gray.colors(3,alpha=0.75))
barplot(1:3, col = gray.colors(3,alpha=0.75))
barplot(1:3, col = gray.colors(3,alpha=0.75))
barplot(1:3, col = gray.colors(3,alpha=0.5))
barplot(1:3, col = gray.colors(12,alpha=0.5))
gray.colors(12,alpha=0.5)
barplot(1:12, col = gray.colors(12,alpha=0.5))
barplot(1:3, col = gray.colors(start = 0.1, end = 0.7,3,alpha=0.5))
barplot(1:3, col = gray.colors(start = 0.1, end = 0.7,3,alpha=0.75))
gray.colors(start = 0.1, end = 0.7,3,alpha=0.75)
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.3,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#B3B3B3BF", "#191919BF","#838383BF",
"#838383BF","#B3B3B3BF"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
plot_normfactors(Normfit)
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.3,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#B3B3B3BF", "#838383BF","#191919BF",
"#838383BF","#B3B3B3BF"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
plot_normfactors(Normfit)
gray.colors(start = 0.1, end = 0.7,10,alpha=0.75)
barplot(1:10, col = gray.colors(start = 0.1, end = 0.7,10,alpha=0.75))
barplot(1:10, col = gray.colors(start = 0.1, end = 0.7,10,alpha=0.85))
gray.colors(start = 0.1, end = 0.7,10,alpha=0.85)
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.3,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#7C7C7CD9", "#5C5C5CD9", "#191919D9",
"#5C5C5CD9","#7C7C7CD9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
<<<<<<< HEAD
axis.title = element_text(size = 22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"),
panel.border = element_rect(size = 0.5)
)
pdf("rate_ratio_he3dp.pdf",height = 0.75*7,width = 0.75*10)
ggplot(jointf,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.75)) +
#  geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="#F0F8FF",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction rate ratio") +
scale_fill_manual(values=c("#819987","#756bb1"),name="") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
=======
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.3,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A0A0A0D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A0A0A0D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
<<<<<<< HEAD
axis.title = element_text(size = 22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"),
panel.border = element_rect(size = 0.5)
)
dev.off()
data(dune)
dis <- vegdist(dune)
tr <- spantree(dis)
## Add tree to a metric scaling
plot(tr, cmdscale(dis), type = "t")
## Find a configuration to display the tree neatly
plot(tr, type = "t")
## Depths of nodes
depths <- spandepth(tr)
plot(tr, type = "t", label = depths)
## Plot as a dendrogram
cl <- as.hclust(tr)
plot(cl)
## cut hclust tree to classes and show in colours in spantree
plot(tr, col = cutree(cl, 5), pch=16)
require(vegan)
data(dune)
dis <- vegdist(dune)
tr <- spantree(dis)
## Add tree to a metric scaling
plot(tr, cmdscale(dis), type = "t")
## Find a configuration to display the tree neatly
plot(tr, type = "t")
## Depths of nodes
depths <- spandepth(tr)
plot(tr, type = "t", label = depths)
## Plot as a dendrogram
cl <- as.hclust(tr)
plot(cl)
## cut hclust tree to classes and show in colours in spantree
plot(tr, col = cutree(cl, 5), pch=16)
dune
plot(dune)
dis <- vegdist(iris[,1:3])
tr <- spantree(dis)
plot(tr, cmdscale(dis), type = "t")
plot(tr, type = "t")
iris[,1:3]
plot(tr, type = "t")
vegdist(iris[,1:3])
dis <- dist(iris[,1:3])
tr <- spantree(dis)
plot(tr, cmdscale(dis), type = "t")
plot(tr, type = "t")
tr
depths <- spandepth(tr)
plot(tr, type = "t", label = depths)
cl <- as.hclust(tr)
plot(cl)
plot(tr, col = cutree(cl, 5), pch=16)
hc <- hclust(dis, "ave")
plot(hc)
hc
library("dbscan")
data("moons")
plot(moons, pch=20)
cl <- hdbscan(moons, minPts = 5)
cl
plot(moons, col=cl$cluster+1, pch=20)
plot(cl)
cl
ggplot(jointf,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.75)) +
#  geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="#F0F8FF",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction rate ratio") +
scale_fill_manual(values=c("#819987","#756bb1"),name="") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
=======
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, color="red",fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A0A0A0D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A0A0A0D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
<<<<<<< HEAD
axis.title = element_text(size = 22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"),
panel.border = element_rect(size = 0.5)
)
pdf("rate_ratio_he3dp.pdf",height = 0.75*7,width = 0.75*10)
ggplot(jointf,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.75)) +
#  geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="#F0F8FF",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.05),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction rate ratio") +
scale_fill_manual(values=c("#819987","#756bb1"),name="") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
=======
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5, color ="red2",
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A0A0A0D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A0A0A0D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
<<<<<<< HEAD
axis.title = element_text(size = 22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"),
panel.border = element_rect(size = 0.5)
)
dev.off()
pdf("rate_ratio_he3dp.pdf",height = 0.75*7,width = 0.75*10)
ggplot(jointf,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.75)) +
#  geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="#F0F8FF",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.075),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction rate ratio") +
scale_fill_manual(values=c("#819987","#756bb1"),name="") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
=======
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A0A0A0D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A0A0A0D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
<<<<<<< HEAD
axis.title = element_text(size = 22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"),
panel.border = element_rect(size = 0.5)
)
dev.off()
pdf("rate_ratio_he3dp.pdf",height = 0.75*7,width = 0.75*10)
ggplot(jointf,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.75)) +
#  geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="#F0F8FF",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.06),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction rate ratio") +
scale_fill_manual(values=c("#819987","#756bb1"),name="") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.3, "cm"), long = unit(0.4, "cm"),
sides = "b") +
#  annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid"),name="") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
=======
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
gray.colors(start = 0.1, end = 0.7,10,alpha=0.85)
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
<<<<<<< HEAD
axis.title = element_text(size = 22),
axis.ticks = element_line(size = 0.75),
#        axis.line = element_line(linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"),
panel.border = element_rect(size = 0.5)
)
dev.off()
=======
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ",xi[j])))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
Delta_y <- jagsresults(x=Normfit , params=c('DeltaM'),probs=c(0.025, 0.16, 0.5, 0.84, 0.975))
gdata02 <- data.frame(x =xx, mean = Delta_y[,"mean"],lwr1=Delta_y[,"16%"],lwr2=Delta_y[,"2.5%"],
upr1=Delta_y[,"84%"],
upr2=Delta_y[,"97.5%"])
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
ggplot(gdata02,aes(x=x,y=mean))+
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.3) +
# Delta  Bare
# geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#dadaeb"),show.legend=FALSE)+
<<<<<<< HEAD
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.65, fill = c("#bcbddc"),show.legend=FALSE) +
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.85,fill=c("#756bb1"),show.legend=FALSE) +
=======
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.65, fill = c("#9e9ac8"),show.legend=FALSE) +
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.85,fill=c("#984ea3"),show.legend=FALSE) +
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
geom_line(linetype="dashed")+
#  Bare
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#dadaeb"),show.legend=FALSE)+
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#9e9ac8"),show.legend=FALSE) +
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#984ea3"),alpha=0.5,show.legend=FALSE) +
#
#
<<<<<<< HEAD
coord_cartesian(xlim=c(5e-3,0.325),ylim=c(0.9,1.06)) +
=======
coord_cartesian(xlim=c(5e-3,0.325),ylim=c(0.9,1.055)) +
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
theme_bw() + xlab("Energy (MeV)") + ylab("S-factor ratio") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.25, "cm"), long = unit(0.3, "cm"),
sides = "b",size = 0.45) +
#  annotation_logticks(base=2.875,
#  short = unit(0.2, "cm"), mid = unit(0.25, "cm"), long = unit(0.3, "cm"),sides = "l",size = 0.45) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.925,0.7),
legend.background = element_rect(colour = "white", fill = "white"),
legend.text = element_text(size=14,colour = set),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.text  = element_text(size=18),
axis.ticks = element_line(size = 0.45),
#        axis.line = element_line(size = 0.45, linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"))
<<<<<<< HEAD
=======
pdf("plot/Delta_models.pdf",height = 0.75*7,width = 0.75*10)
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
ggplot(gdata02,aes(x=x,y=mean))+
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.3) +
# Delta  Bare
# geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#dadaeb"),show.legend=FALSE)+
<<<<<<< HEAD
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.65, fill = c("#bcbddc"),show.legend=FALSE) +
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.85,fill=c("#756bb1"),show.legend=FALSE) +
=======
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.65, fill = c("#9e9ac8"),show.legend=FALSE) +
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.85,fill=c("#984ea3"),show.legend=FALSE) +
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
geom_line(linetype="dashed")+
#  Bare
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#dadaeb"),show.legend=FALSE)+
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#9e9ac8"),show.legend=FALSE) +
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#984ea3"),alpha=0.5,show.legend=FALSE) +
#
#
coord_cartesian(xlim=c(5e-3,0.325),ylim=c(0.9,1.055)) +
theme_bw() + xlab("Energy (MeV)") + ylab("S-factor ratio") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.25, "cm"), long = unit(0.3, "cm"),
sides = "b",size = 0.45) +
#  annotation_logticks(base=2.875,
#  short = unit(0.2, "cm"), mid = unit(0.25, "cm"), long = unit(0.3, "cm"),sides = "l",size = 0.45) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.925,0.7),
legend.background = element_rect(colour = "white", fill = "white"),
legend.text = element_text(size=14,colour = set),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.text  = element_text(size=18),
axis.ticks = element_line(size = 0.45),
#        axis.line = element_line(size = 0.45, linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"))
<<<<<<< HEAD
pdf("plot/Delta_models.pdf",height = 0.75*7,width = 0.75*10)
ggplot(gdata02,aes(x=x,y=mean))+
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.3) +
# Delta  Bare
# geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#dadaeb"),show.legend=FALSE)+
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.65, fill = c("#bcbddc"),show.legend=FALSE) +
geom_ribbon(data=gdata02,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.85,fill=c("#756bb1"),show.legend=FALSE) +
geom_line(linetype="dashed")+
#  Bare
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),fill=c("#dadaeb"),show.legend=FALSE)+
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),  fill = c("#9e9ac8"),show.legend=FALSE) +
#  geom_ribbon(data=gdata0,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),fill=c("#984ea3"),alpha=0.5,show.legend=FALSE) +
#
#
coord_cartesian(xlim=c(5e-3,0.325),ylim=c(0.9,1.055)) +
theme_bw() + xlab("Energy (MeV)") + ylab("S-factor ratio") +
scale_x_log10(breaks = c(0.001,0.01,0.1,1),labels=c("0.001","0.01","0.1","1"))  +
annotation_logticks(short = unit(0.2, "cm"), mid = unit(0.25, "cm"), long = unit(0.3, "cm"),
sides = "b",size = 0.45) +
#  annotation_logticks(base=2.875,
#  short = unit(0.2, "cm"), mid = unit(0.25, "cm"), long = unit(0.3, "cm"),sides = "l",size = 0.45) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.925,0.7),
legend.background = element_rect(colour = "white", fill = "white"),
legend.text = element_text(size=14,colour = set),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.text  = element_text(size=18),
axis.ticks = element_line(size = 0.45),
#        axis.line = element_line(size = 0.45, linetype = "solid"),
axis.text.y = element_text(size = 20, margin = unit(c(t = 0, r = 5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 20, margin = unit(c(t = 5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-3, "mm"))
dev.off()
dtc
require(LaplacesDemon)
rhalfnorm(800)
hist(rhalfnorm(n, scale=sqrt(pi/2)))
hist(rhalfnorm(800)
hist(rhalfnorm(800))
hist(rhalfnorm(800))
LPL.interval(rhalfnorm(835), dtc$E0, prob=0.95)
LPL.interval(rbeta(835,0.5,0.5), dtc2$Er_b, prob=0.95)
quantile(dtc2$Er_b)
KLD(rbeta(835,0.5,0.5), dtc2$Er_b, prob=0.95)
KLD(rbeta(835,0.5,0.5), dtc2$Er_b)
KLD(rbeta(835,0.5,0.5), dtc2$Er_b,base=2)
KLD(rbeta(835,0.5,0.5), dtc$Er,base=2)
KLD(rbeta(835,0.5,0.5), dtc2$Er_b,base=2)
KLD(rbeta(835,0.5,0.5), dtc$E0,base=2)
rhalfnorm(10)
rhalfnorm(10,3)
sd(rhalfnorm(10,3))
sd(rhalfnorm(100,3))
sd(rhalfnorm(1000,3))
sd(rhalfnorm(10000,3))
sd(rhalfnorm(100000,3))
x <- seq(from=0.1, to=20, by=0.1)
plot(x, dhalfnorm(x,0.1), ylim=c(0,1), type="l", main="Probability Function",
ylab="density", col="red")
lines(x, dhalfnorm(x,0.5), type="l", col="green")
lines(x, dhalfnorm(x,1), type="l", col="blue")
legend(2, 0.9, expression(sigma==0.1, sigma==0.5, sigma==1),
lty=c(1,1,1), col=c("red","green","blue"))
1/0.5
1/3
Sp <- ggs(as.mcmc(Normfit)[,c("Er", "gd2", "gp2","ue_ev[1]","ue_ev[2]","S_0")])
Sp0 <- Sp %>% as_tibble()
Sp0$Parameter <- ordered(Sp0$Parameter, levels = c("Er", "gd2", "gp2","ue_ev[1]","ue_ev[2]","S_0"))
levels(Sp0$Parameter) <- as.factor(c("E[0]~(MeV)","gamma[d]^2~(MeV)", "gamma[p]^2~(MeV)","U[e1]~(eV)", "U[e2]~(eV)","S[0]~(MeV~b)"))
pdf("plot/He3dp_corr.pdf",height = 7,width = 7)
pair_wise_plot(Sp0)
dev.off()
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/He3dp/Real_data")
# 3Hedp analysis
#
# purpose: Real  DATA
#
# - 5 parameters are assumed: Er, gamma_d^2, gamma_n^2 [e1, gin, gout]
#
# - uses the function sfactorHe3dp(obsx1[i], e1, gin, gout), which
#   is a C++ version of a Fortran code that includes Coulomb wave
#   function calculations; JAGS has been recompiled with this C++ function
#
######################################################################
# preparation: remove all variables from the work space
#rm(list=ls())
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
library(rjags);library(R2jags);library(mcmcplots)
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);library(wesanderson)
library(dplyr);require(ggsci);require(ggmcmc);require(plyr);library(latex2exp)
require(MCMCvis);require(ggridges)
source("..//..//auxiliar_functions/jagsresults.R")
source("..//..//auxiliar_functions/theme_rafa.R")
source("..//..//auxiliar_functions/pair_wise_plot.R")
source("..//..//auxiliar_functions/Gamma3Hedp.R")
source("plot_Sfactor.R")
source("plot_normfactors.R")
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
######################################################################
## Read DATA
ensamble <- read.csv("ensamble.csv",header = T) %>%
mutate(Syst=replace(Syst,Syst==0.06,0.078))  %>% filter(E <= 0.5)
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
ik <- as.numeric(ensamble$invK)
Nik <- length(unique(ensamble$invK))
# Radius
# r_i = 6
# r_f = 5
# Literature
#  0.35779   # resonance energy
#  1.0085    # reduced width incoming
#  0.025425   # reduced width outgoing
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
lab <- ensamble$invK
syst = c(0.03,unique(ensamble$Syst))
#syst <- syst[-3]
M <- 500
xx <- seq(min(obsx),max(obsx),length.out = M)
model.data <- list(obsy = obsy,    # Response variable
obsy2 = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble), # Sample size
syst = syst,
Nre = Nre,
re = re,
Nik = Nik,
ik  = ik,
M = M,
xx = xx
#                  ap  = 5,
#                  ad = 6
)
# Conservative case
######################################################################
Model <- "model{
# LIKELIHOOD informative
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i], E0, Er, gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
res[i] <- obsy[i]-sfactor3Hedp(obsx[i], E0, Er, gd2, gp2, ad, ap,0)
}
# LIKELIHOOD broad
for (i in 1:N) {
obsy2[i] ~ dnorm(y_2[i], pow(erry[i], -2))
y_2[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i],  E0_b, Er_b, gd2_b, gp2_b, ad_b, ap_b, ue[ik[i]]),pow(tau_2, -2))
}
RSS <- sum(res^2)
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactor3Hedp(xx[j], E0, Er, gd2, gp2, ad, ap,0)
mux0_2[j] <- sfactor3Hedp(xx[j], E0_b, Er_b, gd2_b, gp2_b, ad_b, ap_b,0)
DeltaM[j] <- mux0[j]/mux0_2[j]
# No inverse Kinematics
mux1[j] <- sfactor3Hedp(xx[j], E0, Er, gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactor3Hedp(xx[j], E0, Er, gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),1/log(1+pow(syst[k],2)))
}
for (z in 1:Nik){
ue[z] ~ dnorm(0,pow(0.1,-2))T(0,)
}
# PRIORS
# Case I
tau ~  dnorm(0, pow(1,-2))T(0,)
E0  ~  dnorm(0, pow(1,-2))T(0,)
Er <-  E0
gd2 ~  dnorm(0, pow(3,-2))T(0,)
gp2 ~  dnorm(0, pow(3,-2))T(0,)
ad  ~  dnorm(6, pow(0.01,-2))T(0,)
ap  ~  dnorm(5, pow(0.01,-2))T(0,)
# Case II
tau_2  ~    dnorm(0, pow(1,-2))T(0,)
Er_b  ~   dbeta(0.5,0.5)
E0_b  ~   dbeta(2,5)
gp2_b ~  dnorm(0, pow(3,-2))T(0,)
gd2_b  ~ dnorm(0, pow(3,-2))T(0,)
ad_b  ~  dunif(2,10)
ap_b  ~  dunif(2,10)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
S_0   <- sfactor3Hedp(1e-4, E0, Er, gd2, gp2, ad, ap,0)
S_0b  <- sfactor3Hedp(1e-4, E0_b, Er_b, gd2_b, gp2_b, ad_b, ap_b,0)
}"
inits <- function () { list(E0 = runif(1,0.3,0.35),E0_b = 0.4,Er_b = 0.4,gd2 = 1,
gp2 = runif(1,0.01,0.1),gd2_b = 0.5) }
set.seed(24)
set.seed(24)
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("Er","E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"RSS","mux0","mux1","mux2","scale","DeltaM","S_0",
"S_0b","E0_b","Er_b","gd2_b",
"gp2_b","tau_2","ad_b","ap_b" ),
model.file  = textConnection(Model),
n.thin = 30,
n.chains = 5,
n.burnin = 5000,
n.iter = 10000)
=======
dev.off()
plot_normfactors <- function(Normfit){
Sa <- ggs(as.mcmc(Normfit),family="scale")
Sa$Parameter <- revalue(Sa$Parameter,
c("scale[1]" = "Ali01a","scale[2]" = "Ali01b","scale[3]" = "Cos00",
"scale[4]" = "Gei99","scale[5]" = "Kra87","scale[6]" = "Mol80",
"scale[7]" = "Zhi77"))
jagsresults(x = Normfit, params = c("scale"),probs = c(0.0015,0.025, 0.16, 0.5, 0.84, 0.975,0.9985))
require(ggridges)
gg <- ggplot(Sa, aes(x = value, y = Parameter, fill=factor(..quantile..),alpha=factor(..quantile..))) +
#   geom_density_ridges(scale = 2.5,panel_scaling=F) +
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE, alpha=0.5,
quantile_lines = TRUE,quantiles = c(0.025, 0.16,  0.84, 0.975)) +
theme_economist_white() +
scale_fill_manual(name = "Probability", values = c("#A9A9A9D9", "#6E6E6ED9", "#191919D9",
"#6E6E6ED9","#A9A9A9D9"))+
geom_vline(xintercept = 1,linetype="dashed",color="red") +
#  scale_fill_manual(values=c(rep("gray75",7))) +
# geom_point(size=1,color="red") +
theme(legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(color="black", size=15),
axis.text  = element_text(size=10),
strip.background = element_rect("white")) +
ylab("") +
#  xlab("Highest Probability Interval")
xlab(expression(paste("Normalization factors ")))
return(gg)
}
pdf("plot/He3dp_scale_syst.pdf",height = 5,width = 4.5)
plot_normfactors(Normfit)
dev.off()
>>>>>>> e782103f99d3ed2da11c3ed8bed8204ba2d00510
