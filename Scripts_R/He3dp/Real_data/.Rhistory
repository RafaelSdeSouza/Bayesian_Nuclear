# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,10)
gin ~  dunif(gout,50)
# Channel radius
#ri ~ ddexp(6,lambda_i)
rf ~ ddexp(5,lambda_f)
ri ~ dunif(3,7)
#lambda_i ~ dunif(0.1,50)
lambda_f ~ dunif(5,50)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 15000,
n.iter = 25000)
jagsresults(x = Normfit , params = c("e1", "gin", "gout","ri","rf","tau"))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
y <- jagsresults(x=Normfit , params=c('mux'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],lwr3=y[,"0.5%"],upr1=y[,"75%"],
upr2=y[,"97.5%"],upr3=y[,"99.5%"])
gobs <- data.frame(obsx,obsy,erry,set)
gobs$set <- as.factor(gobs$set)
ggplot(gobs,aes(x=obsx,y=obsy))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),alpha=0.7,fill=c("gray70"),show.legend=FALSE)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),alpha=0.6,  fill = c("gray50"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.4,fill=c("gray30"),show.legend=FALSE) +
geom_point(data=gobs,aes(x=obsx,y=obsy,group=set,color=set,shape=set),size=2)+
geom_errorbar(data=gobs,aes(x=obsx,y=obsy,ymin=obsy-erry,ymax=obsy+erry,group=set,color=set),width=0.005)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="white",linetype="dashed",size=1,show.legend=FALSE)+
scale_colour_futurama(name="Dataset")+
scale_shape(name="Dataset")+
theme_wsj() + xlab("Energy (MeV)") + ylab("S-Factor (MeV b)") + scale_x_log10()  +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,10)
gin ~  dunif(gout,50)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(0.1,50)
lambda_f ~ dunif(5,50)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,10)
gin ~  dunif(gout,50)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(5,50)
lambda_f ~ dunif(5,50)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,10)
gin ~  dunif(0,30)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(5,50)
lambda_f ~ dunif(5,50)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x = Normfit , params = c("e1", "gin", "gout","ri","rf","tau"))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,10)
gin ~  dunif(0,30)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(50,100)
lambda_f ~ dunif(50,100)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x = Normfit , params = c("e1", "gin", "gout","ri","rf","tau"))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
# Plot of predicted values
y <- jagsresults(x=Normfit , params=c('mux'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],lwr3=y[,"0.5%"],upr1=y[,"75%"],
upr2=y[,"97.5%"],upr3=y[,"99.5%"])
gobs <- data.frame(obsx,obsy,erry,set)
gobs$set <- as.factor(gobs$set)
ggplot(gobs,aes(x=obsx,y=obsy))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr3, ymax=upr3,y= NULL),alpha=0.7,fill=c("gray70"),show.legend=FALSE)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL),alpha=0.6,  fill = c("gray50"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL),alpha=0.4,fill=c("gray30"),show.legend=FALSE) +
geom_point(data=gobs,aes(x=obsx,y=obsy,group=set,color=set,shape=set),size=2)+
geom_errorbar(data=gobs,aes(x=obsx,y=obsy,ymin=obsy-erry,ymax=obsy+erry,group=set,color=set),width=0.005)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="white",linetype="dashed",size=1,show.legend=FALSE)+
scale_colour_futurama(name="Dataset")+
scale_shape(name="Dataset")+
theme_wsj() + xlab("Energy (MeV)") + ylab("S-Factor (MeV b)") + scale_x_log10()  +
theme(legend.position = "top",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85")) +
ggtitle(expression(paste(NULL^"3","He(d,p)",NULL^"4","He")))
denplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
install.packages("GA")
require(GA)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],x[4],x[5]))^2,
popSize = 50, maxiter = 1000, run = 100)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],x[4],x[5]))^2,
min = c(0.001, 0.001), max = c(100, 100),
popSize = 50, maxiter = 1000, run = 100)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],x[4],x[5]))^2,
min = c(0.001, 0.001), max = c(100, 100),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],x[4],x[5]))^2,
min = c(0.001, 0.001), max = c(20, 20),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],x[4],x[5]))^2,
min = c(0.01, 0.01), max = c(20, 20),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],x[4],x[5]))^2,
min = c(0.01, 0.01,0.01,0.01,0.01), max = c(1, 10,1,10,10),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
summary(GA)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],6,5))^2,
min = c(0.01, 0.01,0.01,0.01,0.01), max = c(1, 10,1,10,10),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
summary(GA)
GA
summary(GA)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp_5p(obsx,x[1], x[2],x[3],6,5))^2,
min = c(0.01, 0.01,0.01), max = c(1, 10,1),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
summary(GA)
GA <- ga(type = "real-valued",
fitness =  function(x) (obsy-sfactor3Hedp(obsx,x[1], x[2],x[3]))^2,
min = c(0.01, 0.01,0.01), max = c(1, 10,1),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
summary(GA)
GA <- ga(type = "real-valued",
fitness =  function(x) -(obsy-sfactor3Hedp(obsx,x[1], x[2],x[3]))^2,
min = c(0.01, 0.01,0.01), max = c(1, 10,1),
popSize = 50, maxiter = 1000, run = 100,optim = TRUE)
summary(GA)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,0.5)
gin ~  dunif(1,30)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(50,100)
lambda_f ~ dunif(50,100)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,0.5)
gin ~  dunif(0,30)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(50,100)
lambda_f ~ dunif(50,100)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp_5p(obsx[i], e1, gin, gout, ri, rf),pow(tau, -2))
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp_5p(xx[j], e1, gin, gout,ri, rf)
yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(log(1+syst[k]),-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
tau ~  dunif(0.01,10)
e1 ~   dunif(0,10)
gout ~ dunif(0,50)
gin ~  dunif(0,50)
# Channel radius
ri ~ ddexp(4,lambda_i)
rf ~ ddexp(5,lambda_f)
#ri ~ dunif(3,7)
lambda_i ~ dunif(50,100)
lambda_f ~ dunif(50,100)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1) ) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("e1", "gin", "gout","ri","rf","tau","mux","scale"),
model.file  = textConnection(Model),
n.thin = 1,
n.chains = 4,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x = Normfit , params = c("e1", "gin", "gout","ri","rf","tau"))
traplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
denplot(Normfit  ,c("e1", "gin", "gout","ri","rf"),style="plain")
