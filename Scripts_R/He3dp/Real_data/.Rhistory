LK2 <- function(x1,x2) {likelihood(c(0.0912,x1,x2))}
LK2(1,1)
x1 <- x2 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2,LK2 )
persp3D(x1, x2, f, theta = 50, phi = 20)
f
outer(x1,x2,LK2 )
x1
x2
x1 <- x2 <- seq(0.001, 20, by = 0.1)
f <- outer(x1,x2,LK2 )
LK2
LK2
LK2 <- function(x1,x2) {likelihood(c(0.0912,x1,x2))}
x1 <- x2 <- seq(0.001, 20, by = 0.1)
f <- outer(x1,x2,LK2 )
outer(x1,x2, LK2 )
LK2(1,1)
LK2(1,2)
persp3D(x1, x2, f, theta = 50, phi = 2
persp3D(x1, x2, f, theta = 50, phi = 20)
persp3D(x1, x2, f, theta = 50, phi = 20)
expand.grid(x1,x2)
LK2(expand.grid(x1,x2))
xy <- expand.grid(x1,x2)
xy[,1]
LK2(xy[,1],xy[,2])
LK2(xy[,1],xy[,2])
xy[,1]
sapply(LK2,xy)
sapply(xy,LK2)
sapply(LK2,xy)
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
sapply(xy,LK2)
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy,LK2)
xy
sapply(xy$x1,xy$x1,LK2)
sapply(xy$x1,xy$x2,LK2)
require(GA)
SF<- function(x1, x2){
sfactorTdn(ER=0.0912,gi=x1,gf=x2)
}
x <- runif(100, 0.01, 0.3)
erry<- runif( 100, 0.01, 0.1)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy$x1,xy$x2,LK2)
x1 <- x2 <- seq(0.001, 20, by = 0.1)
slopevalues <- function(y){return(likelihood(c(0.0912,x1,x2)))}
slopevalues
x1
x2
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues
xy
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy ,slopevalues)
sapply(c(x1,x2),slopevalues)
apply(c(x1,x2),slopevalues)
apply(xy,slopevalues)
apply(xy,1,slopevalues)
xy <- expand.grid(x1=x1,x2=x2)
apply(xy,2,slopevalues)
apply(xy,1,slopevalues)
x
xy <- expand.grid(x1=x1,x2=x2)
xy
apply(xy,1,slopevalues)
xy1
xy
xy[1,]
apply(xy,2,slopevalues)
slopevalues(xy)
slopevalues(xy[1,])
slopevalues(xy[,1],xy[,1])
slopevalues(xy[1,1],xy[1,1])
slopevalues(1,1)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues(1,1)
y
require(nuclear)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues(1,1)
slopevalues(xy[,1],xy[,2])
slopevalues(xy)
apply(xy,2,slopevalues)
xy
as.data.frame(xy)
xy <- as.data.frame(xy)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
apply(xy,2,slopevalues)
Vectorize(slopevalues)
slopevalues <- Vectorize(slopevalues)
slopevalues(xy)
slopevalues
slopevalues(xy$x1,xy$x2)
f <- slopevalues(xy$x1,xy$x2)
persp3D(x1, x2, f, theta = 50, phi = 20)
persp3D(xy, f, theta = 50, phi = 20)
f
200*200
xy
persp3D(xy$x1,xy$x2, f, theta = 50, phi = 20)
xy$x1
xy$x2
z <- outer(x1, x2, slopevalues)
persp3D(x, y, z, theta = 50, phi = 20)
persp3D(x1, x2, z, theta = 50, phi = 20)
persp3D(x1, x2, z, theta = 50, phi = 30)
persp3D(x1, x2, z, theta = 80, phi = 30)
persp3D(x1, x2, z, theta = 80, phi = 20)
x1 <- x2 <- seq(0.001, 5, by = 0.1)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 80, phi = 20)
persp3D(x1, x2, z, theta = 60, phi = 20)
persp3D(x1, x2, z, theta = 60, phi = 60)
persp3D(x1, x2, z, theta = 60, phi = 25)
persp3D(x1, x2, z, theta = 160, phi = 25)
persp3D(x1, x2, z, theta = 140, phi = 25)
persp3D(x1, x2, z, theta = 120, phi = 25)
persp3D(x1, x2, z, theta = 110, phi = 25)
persp3D(x1, x2, z, theta = 90, phi = 25)
persp3D(x1, x2, z, theta = 100, phi = 25)
persp3D(x1, x2, z, theta = 100, phi = 35)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <- x2 <- seq(0.001, 2, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <-  seq(0.001, 3.5, by = 0.01)
x2 <-  seq(0.001, 1, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <-  seq(0.001, 3.5, by = 0.01)
x2 <-  seq(0.001, 0.2, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
persp3D(x1, x2, z, theta = 60, phi = 15)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
summary(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 100)
summary(GA)
plot(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 500)
summary(GA)
summary(GA)
plot(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.0001, 0.0001), max = c(10, 10),
popSize = 100, maxiter = 1000)
summary(GA)
plot(GA)
summary(GA)
plot(GA)
filled.contour(x1, x2, z, color.palette = jet.colors)
filled.contour(x1, x2, z, color.palette = terrain.colors)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 200)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100,key.axes=F)
levelplot(z~x1*x2, grid, cuts = 100)
require(lattice)
levelplot(z~x1*x2, grid, cuts = 100)
levelplot(z~x1*x2,  cuts = 100)
levelplot(z~x1*x2,  cuts = 100,color.palette = terrain.colors)
levelplot(z~x1*x2,  cuts = 100,color.palette = terrain.colors,region = TRUE)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
filled.contour(x1, x2, z,nlevels = 100)
library(RColorBrewer)
darkcols <- brewer.pal(8, "Dark2")
filled.contour(x1, x2, z,color.palette=darkcols, nlevels = 100)
filled.contour(x1, x2, z, color.palette = darkcols ,nlevels = 100)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
terrain.colors
filled.contour(x1, x2, z, color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),nlevels = 100)
15*30
15*40
14+24
38*10
2*3/2+1
1+1
2*3
setwd("~/Documents/GitHub/JAGS_UNC/Scripts_R/He3dp/Real_data")
######################################################################
# import packages
library(rjags);library(R2jags);library(mcmcplots)
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);library(wesanderson)
library(dplyr);require(ggsci);require(ggmcmc);require(plyr);library(latex2exp)
require(MCMCvis);require(ggridges)
source("..//..//auxiliar_functions/jagsresults.R")
source("..//..//auxiliar_functions/theme_rafa.R")
source("..//..//auxiliar_functions/pair_wise_plot.R")
source("..//..//auxiliar_functions/Gamma3Hedp.R")
source("plot_Sfactor.R")
source("plot_normfactors.R")
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
######################################################################
## Read DATA
ensamble <- read.csv("ensamble.csv",header = T) %>%
mutate(Syst=replace(Syst,Syst==0.06,0.078))  %>% filter(E <= 0.5)
re <- as.numeric(ensamble$dat)
Nre <- length(unique(ensamble$dat))
ik <- as.numeric(ensamble$invK)
Nik <- length(unique(ensamble$invK))
# Radius
# r_i = 6
# r_f = 5
# Literature
#  0.35779   # resonance energy
#  1.0085    # reduced width incoming
#  0.025425   # reduced width outgoing
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
set <- ensamble$dat
lab <- ensamble$invK
syst = c(0.03,unique(ensamble$Syst))
#syst <- syst[-3]
M <- 500
xx <- seq(min(obsx),max(obsx),length.out = M)
model.data <- list(obsy = obsy,    # Response variable
obsy2 = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble), # Sample size
syst = syst,
Nre = Nre,
re = re,
Nik = Nik,
ik  = ik,
M = M,
xx = xx
#                  ap  = 5,
#                  ad = 6
)
# Conservative case
######################################################################
Model <- "model{
# LIKELIHOOD informative
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i], E0, Er, gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
res[i] <- obsy[i]-sfactor3Hedp(obsx[i], E0, Er, gd2, gp2, ad, ap,0)
}
# LIKELIHOOD broad
for (i in 1:N) {
obsy2[i] ~ dnorm(y_2[i], pow(erry[i], -2))
y_2[i] ~ dnorm(scale[re[i]]*sfactor3Hedp(obsx[i],  E0_b, Er_b, gd2_b, gp2_b, ad_b, ap_b, ue[ik[i]]),pow(tau_2, -2))
}
RSS <- sum(res^2)
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactor3Hedp(xx[j], E0, Er, gd2, gp2, ad, ap,0)
mux0_2[j] <- sfactor3Hedp(xx[j], E0_b, Er_b, gd2_b, gp2_b, ad_b, ap_b,0)
DeltaM[j] <- mux0[j]/mux0_2[j]
# No inverse Kinematics
mux1[j] <- sfactor3Hedp(xx[j], E0, Er, gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactor3Hedp(xx[j], E0, Er, gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),1/log(1+pow(syst[k],2)))
}
for (z in 1:Nik){
ue[z] ~ dnorm(0,pow(0.1,-2))T(0,)
}
# PRIORS
# Case I
tau ~  dnorm(0, pow(1,-2))T(0,)
E0  ~  dnorm(0, pow(1,-2))T(0,)
Er <-  E0
gd2 ~  dnorm(0, pow(3,-2))T(0,)
gp2 ~  dnorm(0, pow(3,-2))T(0,)
ad  ~  dnorm(6, pow(0.01,-2))T(0,)
ap  ~  dnorm(5, pow(0.01,-2))T(0,)
# Case II
tau_2  ~    dnorm(0, pow(1,-2))T(0,)
Er_b  ~   dbeta(0.5,0.5)
E0_b  ~   dbeta(2,5)
gp2_b ~  dnorm(0, pow(3,-2))T(0,)
gd2_b  ~ dnorm(0, pow(3,-2))T(0,)
ad_b  ~  dunif(2,10)
ap_b  ~  dunif(2,10)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
S_0   <- sfactor3Hedp(1e-4, E0, Er, gd2, gp2, ad, ap,0)
S_0b  <- sfactor3Hedp(1e-4, E0_b, Er_b, gd2_b, gp2_b, ad_b, ap_b,0)
}"
inits <- function () { list(E0 = runif(1,0.3,0.35),E0_b = 0.4,Er_b = 0.4,gd2 = 1,
gp2 = runif(1,0.01,0.1),gd2_b = 0.5) }
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("Er","E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"RSS","mux0","mux1","mux2","scale","DeltaM","S_0",
"S_0b","E0_b","Er_b","gd2_b",
"gp2_b","tau_2","ad_b","ap_b" ),
model.file  = textConnection(Model),
n.thin = 30,
n.chains = 5,
n.burnin = 5000,
n.iter = 10000)
jagsresults(x = Normfit, params = c("E0","gd2", "gp2","ue","tau", "ad","ap","ue_ev","S_0"),probs = c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
sqrt(GammaHe3dp(Normfit)$Ga)
plot_normfactors(Normfit)
jagsresults(x = Normfit, params = c("scale"),probs = c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
require(nuclear)
Tgrid = c(0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.009,0.010,0.011,0.012,
0.013,0.014,0.015,0.016,0.018,0.020,0.025,0.030,0.040,0.050,0.060,0.070,
0.080,0.090,0.100,0.110,0.120,0.130,0.140,0.150,0.160,0.180,0.200,0.250,0.300,
0.350,0.400,0.450,0.500,0.600,0.700,0.800,0.900,1.000,1.250,1.500,1.750,2.000,2.500,3.000,3.500,4.000,5.000,
6.000,7.000,8.000,9.000,10.000)
NAI <- table_reaction_He3dp(Normfit, vars=c("E0","Er","gd2", "gp2", "ad","ap"),N=800,T9=Tgrid )
NAI
NAII <- table_reaction_He3dp(Normfit, vars=c("E0_b","Er_b","gd2_b", "gp2_b", "ad_b","ap_b"),N=800,T9=Tgrid )
NAII
NAI
Norm <- NAII$mean
NAI_new <- NAI  %>%  mutate(data = "present") %>%
select(c("T9","mean","lower","upper")) %>%
set_colnames(c("T9","Adopted","Lower","Upper")) %>%
mutate(Adopted = Adopted/Norm) %>%
mutate(Lower = Lower/Norm) %>%
mutate(Upper = Upper/Norm)  %>%
mutate(data="present")
NAII_new <- NAII  %>%  mutate(data = "present") %>%
select(c("T9","mean","lower","upper")) %>%
set_colnames(c("T9","Adopted","Lower","Upper")) %>%
mutate(Adopted = Adopted/Norm) %>%
mutate(Lower = Lower/Norm) %>%
mutate(Upper = Upper/Norm)  %>%
mutate(data="present")
old <- read.csv("tabula-tab_he3dp.csv",header = TRUE) %>%
select(c("T9","Adopted","Lower","Upper"))  %>%
mutate(data="previous") %>%
mutate(Adopted = Adopted/Norm) %>%
mutate(Lower = Lower/Norm) %>%
mutate(Upper = Upper/Norm)
joint <- rbind(old,NAI_new,NAII_new)
NAI_new <- NAI  %>%  mutate(data = "present") %>%
select(c("T9","mean","lower","upper")) %>%
set_colnames(c("T9","Adopted","Lower","Upper")) %>%
mutate(Adopted = Adopted/Norm) %>%
mutate(Lower = Lower/Norm) %>%
mutate(Upper = Upper/Norm)  %>%
mutate(data="presentI")
NAII_new <- NAII  %>%  mutate(data = "present") %>%
select(c("T9","mean","lower","upper")) %>%
set_colnames(c("T9","Adopted","Lower","Upper")) %>%
mutate(Adopted = Adopted/Norm) %>%
mutate(Lower = Lower/Norm) %>%
mutate(Upper = Upper/Norm)  %>%
mutate(data="presentII")
old <- read.csv("tabula-tab_he3dp.csv",header = TRUE) %>%
select(c("T9","Adopted","Lower","Upper"))  %>%
mutate(data="previous") %>%
mutate(Adopted = Adopted/Norm) %>%
mutate(Lower = Lower/Norm) %>%
mutate(Upper = Upper/Norm)
joint <- rbind(old,NAI_new,NAII_new)
write.csv(joint ,"joint_rate.csv",row.names = F)
ggplot(joint,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.3)) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction") +
scale_fill_fivethirtyeight()+
scale_x_log10()  +
annotation_logticks(sides = "b") +
annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","solid")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.ticks = element_line(size = 0.75),
axis.line = element_line(size = 0.75, linetype = "solid"),
axis.text.y = element_text(size = 18, margin = unit(c(t = 0, r = 3.5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 18, margin = unit(c(t = 3.5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-2.4, "mm"))
ggplot(joint,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.3)) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction") +
scale_fill_fivethirtyeight()+
scale_x_log10()  +
annotation_logticks(sides = "b") +
annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","dotted","solid")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.ticks = element_line(size = 0.75),
axis.line = element_line(size = 0.75, linetype = "solid"),
axis.text.y = element_text(size = 18, margin = unit(c(t = 0, r = 3.5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 18, margin = unit(c(t = 3.5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-2.4, "mm"))
ggplot(joint,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.3)) +
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.9,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction") +
scale_fill_fivethirtyeight()+
scale_x_log10()  +
annotation_logticks(sides = "b") +
annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","dotted","solid")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.ticks = element_line(size = 0.75),
axis.line = element_line(size = 0.75, linetype = "solid"),
axis.text.y = element_text(size = 18, margin = unit(c(t = 0, r = 3.5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 18, margin = unit(c(t = 3.5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-2.4, "mm"))
ggplot(joint,aes(x=T9,y=Adopted, group=data,fill=data,linetype=data,alpha=0.3)) +
geom_rect(aes(xmin=0.045, xmax=0.356, ymin=-1, ymax=22), fill="gray90",alpha=0.4) +
geom_ribbon(aes(x=T9,ymin=Lower, ymax=Upper),show.legend=FALSE) +
geom_line() +
coord_cartesian(ylim=c(0.85,1.1),xlim=c(0.00125,1)) +
theme_bw() + xlab("Temperature (GK)") + ylab("Reaction") +
scale_fill_fivethirtyeight()+
scale_x_log10()  +
annotation_logticks(sides = "b") +
annotation_logticks(base=2.875,sides = "l") +
scale_linetype_manual(guide=F,values=c("dashed","dotted","solid")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
legend.background = element_rect(colour = "white", fill = "white"),
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(size=22),
axis.ticks = element_line(size = 0.75),
axis.line = element_line(size = 0.75, linetype = "solid"),
axis.text.y = element_text(size = 18, margin = unit(c(t = 0, r = 3.5, b = 0, l = 0), "mm")),
axis.text.x = element_text(size = 18, margin = unit(c(t = 3.5, r = 0, b = 0, l = 0), "mm")),
axis.ticks.length = unit(-2.4, "mm"))
