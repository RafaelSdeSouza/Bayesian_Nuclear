ddist = dt,
ddist_params = list(ncp=0, df=1),
labels = list(location = c(0.5, 0.3), right_scale = c(0.77, 0.55), left_scale = c(0.23, 0.55))
),
half_t = list(
name = "half-t",
name_pos = c(0.3, 0.1),
plot_type = "line",
x = seq(0.0, 3.0, 0.01),
top_space = 0,
ddist = dt,
ddist_params = list(ncp=0, df=3),
labels = list(scale = c(0.43, 0.62), df = c(0.65, 0.4))
),
half_cauchy = list(
name = "half-Cauchy",
name_pos = c(0.36, 0.1),
plot_type = "line",
x = seq(0.0, 3.0, 0.01),
top_space = 0,
ddist = dt,
ddist_params = list(ncp=0, df=1),
labels = list(scale = c(0.53, 0.5))
),
half_normal = list(
name = "half-normal",
name_pos = c(0.36, 0.1),
plot_type = "line",
x = seq(0.0, 3.0, 0.01),
top_space = 0,
ddist = dnorm,
ddist_params = list(mean=0, sd=1),
labels = list(sd = c(0.53, 0.5))
)
)
plot_dist_svg <- function(dist, labels=c(), fname="", color="skyblue", plot_dist_name=T) {
if(fname == "") {
fname = paste(gsub("\\W", "", gsub("\\s", "_", dist$name)), ".svg", sep="")
}
svg(fname, width=2.25, height=1.688, bg="transparent")
plot_dist(dist, labels, color=color, plot_dist_name=plot_dist_name)
dev.off()
}
plot_dist_png <- function(dist, labels=c(), fname="", color="skyblue", plot_dist_name=T) {
if(fname == "") {
fname = paste(gsub("\\W", "", gsub("\\s", "_", dist$name)), ".png", sep="")
}
png(fname, width=165, height=123, bg="transparent", res=72, )
plot_dist(dist, labels, color=color, plot_dist_name=plot_dist_name)
dev.off()
}
# Function that renders text as an image. Useful for constructing images of equations.
# See ?plotmath for examples and documentation
plot_text_svg <- function(expr, fname) {
svg(fname, bg="transparent")
plot.new()
text(0.5, 0.5, expr)
dev.off()
}
plot_text_png <- function(expr, fname, pointsize=32, width=640, height=480 ) {
png(fname, bg="transparent", width=width, height=height, pointsize=pointsize)
plot.new()
text(0.5, 0.5, expr)
dev.off()
}
.plotlognormallMiniPlot <- function() {
xLim <- 3.5
x <- seq(0, xLim, length = 501)
y <- dlnorm(x)
.generateMiniPlot(x, y)
}
# DBAD diagram of hierarchical models
# Generate the Mini-Plots of different distributions
Manager <- list(mainLineColor = "skyblue",
mainLineWidth = 6,
baseLineWidth = 2,
directory     = "./MiniPlots/",
miniPlots     = c("Normal", "Gamma", "Beta", "Dirichlet", "Binomial", "Uniform", "Student",
"lognormal"),
margin        = c(0.5, 0.1, 0.1, 0.1),
dimPNG        = c(width = 180, height = 60)
)
plotPNGsOfMiniPlots <- function() {
plots     <- Manager$miniPlots
directory <- Manager$directory
.checkTarget(directory)
for (plot in plots) {
png(file = paste0(directory, plot, ".png"),
width  = Manager$dimPNG["width"],
height = Manager$dimPNG["height"])
do.call(paste0(".plot", plot, "MiniPlot"), list())
dev.off()
}
}
.checkTarget <- function(directory) {
dir.create(directory, showWarnings = FALSE)
}
.plotNormalMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dnorm(x, 0, 1)
.generateMiniPlot(x, y)
}
.plotlognormallMiniPlot <- function() {
xLim <- 3.5
x <- seq(0, xLim, length = 501)
y <- dlnorm(x)
.generateMiniPlot(x, y)
}
.plotStudentMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dt(x, 1)
.generateMiniPlot(x, y)
}
.plotGammaMiniPlot <- function() {
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
y <- dgamma(x, 2, 6)
.generateMiniPlot(x, y)
}
.plotDirichletMiniPlot <- function() {
require(gtools)
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
x <- x[-501] # without 1
y <- ddirichlet(cbind(x, 1-x), c(.8, .8))
.generateMiniPlot(x, y)
}
.plotBetaMiniPlot <- function() {
x <- seq(0, 1, length = 503)
x <- x[-c(1, 503)]  # without 0, 1
y <- dbeta(x, 7, 4)
.generateMiniPlot(x, y)
}
.plotBinomialMiniPlot <- function() {
x <- 0:10
y <- dbinom(x, 10, .5)
.generateMiniBarPlot(x, y)
}
.plotUniformMiniPlot <- function() {
x <- c(0, 0, 1, 1)
y <- c(0, .2, .2, 0)
.generateMiniPlot(x, y)
}
.generateMiniPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "l",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
.generateMiniBarPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "h",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
# show example
.plotNormalMiniPlot()
# generate all mini-plots
plotPNGsOfMiniPlots()
# clean up
rm("plotPNGsOfMiniPlots", "Manager")
# done
# DBAD diagram of hierarchical models
# Generate the Mini-Plots of different distributions
Manager <- list(mainLineColor = "skyblue",
mainLineWidth = 6,
baseLineWidth = 2,
directory     = "./MiniPlots/",
miniPlots     = c("Normal", "Gamma", "Beta", "Dirichlet", "Binomial", "Uniform", "Student",
"log-normal"),
margin        = c(0.5, 0.1, 0.1, 0.1),
dimPNG        = c(width = 180, height = 60)
)
plotPNGsOfMiniPlots <- function() {
plots     <- Manager$miniPlots
directory <- Manager$directory
.checkTarget(directory)
for (plot in plots) {
png(file = paste0(directory, plot, ".png"),
width  = Manager$dimPNG["width"],
height = Manager$dimPNG["height"])
do.call(paste0(".plot", plot, "MiniPlot"), list())
dev.off()
}
}
.checkTarget <- function(directory) {
dir.create(directory, showWarnings = FALSE)
}
.plotNormalMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dnorm(x, 0, 1)
.generateMiniPlot(x, y)
}
.plotlog-normallMiniPlot <- function() {
xLim <- 3.5
x <- seq(0, xLim, length = 501)
y <- dlnorm(x)
.generateMiniPlot(x, y)
}
.plotStudentMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dt(x, 1)
.generateMiniPlot(x, y)
}
.plotGammaMiniPlot <- function() {
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
y <- dgamma(x, 2, 6)
.generateMiniPlot(x, y)
}
.plotDirichletMiniPlot <- function() {
require(gtools)
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
x <- x[-501] # without 1
y <- ddirichlet(cbind(x, 1-x), c(.8, .8))
.generateMiniPlot(x, y)
}
.plotBetaMiniPlot <- function() {
x <- seq(0, 1, length = 503)
x <- x[-c(1, 503)]  # without 0, 1
y <- dbeta(x, 7, 4)
.generateMiniPlot(x, y)
}
.plotBinomialMiniPlot <- function() {
x <- 0:10
y <- dbinom(x, 10, .5)
.generateMiniBarPlot(x, y)
}
.plotUniformMiniPlot <- function() {
x <- c(0, 0, 1, 1)
y <- c(0, .2, .2, 0)
.generateMiniPlot(x, y)
}
.generateMiniPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "l",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
.generateMiniBarPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "h",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
# show example
.plotNormalMiniPlot()
# generate all mini-plots
plotPNGsOfMiniPlots()
# clean up
#rm("plotPNGsOfMiniPlots", "Manager")
# done
plot_dist("beta")
plot_dist(beta)
plot_dist()
plot_dist(dist="beta")
plot_dist(dist=beta)
plot_dist(dist)
Manager <- list(mainLineColor = "skyblue",
mainLineWidth = 6,
baseLineWidth = 2,
directory     = "./MiniPlots/",
miniPlots     = c("Normal", "Gamma", "Beta", "Dirichlet", "Binomial", "Uniform", "Student",
"log-normal"),
margin        = c(0.5, 0.1, 0.1, 0.1),
dimPNG        = c(width = 180, height = 60)
)
plotPNGsOfMiniPlots <- function() {
plots     <- Manager$miniPlots
directory <- Manager$directory
.checkTarget(directory)
for (plot in plots) {
png(file = paste0(directory, plot, ".png"),
width  = Manager$dimPNG["width"],
height = Manager$dimPNG["height"])
do.call(paste0(".plot", plot, "MiniPlot"), list())
dev.off()
}
}
.checkTarget <- function(directory) {
dir.create(directory, showWarnings = FALSE)
}
.plotNormalMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dnorm(x, 0, 1)
.generateMiniPlot(x, y)
}
.plotlog_normallMiniPlot <- function() {
xLim <- 3.5
x <- seq(0, xLim, length = 501)
y <- dlnorm(x)
.generateMiniPlot(x, y)
}
.plotStudentMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dt(x, 1)
.generateMiniPlot(x, y)
}
.plotGammaMiniPlot <- function() {
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
y <- dgamma(x, 2, 6)
.generateMiniPlot(x, y)
}
.plotDirichletMiniPlot <- function() {
require(gtools)
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
x <- x[-501] # without 1
y <- ddirichlet(cbind(x, 1-x), c(.8, .8))
.generateMiniPlot(x, y)
}
.plotBetaMiniPlot <- function() {
x <- seq(0, 1, length = 503)
x <- x[-c(1, 503)]  # without 0, 1
y <- dbeta(x, 7, 4)
.generateMiniPlot(x, y)
}
.plotBinomialMiniPlot <- function() {
x <- 0:10
y <- dbinom(x, 10, .5)
.generateMiniBarPlot(x, y)
}
.plotUniformMiniPlot <- function() {
x <- c(0, 0, 1, 1)
y <- c(0, .2, .2, 0)
.generateMiniPlot(x, y)
}
.generateMiniPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "l",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
.generateMiniBarPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "h",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
# show example
.plotNormalMiniPlot()
# generate all mini-plots
plotPNGsOfMiniPlots()
# clean up
#rm("plotPNGsOfMiniPlots", "Manager")
# done
DBAD diagram of hierarchical models
# Generate the Mini-Plots of different distributions
Manager <- list(mainLineColor = "skyblue",
mainLineWidth = 6,
baseLineWidth = 2,
directory     = "./MiniPlots/",
miniPlots     = c("Normal", "Gamma", "Beta", "Dirichlet", "Binomial", "Uniform", "Student",
"log_normal"),
margin        = c(0.5, 0.1, 0.1, 0.1),
dimPNG        = c(width = 180, height = 60)
)
plotPNGsOfMiniPlots <- function() {
plots     <- Manager$miniPlots
directory <- Manager$directory
.checkTarget(directory)
for (plot in plots) {
png(file = paste0(directory, plot, ".png"),
width  = Manager$dimPNG["width"],
height = Manager$dimPNG["height"])
do.call(paste0(".plot", plot, "MiniPlot"), list())
dev.off()
}
}
.checkTarget <- function(directory) {
dir.create(directory, showWarnings = FALSE)
}
.plotNormalMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dnorm(x, 0, 1)
.generateMiniPlot(x, y)
}
.plotlog_normallMiniPlot <- function() {
xLim <- 3.5
x <- seq(0, xLim, length = 501)
y <- dlnorm(x)
.generateMiniPlot(x, y)
}
.plotStudentMiniPlot <- function() {
xLim <- 3.5
x <- seq(-xLim, xLim, length = 501)
y <- dt(x, 1)
.generateMiniPlot(x, y)
}
.plotGammaMiniPlot <- function() {
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
y <- dgamma(x, 2, 6)
.generateMiniPlot(x, y)
}
.plotDirichletMiniPlot <- function() {
require(gtools)
x <- seq(0, 1, length = 502)
x <- x[-1]  # without 0
x <- x[-501] # without 1
y <- ddirichlet(cbind(x, 1-x), c(.8, .8))
.generateMiniPlot(x, y)
}
.plotBetaMiniPlot <- function() {
x <- seq(0, 1, length = 503)
x <- x[-c(1, 503)]  # without 0, 1
y <- dbeta(x, 7, 4)
.generateMiniPlot(x, y)
}
.plotBinomialMiniPlot <- function() {
x <- 0:10
y <- dbinom(x, 10, .5)
.generateMiniBarPlot(x, y)
}
.plotUniformMiniPlot <- function() {
x <- c(0, 0, 1, 1)
y <- c(0, .2, .2, 0)
.generateMiniPlot(x, y)
}
.generateMiniPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "l",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
.generateMiniBarPlot <- function(x, y) {
op <- par(mar = Manager$margin)
yMin  <- -0.06
ylims <- c(yMin, max(y))
plot(x, y,
type = "h",
axes = FALSE,
ylim = ylims,
col = Manager$mainLineColor,
lwd = Manager$mainLineWidth
)
abline(h = yMin, lwd = Manager$baseLineWidth, xpd = TRUE)
par(op)
}
# show example
.plotNormalMiniPlot()
# generate all mini-plots
plotPNGsOfMiniPlots()
# clean up
#rm("plotPNGsOfMiniPlots", "Manager")
# done
plot_dist(dists$log_normal)
