require(rjags)
load.module("wiener")
install.packages("mclust")
26.59+2.64+70.71+12.97+8.99+15.66+0.46+3.91+0.11+43.60+5.91+0.17+36.42+1.09+53.59+1.6+28.88+24.87+24.96+3.59
366.72+300
27-21+1
7*100
9*50
9*55
9*60
31+5
1390.20/36
1390.20+1200+500
3090/36
require(INLA)
install.packages("INLA", repos="https://inla.r-inla-download.org/R/stable")
require(INLA)
x1 <- runif(100,0,1)
f <- function(x){(x+1)/(x^2-7)}
y <- rnorm(f(x),1)
x <- runif(100,0,1)
f <- function(x){(x+1)/(x^2-7)}
y <- rnorm(f(x),1)
plot(x,y)
x <- runif(100,0,1)
f <- function(x){exp(-x)+1}
y <- rnorm(f(x),1)
plot(x,y)
f(x)
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){exp(-x)+1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,50)
f <- function(x){exp(-x)+1}
y <- rnorm(100,f(x),1)
plot(x,y)
y
f(x)
x <- runif(100,0,50)
f <- function(x){exp(x)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){exp(x)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){0.5*exp(x)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){0.5*exp(x/10)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){0.5*exp(x/2)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
data <- data.frame(x,y)
formula = y ~  alpha*exp(beta*x)-eta
result = inla(formula, family="Gaussian", data=data)
library(rjags)
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
log(1)
# Generate the Mini-Plots of different distributions
Manager <- list(mainLineColor = "skyblue",
mainLineWidth = 6,
baseLineWidth = 2,
directory     = "./MiniPlots/",
miniPlots     = c("Normal", "Gamma", "Beta", "Dirichlet", "Binomial", "Uniform", "Student",
"log_normal"),
margin        = c(0.5, 0.1, 0.1, 0.1),
dimPNG        = c(width = 180, height = 60)
)
plotPNGsOfMiniPlots <- function() {
plots     <- Manager$miniPlots
directory <- Manager$directory
.checkTarget(directory)
for (plot in plots) {
png(file = paste0(directory, plot, ".png"),
width  = Manager$dimPNG["width"],
height = Manager$dimPNG["height"])
do.call(paste0(".plot", plot, "MiniPlot"), list())
dev.off()
}
}
setwd("~/Documents/GitHub/JAGS_UNC/graphical_model_plot")
plotPNGsOfMiniPlots()
.checkTarget <- function(directory) {
dir.create(directory, showWarnings = FALSE)
}
plotPNGsOfMiniPlots()
source("plot_dist.R")
plot_dist(dists$normal, labels=expression(mu, sigma),color="red")
source("plot_dist.R")
plot_dist(dists$normal, labels=expression(mu, sigma),color="red")
plot_dist(dists$normal)
plot_dist()
plot_dist(plot_dist(dists$normal)
plot_dist(plot_dist(dists$normal))
plot_dist(plot_dist(dists$normal))
plot_dist(dists$normal, labels=expression(mu, sigma),color="red")
plot_dist(dists$normal, labels=expression(mu, sigma),color="red")
setwd("~/Documents/GitHub/JAGS_UNC/graphical_model_plot")
source("plot_dist.R")
plot_dist(dists$normal, labels=expression(mu, sigma),color="red")
plot_dist(dists$normal, labels=expression(S[i,j]^{lat}, sigma),color="red")
plot_dist(dists$normal, labels=expression(S[i|j]^{lat}, sigma),color="red")
plot_dist(dists$normal, labels=expression(S[ij]^{lat}, sigma),color="red")
plot_dist(dists$normal, labels=expression(S[ij]^{lat}, sigma[i]^2),color="red")
plot_dist(dists$normal, labels=expression(S[ij]^{lat}, sigma[i]^2),color="red",plot_dist_name=F)
source("plot_dist.R")
plot_dist(dists$normal, labels=expression(S[ij]^{lat}, sigma[i]^2),color="red",plot_dist_name=F)
plot_dist(dists$normal, labels=expression(S[ij]^{lat}, sigma[i]^2),color="red",fill="green",plot_dist_name=F)
plot_dist(dists$log_normal, labels=expression(S[ij]^{lat}, sigma[i]^2),color="red",fill="green",plot_dist_name=F)
