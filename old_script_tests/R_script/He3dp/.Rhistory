P2 <- coulomb_wave_FG(reta_f, rrho_f, lb, k=0)
pr_f <- rrho_f/(P2$val_F^2 + P2$val_G^2)
sr_f <- rrho_f*(P2$val_F*P2$val_Fp + P2$val_G*P2$val_Gp)/(P2$val_F^2 + P2$val_G^2)
gb <- 2*gf*pr_f
# CALCULATE S-FACTOR
etpe_i=exp(0.989534267*z1_i*z2_i*sqrt(mue_i/ECM))
eta_i=eta_a/(sqrt(ECM))
rho_i=rho_a*(sqrt(ECM))
P3 <- coulomb_wave_FG(eta_i, rho_i, la, k=0)
p_i <- rho_i/(P3$val_F^2 + P3$val_G^2)
s_i <- rho_i*(P3$val_F*P3$val_Fp + P3$val_G*P3$val_Gp)/(P3$val_F^2 + P3$val_G^2)
prat_i=p_i/pr_i
eta_f=eta_b/(sqrt(ECM+Q))
rho_f=rho_b*(sqrt(ECM+Q))
P4 <- coulomb_wave_FG(eta_f, rho_f, lb, k=0)
p_f <- rho_f/(P4$val_F^2 + P4$val_G^2)
s_f <- rho_f*(P4$val_F*P4$val_Fp + P4$val_G*P4$val_Gp)/(P4$val_F^2 + P4$val_G^2)
prat_f=p_f/pr_f
tapp <- (s_i-sr_i)*gi+(s_f-sr_f)*gf
s1=pek*etpe_i*omega*prat_i*prat_f*ga*gb
s2=((ER-ECM-tapp)^2)+0.25*((ga*prat_i+gb*prat_f)^2)
SF <- s1/s2
return(SF = SF)
}
######################################################################
# import jags package
library(rjags)
library(runjags)
library(R2jags)
library(mcmcplots)
require(RcppGSL)
require(ggplot2)
require(ggthemes)
source("https://raw.githubusercontent.com/johnbaums/jagstools/master/R/jagsresults.R")
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
######################################################################
## ARTIFICIAL DATA GENERATION
N <- 100
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(5e-2),log(1)))
errobsy1 <- runif(N,0.5,1)
obsy1 <- rnorm(N,Sfactor_He3dp(obsx1 ,0.35779,1.0085,0.025425),errobsy1)
M <- 150
xx <- seq(min(obsx1),max(obsx1),length.out = M)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1,   # Predictors
erry = errobsy1,
N = N, # Sample size
M = M,
xx = xx
)
######################################################################
cat('model {
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y1[i], pow(erry[i], -2))
#  y1[i] ~ dnorm(sfactorTdn(obsx[i], e1, gin, gout),pow(tau,-2))
y1[i] <- sfactor3Hedp(obsx[i], e1, gin, gout)
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp(xx[j], e1, gin, gout)
#yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
## Physical priors:
# Hyperpriors
##
#  tau ~dgamma(0.01,0.01)
e1 ~ dnorm(0,0.1)T(0,)
gin ~ dunif(0,10)
gout ~ dunif(0,10)
# e1 ~   dgamma(sh0,ra0)
# sh0 <- pow(m0,2) / pow(sd0,2)
# ra0 <- m0/pow(sd0,2)
# m0  <- 0.1
#sd0 ~  dunif(0.1,1)
# gin ~ dgamma(0.01,0.01)
#   gin ~ dgamma(sh2,ra2)
#    sh2 <- pow(m2,2) / pow(sd2,2)
#    ra2 <- m2/pow(sd2,2)
#   m2 <- 3
#   sd2 <- 1
#gout ~ dgamma(0.01,0.01)
#   gout ~ dnorm(sh,ra)
#   sh <- pow(m,2) / pow(sd,2)
#    ra <- m/pow(sd,2)
#   m  <- 0.1
#   sd <- 1
}', file={f <- tempfile()})
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
n.burnin  <- 7000
n.iter   <- 15000
n.chains <- 4
n.thin   <- 5
inits <- function () { list(e1 = runif(1,0.1,0.75),gin=runif(1,2,10),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
out <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","mux"),
model.file = f,
n.thin = n.thin,
n.chains = n.chains,
n.burnin = n.burnin,
n.iter = n.iter)
Sfactor_He3dp <- function(ECM,ER,gi,gf){
require(gsl)
# Constants
m1_i = 3.01493; m2_i = 2.01355;		# masses (amu) of t and d
m1_f = 4.00151; m2_f = 1.007277;	# masses (amu) of n and 4He
z1_i = 2; z2_i = 1;			# charges of t and d
z1_f = 2; z2_f = 1;				#charges of n and 4He
r_i = 6.0; r_f = 5.0;			# channel radii (fm)
la = 0; lb = 2;					#orbital angular momenta of d and n
Q = 18.353053;						#reaction Q-value (MeV)
hm = 20.9          # "hm" is Pierre's constant (hbar.c)^2/(2u) i.e. (197.3)^2/(2*931) = 20.9
jt = 0.5; jp=1.0; jr=1.5;			#spins of target, projectile, resonance
#   DEFINITIONS
mue_i <- (m1_i*m2_i)/(m1_i+m2_i);
mue_f <- (m1_f*m2_f)/(m1_f+m2_f);
pek <- 6.56618216e-1/mue_i;
omega <- (2*jr+1)/((2*jt+1)*(2*jp+1));
#     ----------------------------------------------------
#     PENETRABILITY AND SHIFT FUNCTION AT ER
#     ----------------------------------------------------
eta_a=.15748927*z2_i*z1_i*sqrt(mue_i)
rho_a=.218735097*r_i*sqrt(mue_i)
reta_i=eta_a/(sqrt(ER))
rrho_i=rho_a*(sqrt(ER))
P1 <- coulomb_wave_FG(reta_i, rrho_i, la, k=0)
pr_i <- rrho_i/(P1$val_F^2 + P1$val_G^2)
sr_i <- rrho_i*(P1$val_F*P1$val_Fp + P1$val_G*P1$val_Gp)/(P1$val_F^2 + P1$val_G^2)
ga <- 2*gi*pr_i
eta_b=.15748927*z2_f*z1_f*sqrt(mue_f)
rho_b=.218735097*r_f*sqrt(mue_f)
reta_f=eta_b/(sqrt(ER+Q))
rrho_f=rho_b*(sqrt(ER+Q))
P2 <- coulomb_wave_FG(reta_f, rrho_f, lb, k=0)
pr_f <- rrho_f/(P2$val_F^2 + P2$val_G^2)
sr_f <- rrho_f*(P2$val_F*P2$val_Fp + P2$val_G*P2$val_Gp)/(P2$val_F^2 + P2$val_G^2)
gb <- 2*gf*pr_f
# CALCULATE S-FACTOR
etpe_i=exp(0.989534267*z1_i*z2_i*sqrt(mue_i/ECM))
eta_i=eta_a/(sqrt(ECM))
rho_i=rho_a*(sqrt(ECM))
P3 <- coulomb_wave_FG(eta_i, rho_i, la, k=0)
p_i <- rho_i/(P3$val_F^2 + P3$val_G^2)
s_i <- rho_i*(P3$val_F*P3$val_Fp + P3$val_G*P3$val_Gp)/(P3$val_F^2 + P3$val_G^2)
prat_i=p_i/pr_i
eta_f=eta_b/(sqrt(ECM+Q))
rho_f=rho_b*(sqrt(ECM+Q))
P4 <- coulomb_wave_FG(eta_f, rho_f, lb, k=0)
p_f <- rho_f/(P4$val_F^2 + P4$val_G^2)
s_f <- rho_f*(P4$val_F*P4$val_Fp + P4$val_G*P4$val_Gp)/(P4$val_F^2 + P4$val_G^2)
prat_f=p_f/pr_f
tapp <- (s_i-sr_i)*gi+(s_f-sr_f)*gf
s1=pek*etpe_i*omega*prat_i*prat_f*ga*gb
s2=((ER-ECM-tapp)^2)+0.25*((ga*prat_i+gb*prat_f)^2)
SF <- s1/s2
return(SF = SF)
}
# He3dp analysis
#
# purpose: ARTIFICIAL DATA
#
# - 3 parameters are assumed: Er, gamma_d^2, gamma_n^2 [e1, gin, gout]
#
# - uses the function sfactorTdn_fast(obsx1[i], e1, gin, gout), which
#   is a C++ version of a Fortran code that includes Coulomb wave
#   function calculations; JAGS has been recompiled with this C++ function
#
# Fortran code tdn_plot.f is needed in this R script for plotting the
# S-factor only
#
######################################################################
# preparation: remove all variables from the work space
#rm(list=ls())
#set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
######################################################################
# import jags package
library(rjags)
library(runjags)
library(R2jags)
library(mcmcplots)
require(RcppGSL)
require(ggplot2)
require(ggthemes)
source("https://raw.githubusercontent.com/johnbaums/jagstools/master/R/jagsresults.R")
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
######################################################################
## ARTIFICIAL DATA GENERATION
N <- 100
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(5e-2),log(1)))
errobsy1 <- runif(N,0.5,1)
obsy1 <- rnorm(N,Sfactor_He3dp(obsx1 ,0.35779,1.0085,0.025425),errobsy1)
M <- 150
xx <- seq(min(obsx1),max(obsx1),length.out = M)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1,   # Predictors
erry = errobsy1,
N = N, # Sample size
M = M,
xx = xx
)
#
######################################################################
cat('model {
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y1[i], pow(erry[i], -2))
#  y1[i] ~ dnorm(sfactorTdn(obsx[i], e1, gin, gout),pow(tau,-2))
y1[i] <- sfactor3Hedp(obsx[i], e1, gin, gout)
}
# Predicted values
for (j in 1:M){
mux[j] <- sfactor3Hedp(xx[j], e1, gin, gout)
#yx[j] ~ dnorm(mux[j],pow(tau,-2))
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
## Physical priors:
# Hyperpriors
##
#  tau ~dgamma(0.01,0.01)
e1 ~ dnorm(0,0.1)T(0,)
gin ~ dunif(0,10)
gout ~ dunif(0,10)
# e1 ~   dgamma(sh0,ra0)
# sh0 <- pow(m0,2) / pow(sd0,2)
# ra0 <- m0/pow(sd0,2)
# m0  <- 0.1
#sd0 ~  dunif(0.1,1)
# gin ~ dgamma(0.01,0.01)
#   gin ~ dgamma(sh2,ra2)
#    sh2 <- pow(m2,2) / pow(sd2,2)
#    ra2 <- m2/pow(sd2,2)
#   m2 <- 3
#   sd2 <- 1
#gout ~ dgamma(0.01,0.01)
#   gout ~ dnorm(sh,ra)
#   sh <- pow(m,2) / pow(sd,2)
#    ra <- m/pow(sd,2)
#   m  <- 0.1
#   sd <- 1
}', file={f <- tempfile()})
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
n.burnin  <- 7000
n.iter   <- 15000
n.chains <- 4
n.thin   <- 5
inits <- function () { list(e1 = runif(1,0.1,0.75),gin=runif(1,2,10),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
out <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout","mux"),
model.file = f,
n.thin = n.thin,
n.chains = n.chains,
n.burnin = n.burnin,
n.iter = n.iter)
y <- jagsresults(x=out, params=c('mux'),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],lwr3=y[,"0.5%"],upr1=y[,"75%"],
upr2=y[,"97.5%"],upr3=y[,"99.5%"])
gobs <- data.frame(obsx1,obsy1,errobsy1)
ggplot(gobs,aes(x=obsx1,y=obsy1))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr3, ymax=upr3,y=NULL), fill=c("#BF9663"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.75, fill = c("#7BA696"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("#2D5873"),show.legend=FALSE) +
geom_point()+
geom_errorbar(data=gobs,mapping=aes(x=obsx1,y=obsy1,ymin=obsy1-errobsy1,ymax=obsy1+errobsy1),alpha=0.85,
colour="#dd0100",width=0.005)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="#ffffff",linetype="dashed",size=1,show.legend=FALSE)+
theme_wsj() + xlab("Energy (MeV)") + ylab("S-Factor (MeV b)") + scale_x_log10() +coord_cartesian(xlim=c(2e-3,1),ylim=c(0,35)) +
theme(legend.position = "none",
plot.background = element_rect(colour = "white", fill = "white"),
panel.background = element_rect(colour = "white", fill = "white"),
legend.key = element_rect(colour = "white", fill = "white"),
axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=15),
axis.text  = element_text(size=12),
strip.text = element_text(size=10),
strip.background = element_rect("gray85"))
setwd("~/Documents/GitHub/JAGS_UNC/R_script/He3dp")
# tdn analysis
#
# purpose: ARTIFICIAL DATA
#
# - 3 parameters are assumed: Er, gamma_d^2, gamma_n^2 [e1, gin, gout]
#
# - uses the function sfactorTdn_fast(obsx1[i], e1, gin, gout), which
#   is a C++ version of a Fortran code that includes Coulomb wave
#   function calculations; JAGS has been recompiled with this C++ function
#
# Fortran code tdn_plot.f is needed in this R script for plotting the
# S-factor only
#
# Er=0.35779 MeV
# g_i^2=1.0085 MeV
# g_f^2=0.025425 MeV
######################################################################
# preparation: remove all variables from the work space
rm(list=ls())
#set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import jags package
library(rjags)
library(runjags)
library(R2jags)
library(mcmcplots)
library(magrittr)
library(dplyr)
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
#
######################################################################
## Read DATA GENERATION
ensamble <- read.csv("ensamble.csv",header = T)  %>%
mutate(Stat=replace(Stat,Stat==0,0.1)) %>%
filter(.,dat!="Lac05")
#%>%
# mutate(.,S = ifelse(dat == "Kra87m", S*0.94,S))
N <- nrow(ensamble)
obsy <- ensamble$S    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat
#not1 <- which(obsx <= 0.1)
#not2 <- which(obsx == max(obsx))
#not3 <- which(obsy == max(obsy))
#weigth[c(not1)] <- 10
#weigth[c(not3)] <- 40
model.data <- list(obsy = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble)    # Sample size
)
#g <- data.frame(obsx1,obsy1)
#ggplot(ensamble,aes(x=E,S))+geom_point()+
#  geom_line(data=g,aes(x=obsx1,y=obsy1))
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(y[i], pow(erry[i], -2))
y[i] ~ dnorm(sfactor3Hedp(obsx[i], e1, gin, gout),pow(tau, -2))
#   y[i] <- sfactor3Hedp(obsx[i], e1, gin, gout)
}
# PRIORS
# e1, gin, gout are defined as in tdn.f (by Alain Coc):
# resonance energy, initial reduced width, final reduced
# width;
## Physical priors:
#
tau ~  dgamma(0.01,0.01)
e1 ~   dgamma(0.01,0.01)
#e1 ~   dgamma(sh0,ra0)
#sh0 <- pow(m0,2) / pow(sd0,2)
#ra0 <- m0/pow(sd0,2)
#m0  <- 0.5
#sd0 <-  1
gin ~ dunif(0.01,10)
#gin ~ dgamma(sh2,ra2)
#sh2 <- pow(m2,2) / pow(sd2,2)
#ra2 <- m2/pow(sd2,2)
#m2 ~ dunif(0.75,1.25)
#sd2 ~ dunif(0.1,0.5)
gout ~ dunif(0.01,10)
#gout ~ dnorm(sh,ra)
#sh <- pow(m,2) / pow(sd,2)
#ra <- m/pow(sd,2)
#m ~ dunif(0.01,0.03)
#sd ~ dunif(0.1,0.5)
}"
######################################################################
# n.adapt:  number of iterations in the chain for adaptation (n.adapt)
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# n.udpate: number of iterations for burnin; these will be discarded to
#           allow the chain to converge before iterations are stored
# n.iter:   number of iterations to store in the final chain as samples
#           from the posterior distribution
# n.chains: number of mcmc chains
# n.thin:   store every n.thin element [=1 keeps all samples]
inits <- function () { list(e1 = runif(1,0.15,1),gin=runif(1,0.4,4.1),gout=runif(1,0.01,1)) }
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters = c("e1", "gin", "gout"),
model = textConnection(Model),
n.thin = 10,
n.chains = 3,
n.burnin = 5000,
n.iter = 10000)
mcmcChain <- as.mcmc(Normfit)[,-1]
show(summary(mcmcChain, quantiles = c(0.025, 0.16, 0.5, 0.84, 0.975)))
library(sfsmisc)
library(plotrix)
library(emdbook)
library(magicaxis)
par(mfcol=c(1,1), mar=c(4.0,7.0,1.0,6.0), oma=c(0.5,1.0,0.5,1.0), tck=0.02,
las=1)
xLim = c(2e-3,1)
yLim = c(0,20)
######################################################################
# plot axes only...add lines...then data
plot( 1, type="n", lwd=2 , col="black" , xlim=xLim, ylim=yLim,
axes=FALSE, main="", xlab = "", ylab = "",
cex=1.5 , cex.lab=1.3, cex.axis=1.0,
cex.main=1.0, log="x")
# control distance between axis and label [line=...]
title(xlab="Energy (MeV)", line=2, cex.lab=1.3)
title(ylab="S-Factor (MeV b)", line=2, cex.lab=1.3)
# control distance tick mark labels and axis
# don't touch first number
# second number controls distance tick mark labels and axis
# don't touch third number
magaxis(mgp=c(0,0.2,0))
box()
# plot legend
##legend(0.12, 3e-7, legend=c("MA97", "SCH97", "CAS02", "BYS08"), pch=c(1, 0, 6, 5))
text(0.04, 15, labels=expression(paste(NULL^"3","He(d,p)",NULL^"4","He")), cex=1.3)
######################################################################
# PLOT BELIEVABLE S-FACTORS
# matrix samplesmat contains the samples from all n.chains with rows:
# i, a.scale,...
# !!! make sure to check the order of the parameters in the MCMC output !!!
samplesmat = as.matrix(mcmcChain)
nsamp = nrow(samplesmat)
# define grid of 201 x values on a log scale for plotting of credible solutions;
# lseq is appropriate for log scale
# xComb = lseq(xLim[1],xLim[2],length=201)
# calculate for these energies and the set of Bayesian samples for
# Er, g^2_i, g^2_f the S_factor curve using Fortran code
for ( i in round(seq(from=1,to=nsamp,length=1000)) ) {
# output samples to file for S-factor calculation; for each set of samples,
# the values for the 3 parameters are written to file on separate lines
cat(samplesmat[i,], fill=1, file="He3dp.in")
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("He3dp_pSub"))
dyn.load("He3dp_plot.so")
.Fortran("He3dp_pSub")
# read data from file
mydat <- read.table("He3dp.out", header=FALSE)
lines( mydat[,1], mydat[,2], col=adjustcolor("red", alpha=0.02))
}
######################################################################
# function for error bars;
# w is the width of perpendicular end bars on errors; set to zero
add.error.bars <- function(X,Y,dX,dY,w,col){
X0 = X
Y0 = (Y-dY)
X1 =X
Y1 = (Y+dY)
arrows(X0, Y0, X1, Y1, lwd=2, code=3, angle=90, length=w, col=col)
Y0 = Y
X0 = (X-dX)
Y1 =Y
X1 = (X+dX)
arrows(X0, Y0, X1, Y1, lwd=2, code=3, angle=90, length=w, col=col)
}
# add data - circles
points( obsx, obsy, col="black", pch=1, cex=1.2 )
add.error.bars(obsx, obsy, 0.0, erry, 0.0, col="black" )
denplot(Normfit,c("e1", "gin", "gout"),style="plain")
traplot(Normfit,c("e1", "gin", "gout"),style="plain")
show(summary(mcmcChain, quantiles = c(0.025, 0.16, 0.5, 0.84, 0.975)))
