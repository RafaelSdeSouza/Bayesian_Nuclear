require(rjags)
load.module("wiener")
install.packages("mclust")
26.59+2.64+70.71+12.97+8.99+15.66+0.46+3.91+0.11+43.60+5.91+0.17+36.42+1.09+53.59+1.6+28.88+24.87+24.96+3.59
366.72+300
27-21+1
7*100
9*50
9*55
9*60
31+5
1390.20/36
1390.20+1200+500
3090/36
require(INLA)
install.packages("INLA", repos="https://inla.r-inla-download.org/R/stable")
require(INLA)
x1 <- runif(100,0,1)
f <- function(x){(x+1)/(x^2-7)}
y <- rnorm(f(x),1)
x <- runif(100,0,1)
f <- function(x){(x+1)/(x^2-7)}
y <- rnorm(f(x),1)
plot(x,y)
x <- runif(100,0,1)
f <- function(x){exp(-x)+1}
y <- rnorm(f(x),1)
plot(x,y)
f(x)
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){exp(-x)+1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,50)
f <- function(x){exp(-x)+1}
y <- rnorm(100,f(x),1)
plot(x,y)
y
f(x)
x <- runif(100,0,50)
f <- function(x){exp(x)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){exp(x)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){0.5*exp(x)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){0.5*exp(x/10)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
x <- runif(100,0,10)
f <- function(x){0.5*exp(x/2)-1}
y <- rnorm(100,f(x),1)
plot(x,y)
data <- data.frame(x,y)
formula = y ~  alpha*exp(beta*x)-eta
result = inla(formula, family="Gaussian", data=data)
library(rjags)
## for block updating [we do not need to center predictor variables]
load.module("glm")
load.module("nuclear")
500*50
5*50
4.45*24*7
4.45*24*30
8*5
250/40
2000/100
20*50
30/400
21/400
500*0.2
500*10
0.43*30
x <- seq(0, 1, length = 21)
dbeta(x, 1, 1)
pbeta(x, 1, 1)
## Visualization, including limit cases:
pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {
if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {
eps <- 1e-10
x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)
} else {
x <- seq(0, 1, length = 1025)
}
fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))
f <- fx; f[fx == Inf] <- 1e100
matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,
main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))
abline(0,1,     col="gray", lty=3)
abline(h = 0:1, col="gray", lty=3)
legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),
col=1:3, lty=1:3, bty = "n")
invisible(cbind(x, fx))
}
pl.beta(3,1)
x <- seq(0, 1, length = 100)
dbeta(x, 1, 1)
x
dbeta(x, 1, 1)
dbeta(x, 0.5, 0.5)
y <- dbeta(x, 0.5, 0.5)
plot(x,y)
40 +20+40+55
299792458
299792458/30000000000
299792458/300000000
read.table("numRates.dat")
setwd("~/Documents/GitHub/JAGS_UNC/Num_rates")
299792458/300000000
read.table("numRates.dat")
mcmcdat <- read.table("numRates.dat",head=T)
mcmcdat [1,]
exp(seq(log(1e-3),log(10),100))
seq(log(1e-3),log(10),100)
seq(100,0,1)
exp(seq(log(1e-3),log(10),length.out =  100))
log(1e-3),log(10)
log(1e-3)
log(10)
11/7
1.5*100
