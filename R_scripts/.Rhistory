setwd("~/Documents/GitHub/JAGS_UNC/R_scripts")
sfactorTdn_fast<-function(obsx1=obsx, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[1] <- obsx1[i]
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(obsx1)){
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
errobsy1[i] <- 1
obsy1[i] <- rnorm( 1, tab1[1,2], errobsy1[i] )
}
return(obx1,oby1)
}
sfactorTdn_fast(obsx1)
sfactorTdn_fast(obsx1=1)
sfactorTdn_fast(obsx1=1)
sfactorTdn_fast(obsx1=c(1,1))
sfactorTdn_fast<-function(obsx1=obsx1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
errobsy1[i] <- 1
obsy1[i] <- rnorm( 1, tab1[1,2], errobsy1[i] )
}
return(obx1,oby1)
}
sfactorTdn_fast(obsx1=c(1,1))
errobsy1
errobsy1 <- vector()
errobsy1
sfactorTdn_fast<-function(obsx1=obsx1,errobsy1 <- vector(), e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
errobsy1[i] <- 1
obsy1[i] <- rnorm( 1, tab1[1,2], errobsy1[i] )
}
return(obx1,oby1)
}
sfactorTdn_fast<-function(obsx1=obsx1,errobsy1 = vector(), e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
errobsy1[i] <- 1
obsy1[i] <- rnorm( 1, tab1[1,2], errobsy1[i] )
}
return(obx1,oby1)
}
sfactorTdn_fast(obsx1=c(1,1))
sfactorTdn_fast<-function(x=1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y <- tab[1,2]
}
return(x,y)
}
sfactorTdn_fast()
sfactorTdn_fast<-function(x=1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y <- tab[1,2]
}
return(x,y)
}
sfactorTdn_fast()
sfactorTdn_fast<-function(x=1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y <- tab1[1,2]
}
return(x,y)
}
sfactorTdn_fast()
sfactorTdn_fast<-function(x=1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y <- tab1[1,2]
}
return(list(x=x,y=y))
}
sfactorTdn_fast()
sfactorTdn_fast(x=(1:5))
sfactorTdn_fast<-function(x=1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
y <- vector
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(list(x=x,y=y))
}
sfactorTdn_fast(x=(1:5))
sfactorTdn_fast<-function(x=1, e1=0.0912, gin=2.93, gout=0.0794){
res <- vector()
y <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(list(x=x,y=y))
}
sfactorTdn_fast(x=(1:5))
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
N <- 50
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
sfactorTdn_fast(x=obsx1)
ff<-sfactorTdn_fast(x=obsx1)
plot(ff)
plot(ff,log="x")
0.3*4
4-1.2
N <- 50
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
obsy1 <- sfactorTdn_fast(obx1,0.0912,2.93,0.0794)
N <- 50
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
obsy1 <- sfactorTdn_fast(obsx1,0.0912,2.93,0.0794)
obsy1
N <- 50
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
obsy1 <- sfactorTdn_fast(obsx1,0.0912,2.93,0.0794)$y
obsy1
obsx1
plot(obsx1,obsy1)
chi2 <- function(x=1, e1, gin, gout){
sum((obsy1 -sfactorTdn_fast(obsx1,e1, gin, gout))^2)
}
fit<-mle(chi2, start = list(e1 = 1,gin= 0,gout = 10),method = "SANN")
confint(fit)
install.packages("stats4")
chi2
fit<-mle(chi2, start = list(e1 = 1,gin= 0,gout = 10),method = "SANN")
confint(fit)
require(stats4)
chi2 <- function(x=1, e1, gin, gout){
sum((obsy1 -sfactorTdn_fast(obsx1,e1, gin, gout))^2)
}
fit<-mle(chi2, start = list(e1 = 1,gin= 0,gout = 10),method = "SANN")
confint(fit)
chi2 <- function(x, e1, gin, gout){
sum((obsy1 -sfactorTdn_fast(obsx1,e1, gin, gout))^2)
}
fit<-mle(chi2, start = list(e1 = 1,gin= 0,gout = 10),method = "SANN")
confint(fit)
sfactorTdn_fast(x=obsx1,e1, gin, gout)
chi2 <- function(x, e1, gin, gout){
sum((obsy1 -sfactorTdn_fast(x=obsx1,e1, gin, gout))^2)
}
fit<-mle(chi2, start = list(e1 = 1,gin= 0,gout = 10),method = "SANN")
confint(fit)
obsy1
sfactorTdn_fast(x=obsx1,1, 1, 5)
sfactorTdn_fast<-function(x=x, e1=e1, gin=gin, gout=gout){
res <- vector()
y <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(y)
}
chi2 <- function(x, e1, gin, gout){
sum((obsy1 -sfactorTdn_fast(x=obsx1,e1, gin, gout))^2)
}
fit<-mle(chi2, start = list(e1 = 1,gin= 0,gout = 10),method = "SANN")
fit<-mle(chi2, start = list(e1 = 1,gin= 5,gout = 0),method = "SANN")
fit
sfactorTdn_fast<-function(x=x, e1=e1, gin=gin, gout=gout){
res <- vector()
y <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
#  write.table(res, file="tdn_AD.in", quote=TRUE,
#              row.names=FALSE, col.names=FALSE)
tdn_AD.in <- res
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(y)
}
sfactorTdn_fast(x=obsx1,1, 1, 5)
sfactorTdn_fast<-function(x=x, e1=e1, gin=gin, gout=gout){
res <- vector()
y <- vector()
tdn_AD.in <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
#  write.table(res, file="tdn_AD.in", quote=TRUE,
#              row.names=FALSE, col.names=FALSE)
tdn_AD.in <- res
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(y)
}
sfactorTdn_fast(x=obsx1,1, 1, 5)
res
.Fortran("tdn_AD_Sub")
sfactorTdn_fast<-function(x=x, e1=e1, gin=gin, gout=gout){
res <- vector()
y <- vector()
tdn_AD.in <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
#  write.table(res, file="tdn_AD.in", quote=TRUE,
#              row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub",tdn_AD.in=res)
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(y)
}
sfactorTdn_fast(x=obsx1,1, 1, 5)
res
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoin
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794
res
res[1,]
sfactorTdn_fast<-function(x=x, e1=e1, gin=gin, gout=gout){
res <- vector()
y <- vector()
tdn_AD.in <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(y)
}
sfactorTdn_fast(x=obsx1,1, 1, 5)
sfactorTdn_fast(x=obsx1,1, 1, 3)
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
obsy1 <- sfactorTdn_fast(obsx1,e1=0.0912,gin=2.93,gout=0.0794)
plot(obsx1,obsy1)
obsx1
.Fortran("tdn_AD_Sub",tdn_AD.in=res[x[1],res[,2:4]])
.Fortran("tdn_AD_Sub",tdn_AD.in=res[obsx1[1],res[,2:4]])
res[,2:4]
res
res[2:4]
.Fortran("tdn_AD_Sub",tdn_AD.in=res[obsx1[1],res[2:4]])
.Fortran("tdn_AD_Sub",tdn_AD.in=c(res[obsx1[1],res[2:4]]))
c(res[obsx1[1],res[2:4]])
c(res[obsx1[1]],res[2:4]])
c(res[obsx1[1]],res[2:4])
res[obsx1[1]]
obsx1[1]
obsx1[2]
.Fortran("tdn_AD_Sub",tdn_AD.in=c(obsx1[1],res[2:4]]))
.Fortran("tdn_AD_Sub",tdn_AD.in=c(obsx1[1],res[2:4]))
.Fortran("tdn_AD_Sub",tdn_AD.in=c(obsx1[2],res[2:4]))
install.packages("bbmle")
require(bbmle)
require(stats4)
require(bbmle)
sfactorTdn_fast<-function(x=x, e1=e1, gin=gin, gout=gout){
res <- vector()
y <- vector()
tdn_AD.in <- vector()
res[2] <- e1   # resonance energy
res[3] <-  gin    # reduced width incoming
res[4] <- gout   # reduced width outgoing
for (i in 1:length(x)){
res[1] <- x[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y[i] <- tab1[1,2]
}
return(y)
}
N <- 50
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
obsy1 <- sfactorTdn_fast(obsx1,e1=0.0912,gin=2.93,gout=0.0794)
plot(obsx1,obsy1)
chi2 <- function(x, e1, gin, gout){
sum((obsy1 -sfactorTdn_fast(x=obsx1,e1, gin, gout))^2)
}
fit<-mle2(chi2, start = list(e1 = 1,gin= 5,gout = 0.1))
confint(fit)
it
fit
