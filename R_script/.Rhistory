obsy1 <- vector()
errobsy1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
errobsy1[i] <- 1
obsy1[i] <- rnorm( 1, tab1[1,2], errobsy1[i] )
}
setwd("~/Documents/GitHub/JAGS_UNC/R_script")
N <- 50
obsx1 <- log(runif(N, exp(0.0), exp(0.2)))
res <- vector()
obsy1 <- vector()
errobsy1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
errobsy1[i] <- 1
obsy1[i] <- rnorm( 1, tab1[1,2], errobsy1[i] )
}
plot(obsx1,Sfactor(obsx1,0.0912,2.93,0.0794),log="x",type="l",ylim=c(0,35))
points(obsx1,obsy1)
plot(obsx1,Sfactor(obsx1,0.0912,2.93,0.0794),log="x",type="l",ylim=c(0,35))
plot(obsx1,Sfactor(obsx1,0.0912,2.93,0.0794),log="x",ylim=c(0,35))
points(obsx1,obsy1)
N <- 500
x1 <- log(runif(N, exp(0.0), exp(0.2)))
res <- vector()
obsy1 <- vector()
errobsy1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- obsx1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
N <- 500
x1 <- log(runif(N, exp(0.0), exp(0.2)))
res <- vector()
y1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(obsx1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35))
points(x1,y1)
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35))
points(x1,y1)
for (i in 1:length(x1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
# Test
x <- seq(1e-3,1,length.out = 500)
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35))
points(x1,y1)
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),col="red",cex=0.5)
points(x1,y1)
lines(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),col="red",cex=0.5)
points(x1,y1)
x1
x1
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),col="red",cex=0.5)
lines(x1,y1,col="green")
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green")
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),col="red",cex=0.5)
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),cex=0.5)
# Test
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),
xlim=c(1e-3,1),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),xlim=c(1e-3,1),cex=0.5)
N <- 100
x1 <- log(runif(N, exp(0.0), exp(1)))
res <- vector()
y1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(x1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
# Test
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),
xlim=c(1e-3,1),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),xlim=c(1e-3,1),cex=0.5)
N <- 300
x1 <- log(runif(N, exp(0.0), exp(1)))
res <- vector()
y1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(x1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
# Test
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),
xlim=c(1e-3,1),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),xlim=c(1e-3,1),cex=0.5)
x1
N <- 300
x1 <- log(runif(N, exp(1e-3), exp(1)))
res <- vector()
y1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(x1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
# Test
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),
xlim=c(1e-3,1),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),xlim=c(1e-3,1),cex=0.5)
x1
x1 <- exp(runif(N, log(1e-3), log(1)))
x1
N <- 300
x1 <- exp(runif(N, log(1e-3), log(1)))
res <- vector()
y1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(x1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
# Test
plot(x1,Sfactor(x1,0.0912,2.93,0.0794),log="x",ylim=c(0,35),
xlim=c(1e-3,1),col="red",cex=0.5)
par(new=TRUE)
plot(x1,y1,col="green",log="x",ylim=c(0,35),xlim=c(1e-3,1),cex=0.5)
hist((Sfactor(x1,0.0912,2.93,0.0794)-y1)/y1)
hist((Sfactor(x1,0.0912,2.93,0.0794)-y1))
require(nimble)
install.packages("nimble")
dZIP <- nimbleFunction(
run = function(ECM = double(),ER= double(),gi= double(),gf= double(), log = logical(0, default = 0)) {
returnType(double())
S <- Sfactor(ECM,ER,gi,gf)
return(S)
})
require(nimble)
dZIP <- nimbleFunction(
run = function(ECM = double(),ER= double(),gi= double(),gf= double(), log = logical(0, default = 0)) {
returnType(double())
S <- Sfactor(ECM,ER,gi,gf)
return(S)
})
dZIP(1,0.09,3,0.2)
Sfactor(1,0.09,3,0.2)
Sfactor_nimble <- nimbleFunction(
run = function(ECM = double(),ER= double(),gi= double(),gf= double(), log = logical(0, default = 0)) {
returnType(double())
S <- Sfactor(ECM,ER,gi,gf)
return(S)
})
N <- 30
x1 <- exp(runif(N, log(1e-3), log(1)))
res <- vector()
y1 <- vector()
# Barker values:
# Er  = 0.0912 MeV
# g^2_in = 2.93 MeV         ! reduced width of deuteron
# g^2_out = 0.0794 MeV      ! reduced width of neutron
res[2] <- 0.0912   # resonance energy
res[3] <-  2.93    # reduced width incoming
res[4] <- 0.0794   # reduced width outgoing
for (i in 1:length(x1)){
res[1] <- x1[i]
write.table(res, file="tdn_AD.in", quote=TRUE,
row.names=FALSE, col.names=FALSE)
# Load the fortran code needed to calculate S-factor curve
if(!is.loaded("tdn_AD_Sub"))
dyn.load("tdn_AD.so")
.Fortran("tdn_AD_Sub")
tab1 <- read.table("tdn_AD.out", header=FALSE)
y1[i] <- tab1[1,2]
}
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
## define the model
code <- nimbleCode({
tau ~ dgamma(0.01, 0.01)
ER ~ dgamma(0.01, 0.01)
gi ~ dgamma(0.01, 0.01)
gf ~ dgamma(0.01, 0.01)
for(i in 1:N) {
y[i] ~ dnorm(Sfactor_nimble(ECM,ER,gi,gf),tau)
}
})
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
## define the model
code <- nimbleCode({
tau ~ dgamma(0.01, 0.01)
ER ~ dgamma(0.01, 0.01)
gi ~ dgamma(0.01, 0.01)
gf ~ dgamma(0.01, 0.01)
for(i in 1:N) {
y[i] ~ dnorm(Sfactor_nimble(x,ER,gi,gf),tau)
}
})
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
x1
## define the model
code <- nimbleCode({
tau ~ dgamma(0.01, 0.01)
ER ~ dgamma(0.01, 0.01)
gi ~ dgamma(0.01, 0.01)
gf ~ dgamma(0.01, 0.01)
for(i in 1:N) {
y[i] ~ dnorm(Sfactor_nimble(x[i],ER,gi,gf),tau)
}
})
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
## define the model
code <- nimbleCode({
sd ~ dunif(0, 100)
ER ~ dgamma(0.01, 0.01)
gi ~ dgamma(0.01, 0.01)
gf ~ dgamma(0.01, 0.01)
for(i in 1:N) {
y[i] ~ dnorm(Sfactor_nimble(x[i],ER,gi,gf),sd)
}
})
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
Sfactor_nimble(1,0.09,3,0.07)
## define the model
code <- nimbleCode({
sd ~ dunif(0, 100)
ER ~ dunif(0.01, 1)
gi ~ dgamma(0.01, 0.01)
gf ~ dgamma(0.01, 0.01)
for(i in 1:N) {
y[i] ~ dnorm(Sfactor_nimble(x[i],ER,gi,gf),sd)
}
})
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
## define the model
code <- nimbleCode({
sd ~ dunif(0, 100)
ER ~ dunif(0.01, 10)
gi ~ dunif(0.01, 10)
gf ~ dunif(0.01, 10)
for(i in 1:N) {
y[i] ~ dnorm(Sfactor_nimble(x[i],ER,gi,gf),sd)
}
})
constants <- list(N = 30)
data <- list(x=x1,y=y1)
Rmodel <- nimbleModel(code=code, constants=constants, data=data, check = FALSE)
constants <- list(N = 30)
data <- list(x=x1,y=y1)
inits <- list(ER = 0.4, gi = 3, gf = 0.4)
Rmodel <- nimbleModel(code=code, constants=constants, inits=inits,data=data, check = FALSE)
Rmcmc <- buildMCMC(Rmodel)
Rmcmc
CpumpMCMC <- compileNimble(Rmcmc, project = Rmodel)
pump <- nimbleModel(code=code, constants=constants, inits=inits,data=data, check = FALSE,
name = 'pump')
pumpMCMC <- buildMCMC(pump)
Cpump <- compileNimble(pump)
CpumpMCMC <- compileNimble(pumpMCMC, project = pump)
help(nimbleRcall)
help(nimbleRcall)
Sfactor_nimble <- nimbleRcall(function(ECM = double(),ER= double(),gi= double(),gf= double()){}, Rfun = 'Sfactor',
returnType = double(), envir = .GlobalEnv)
Sfactor_nimble(1,0.09,3,0.07)
Sfactor_nimble <- nimbleRcall(function(ECM = double(),ER= double(),gi= double(),gf= double()){}, Rfun = 'Sfactor',
returnType = double(), envir = .GlobalEnv)
Sfactor_nimble(1,0.09,3,0.07)
add2 <- function(x) {
x + 2
}
Radd2 <- nimbleRcall(function(x = double(1)){}, Rfun = 'add2',
returnType = double(1), envir = .GlobalEnv)
Radd2(1)
Radd2(x)
Radd2(x[1])
Radd2(x[1:3])
pumpMCMC$run(10)
require(nimble,type="source")
install.packages("nimble",type="source")
install.packages("nimble", type = "source")
install.packages("nimble", type = "source")
install.packages("nimble", type = "source")
install.packages("nimble", type = "source")
install.packages("nimble", type = "source")
library(LaplacesDemon)
install.packages("LaplacesDemon")
library(LaplacesDemon)
##############################  Demon Data  ###############################
data(demonsnacks)
J <- 2
y <- log(demonsnacks$Calories)
X <- cbind(1, as.matrix(log(demonsnacks[,10]+1)))
X[,2] <- CenterScale(X[,2])
#########################  Data List Preparation  #########################
mon.names <- "LP"
parm.names <- as.parm.names(list(beta=rep(0,J), sigma=0))
pos.beta <- grep("beta", parm.names)
pos.sigma <- grep("sigma", parm.names)
PGF <- function(Data) {
beta <- rnorm(Data$J)
sigma <- runif(1)
return(c(beta, sigma))
}
MyData <- list(J=J, PGF=PGF, X=X, mon.names=mon.names,
parm.names=parm.names, pos.beta=pos.beta, pos.sigma=pos.sigma, y=y)
##########################  Model Specification  ##########################
Model <- function(parm, Data)
{
### Parameters
beta <- parm[Data$pos.beta]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log-Prior
beta.prior <- sum(dnormv(beta, 0, 1000, log=TRUE))
sigma.prior <- dhalfcauchy(sigma, 25, log=TRUE)
### Log-Likelihood
mu <- tcrossprod(Data$X, t(beta))
LL <- sum(dnorm(Data$y, mu, sigma, log=TRUE))
### Log-Posterior
LP <- LL + beta.prior + sigma.prior
BayesianBootstrap 19
Modelout <- list(LP=LP, Dev=-2*LL, Monitor=LP,
yhat=rnorm(length(mu), mu, sigma), parm=parm)
return(Modelout)
}
############################  Initial Values  #############################
Initial.Values <- GIV(Model, MyData, PGF=TRUE)
########################  Laplace Approximation  ##########################
Fit1 <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000)
Fit1
##########################  Model Specification  ##########################
Model <- function(parm, Data)
{
### Parameters
beta <- parm[Data$pos.beta]
sigma <- interval(parm[Data$pos.sigma], 1e-100, Inf)
parm[Data$pos.sigma] <- sigma
### Log-Prior
beta.prior <- sum(dnormv(beta, 0, 1000, log=TRUE))
sigma.prior <- dhalfcauchy(sigma, 25, log=TRUE)
### Log-Likelihood
mu <- tcrossprod(Data$X, t(beta))
LL <- sum(dnorm(Data$y, mu, sigma, log=TRUE))
### Log-Posterior
LP <- LL + beta.prior + sigma.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor=LP,
yhat=rnorm(length(mu), mu, sigma), parm=parm)
return(Modelout)
}
############################  Initial Values  #############################
Initial.Values <- GIV(Model, MyData, PGF=TRUE)
########################  Laplace Approximation  ##########################
Fit1 <- LaplaceApproximation(Model, Initial.Values, Data=MyData,
Iterations=10000)
Fit1
pos.beta
MyData
beta <- parm[Data$pos.beta]
Data$pos.beta
Initial.Values
MyData
N <- 10000
J <- 10 #Number of predictors, including the intercept
X <- matrix(1,N,J)
for (j in 2:J) {X[,j] <- rnorm(N,runif(1,-3,3),runif(1,0.1,1))}
beta.orig <- runif(J,-3,3)
e <- rnorm(N,0,0.1)
y <- as.vector(tcrossprod(beta.orig, X) + e)
mon.names <- c("LP","sigma")
parm.names <- as.parm.names(list(beta=rep(0,J), log.sigma=0))
PGF <- function(Data) return(c(rnormv(Data$J,0,0.01),
log(rhalfcauchy(1,1))))
MyData <- list(J=J, PGF=PGF, N=N, mon.names=mon.names,
parm.names=parm.names) #Notice that X and y are not included here
MyData
beta=rep(0,J)
beta
as.parm.names(list(beta=rep(0,J), log.sigma=0))
mon.names
