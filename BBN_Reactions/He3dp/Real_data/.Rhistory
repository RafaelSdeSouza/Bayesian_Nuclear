rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(1))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
compileNimble(Rmodel)
printErrors()
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(1,150),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(1,150))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
compileNimble(Rmodel)
printErrors()
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(1,150),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(1))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
compileNimble(Rmodel)
printErrors()
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(1,150),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
compileNimble(Rmodel)
printErrors()
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(1,150),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(1,150))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
compileNimble(Rmodel)
printErrors()
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(0),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
compileNimble(Rmodel)
mcmc.output <- nimbleMCMC(Rmodel, data = model.data, inits = inits,
monitors = c("e1", "gin", "gout","sd"), thin = 10,
niter = 20000, nburnin = 1000, nchains = 3,
summary = TRUE, WAIC = TRUE)
Rmodel$calculate()
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
samplesList <- runMCMC(mcmc_CL, niter = 50, nchains = 3, inits = inits)
Rmodel <- compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
samplesList <- runMCMC(mcmc_CL, niter = 50, nchains = 3, inits = inits)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL)
samplesList <- runMCMC(CRmodel, niter = 50, nchains = 3, inits = inits)
model.data
sfactorHe3dpNimble(0.01,1,1,1,5,5,0)
# 3Hedp analysis
#
# purpose: Real  DATA
#
# - 5 parameters are assumed: Er, gamma_d^2, gamma_n^2 [e1, gin, gout]
#
# - uses the function sfactorHe3dp(obsx1[i], e1, gin, gout), which
#   is a C++ version of a Fortran code that includes Coulomb wave
#   function calculations; JAGS has been recompiled with this C++ function
#
######################################################################
# preparation: remove all variables from the work space
#rm(list=ls())
set.seed(123)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);library(wesanderson)
library(dplyr);require(gsl);library(latex2exp)
require(nimble)
######################################################################
## ARTIFICIAL DATA GENERATION
N <- 150
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 0.5
obsy1 <- rnorm(N, sfactorHe3dp(obsx1,0.35779,1.0085,0.025425,6,5,0),sd=sd)
plot(obsx1,obsy1,log= "x")
M <- 150
xx <- seq(min(obsx1),max(obsx1),length.out = M)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1
)
#
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(0),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL)
Rmodel <- ompileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL)
Rmodel <- compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL)
samplesList <- runMCMC(CRmodel, niter = 50, nchains = 3, inits = inits)
samplesList <- runMCMC(CRmodel, niter = 50, nchains = 3)
CRmodel
samplesList <- runMCMC(CRmodel, niter = 50, nchains = 3)
inits
mcmcConf
inits
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(1),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
Rmodel <- compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL)
samplesList <- runMCMC(CRmodel, niter = 50, nchains = 3)
sfactorHe3dpNimble <- nimbleRcall(function(obsx1 = double(0),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0),sd)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(model,data = model.data, inits = inits)
Rmodel <- compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL)
samplesList <- runMCMC(CRmodel, niter = 50, nchains = 3)
obsx1
obsy1
obsx1
inits
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 50, nchain = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
CRmodel
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(mu[i],sd)
mu[i] = sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 50, nchain = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(mu[i],sd)
mu[i] <- sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 50, nchain = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
sfactorHe3dpNimble <- nimbleRcall(function(obsx = double(0),
e1 = double(0),gin = double(0),
gout = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(mu[i],sd)
mu[i] <- sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 50, nchain = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
sfactorHe3dpNimble <- nimbleRcall(function(ecm = double(0),
e0 = double(0),gi = double(0),
gf = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(mu[i],sd)
mu[i] <- sfactorHe3dpNimble(obsx[i], e1, gin, gout,6,5,0)
}
sd ~  dunif(1e-3,10)
e1 ~  dunif(1e-3,10)
gin ~  dunif(1e-3,10)
gout ~ dunif(1e-3,10)
})
inits <- list(e1 = runif(1,0.01,1),gout=0.01,gin=runif(1,0.01,1),
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("e1", "gin", "gout","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 50, nchain = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
mcmcChain
mcmcChain <- runMCMC(CRmodel ,niter = 5000, nchain = 3, nburnin = 1000,
setSeed=15,samplesAsCodaMCMC = TRUE)
mcmcChain
1/5
1/4
1/16
require(ggmcmc)
gin ~  dunif(1e-3,10)
S <- ggs(mcmcChain)
ggs_histogram(S)
ggs_traceplot(S)
mcmcChain <- runMCMC(CRmodel ,niter = 10000, nchain = 3, nburnin = 5000,
setSeed=15,samplesAsCodaMCMC = TRUE)
S <- ggs(mcmcChain)
ggs_histogram(S)
ggs_traceplot(S)
mcmcChain
mcmcChain[,4]
sqrt(mcmcChain[,4])
sqrt(mcmcChain[,4]$chain1)
1/sqrt(mcmcChain[,4]$chain1)
1/(mcmcChain[,4]$chain1)
1/(mcmcChain[,4]$chain1)^2
1/(mcmcChain[,4]$chain1)
1/(mcmcChain[,4]$chain2)
mean(1/(mcmcChain[,4]$chain2))
mean(1/(mcmcChain[,4]$chain1))
mean(1/(mcmcChain[,4]$chain3))
mean(1/(mcmcChain[,4]$chain3^2))
mean(1/sqrt(mcmcChain[,4]$chain3))
mean(1/sqrt(mcmcChain[,4]$chain2))
mean(1/sqrt(mcmcChain[,4]$chain1))
1/sqrt(5)
obsy1
N <- 150
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 0.5
obsy1 <- rnorm(N, 3 + 2*obsx1,sd=sd)
plot(obsx1,obsy1,log= "x")
M <- 150
xx <- seq(min(obsx1),max(obsx1),length.out = M)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1
)
#
model <- nimbleCode({
for (i in 1:150) {
obsy[i] ~ dnorm(mu[i],sd)
mu[i] <- a + b*obsx[i]
}
sd ~  dunif(1e-3,10)
a ~  dunif(1e-3,10)
b ~  dunif(1e-3,10)
})
inits <- list(a = runif(1,0.01,1),b=1,
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("a", "b","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 10000, nchain = 3, nburnin = 5000,
setSeed=15,samplesAsCodaMCMC = TRUE)
N <- 500
#obsx1 <- runif(N,0,0.7)
obsx1 <- exp(runif(N,log(1e-3),log(10)))
sd <- 0.5
obsy1 <- rnorm(N, 3 + 2*obsx1,sd=sd)
plot(obsx1,obsy1)
N <- 500
#obsx1 <- runif(N,0,0.7)
obsx1 <- runif(N,0,10)
sd <- 0.5
obsy1 <- rnorm(N, 3 + 2*obsx1,sd=sd)
plot(obsx1,obsy1)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1
)
#
N <- 500
#obsx1 <- runif(N,0,0.7)
obsx1 <- runif(N,0,10)
sd <- 2
obsy1 <- rnorm(N, 3 + 2*obsx1,sd=sd)
plot(obsx1,obsy1)
model.data <- list(obsy = obsy1,    # Response variable
obsx =  obsx1
)
#
model <- nimbleCode({
for (i in 1:500) {
obsy[i] ~ dnorm(mu[i],sd)
mu[i] <- a + b*obsx[i]
}
sd ~  dunif(1e-3,10)
a ~  dunif(1e-3,10)
b ~  dunif(1e-3,10)
})
inits <- list(a = runif(1,0.01,1),b=1,
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("a", "b","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 10000, nchain = 3, nburnin = 5000,
setSeed=15,samplesAsCodaMCMC = TRUE)
S <- ggs(mcmcChain)
ggs_histogram(S)
ggs_traceplot(S)
1/sqrt(0.25)
model <- nimbleCode({
for (i in 1:500) {
obsy[i] ~ dnorm(mu[i],1/sqrt(sd))
mu[i] <- a + b*obsx[i]
}
sd ~  dunif(1e-3,10)
a ~  dunif(1e-3,10)
b ~  dunif(1e-3,10)
})
inits <- list(a = runif(1,0.01,1),b=1,
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("a", "b","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 10000, nchain = 3, nburnin = 5000,
setSeed=15,samplesAsCodaMCMC = TRUE)
S <- ggs(mcmcChain)
ggs_histogram(S)
ggs_traceplot(S)
model <- nimbleCode({
for (i in 1:500) {
obsy[i] ~ dnorm(mu[i],tau)
mu[i] <- a + b*obsx[i]
}
tau ~  dunif(1e-3,10)
a ~  dunif(1e-3,10)
b ~  dunif(1e-3,10)
sd <- 1/sqrt(tau)
})
inits <- list(a = runif(1,0.01,1),b=1,
sd = runif(1,0.01,1))
Rmodel <- nimbleModel(code = model,data = model.data, inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel, monitors = c("a", "b","sd"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 10000, nchain = 3, nburnin = 5000,
setSeed=15,samplesAsCodaMCMC = TRUE)
S <- ggs(mcmcChain)
ggs_histogram(S)
ggs_traceplot(S)
