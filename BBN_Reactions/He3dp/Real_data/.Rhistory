inits = inits,check = FALSE)
compileNimble(Rmodel)
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 200, nchains = 3, nburnin = 100,
setSeed=15,samplesAsCodaMCMC = TRUE)
mcmcChain <- runMCMC(CRmodel ,niter = 20, nchains = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
S <- ggs(mcmcChain)
ggs_traceplot(S)
require(ggmcmc)
S <- ggs(mcmcChain)
ggs_traceplot(S)
mcmcChain
ggs_traceplot(S,family=c("ad","ap"))
S <- ggs(mcmcChain[,c("gd2", "gp2","ue_ev","tau", "ad","ap")])
ggs_traceplot(S)
mcmcChain[,c("gd2", "gp2","ue_ev","tau", "ad","ap")]
mcmcChain
mcmcChain[,c("E0")]
mcmcChain[,c("E0","gd2")]
mcmcChain[,c("E0","gd2","gp2")]
mcmcChain[,c("E0","gd2","gp2","ue_ev")]
mcmcChain[,c("E0","gd2","gp2","ue_ev1")]
mcmcChain[,c("E0","gd2","gp2","ue_ev[1")]
mcmcChain[,c("E0","gd2","gp2","ue_ev[1]")]
mcmcChain[,c("E0","gd2","gp2","ue_ev[1]","ue_ev[2]")]
S <- ggs(mcmcChain[,c("E0","gd2","gp2","ue_ev[1]","ue_ev[2]")])
ggs_traceplot(S)
mcmcChain <- runMCMC(CRmodel ,niter = 3000, nchains = 3, nburnin = 1000,
setSeed=15,samplesAsCodaMCMC = TRUE)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel,nimbleOptions(oldConjugacyChecking = FALSE,seNewConfigureMCMC = TRUE))
CRmodel <- compileNimble(mcmc_CL,project = Rmodel,nimbleOptions(oldConjugacyChecking = FALSE,useNewConfigureMCMC = TRUE))
CRmodel <- compileNimble(mcmc_CL,project = Rmodel,nimbleOptions(useNewConfigureMCMC = TRUE))
CRmodel <- compileNimble(mcmc_CL,project = Rmodel,nimbleOptions(useNewConfigureMCMC = TRUE))
model <- nimbleCode({
#   for (i in 1:N) {
obsy[i:N] ~ dnorm(y[i:N],pow(erry[i:N], -2))
y[i:N] ~ dnorm(scale[re[i:N]]*sfactorHe3dpNimble(obsx[i:N], E0,  gd2, gp2, ad, ap, ue[ik[i:N]]), pow(tau, -2))
#}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(0.1,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
})
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
N
sfactorHe3dpNimble <- nimbleRcall(function(ecm = double(0),
e0 = double(0),gi = double(0),
gf = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dp',
returnType = double(0))
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(y[i],pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(0.1,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
})
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"),autoBlock = TRUE)
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(y[i],pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(0.1,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
})
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"),autoBlock = TRUE)
mcmc_CL <- buildMCMC(mcmcConf)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel,nimbleOptions(useNewConfigureMCMC = TRUE))
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
library(compiler)
sfactorHe3dpc <- cmpfun(sfactorHe3dp)
sfactorHe3dpNimble <- nimbleRcall(function(ecm = double(0),
e0 = double(0),gi = double(0),
gf = double(0),ri = double(0),
rf = double(0),ue = double(0)){},
Rfun = 'sfactorHe3dpc',
returnType = double(0))
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(y[i],pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(0.1,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
})
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel ,niter = 3000, nchains = 3, nburnin = 1000,
setSeed=15,samplesAsCodaMCMC = TRUE)
mcmcChain <- runMCMC(mcmc_CL ,niter = 3000, nchains = 3, nburnin = 1000,
setSeed=15,samplesAsCodaMCMC = TRUE)
model <- nimbleCode({
#   for (i in 1:N) {
obsy[] ~ dnorm(y[],pow(erry[], -2))
y[] ~ dnorm(scale[re[]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[]]), pow(tau, -2))
#}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(0.1,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
})
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE,
dimensions = list(y = N, obsy = N, re = N,erry = N,ik = N))
re
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(y[i],pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(0.1,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
ue_ev[1] <-1e6*ue[1]
ue_ev[2] <-1e6*ue[2]
})
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
initsFunction <- function()  list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = initsFunction,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue_ev","tau", "ad","ap",
"mux0","mux1","mux2","scale"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(mcmc_CL ,niter = 30, nchains = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
mcmcChain <- runMCMC(CRmodel,niter = 30, nchains = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
mcmcChain
S <- ggs(mcmcChain[,c("E0","gd2","gp2","ue_ev[1]","ue_ev[2]")])
ggs_traceplot(S)
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(y[i],pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(100,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
#  ue_ev[1] <-1e6*ue[1]
#  ue_ev[2] <-1e6*ue[2]
})
initsFunction <- function()  list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(0.001,0.001),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = initsFunction,check = FALSE)
compileNimble(Rmodel)
initsFunction <- function()  list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(100,100),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = initsFunction,check = FALSE)
compileNimble(Rmodel)
initsFunction <- function()  list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(100,100),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = initsFunction,check = FALSE)
Nik
model <- nimbleCode({
for (i in 1:N) {
obsy[i] ~ dnorm(y[i],pow(erry[i], -2))
y[i] ~ dnorm(scale[re[i]]*sfactorHe3dpNimble(obsx[i], E0,  gd2, gp2, ad, ap, ue[ik[i]]), pow(tau, -2))
}
# Predicted values
for (j in 1:M){
# Bare...
mux0[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,0)
# No inverse Kinematics
mux1[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[1])
yx1[j] ~ dnorm(mux1[j],pow(tau,-2))
# With inverse Kinematics
mux2[j] <- sfactorHe3dpNimble(xx[j], E0,  gd2, gp2, ad, ap,ue[2])
yx2[j] ~ dnorm(mux1[j],pow(tau,-2))
}
for (k in 1:Nre){
scale[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
}
for (z in 1:Nik){
ue[z] ~ T(dnorm(0,pow(100,-2)),0,Inf)
}
# PRIORS
# Case I
tau ~  dgamma(0.1,0.1)
E0  ~  dgamma(0.1,0.1)
gd2 ~  dgamma(0.1,0.1)
gp2 ~  dgamma(0.1,0.1)
ad  ~ T(dnorm(3.5,pow(0.5,-2)),0,Inf)
ap  ~ T(dnorm(5.5,pow(1,-2)),0,Inf)
#  ue_ev[1] <-1e6*ue[1]
#  ue_ev[2] <-1e6*ue[2]
})
initsFunction <- function()  list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(100,100),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = initsFunction,check = FALSE)
initsFunction
initsFunction <- function(){list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(100,100),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
}
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = initsFunction,check = FALSE)
inits <- list(E0  = runif(1,0.01,1),gd2=0.01,gp2=runif(1,0.01,1),
ad = 5, ap = 5, ue = c(100,100),scale = runif(7,0.9,1.1),
tau  = runif(1,0.01,1),
y =  sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),
yx1 = sfactorHe3dp(xx,1,1,2,6,5,0.001),
yx2 = sfactorHe3dp(xx,2,6,5,0.001))
Rmodel <- nimbleModel(code = model,data = model.data,constants = samplerConst,
inits = inits,check = FALSE)
compileNimble(Rmodel)
mcmcConf <- configureMCMC(Rmodel,
monitors = c("E0","gd2", "gp2","ue","tau", "ad","ap",
"mux0","mux1","mux2","scale"))
mcmc_CL <- buildMCMC(mcmcConf)
CRmodel <- compileNimble(mcmc_CL,project = Rmodel)
mcmcChain <- runMCMC(CRmodel,niter = 30, nchains = 3, nburnin = 10,
setSeed=15,samplesAsCodaMCMC = TRUE)
S <- ggs(mcmcChain[,c("E0","gd2","gp2","ue[1]","ue[2]")])
ggs_traceplot(S)
mcmcChain <- runMCMC(CRmodel,niter = 30000, nchains = 3, nburnin = 10000,samplesAsCodaMCMC = TRUE)
library(microbenchmark)
microbenchmark(sfactorHe3dpNimble(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dpc(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dp(obsx,0.35,1,0.02,6,5,0))
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(sfactorHe3dpNimble(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dpc(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dp(obsx,0.35,1,0.02,6,5,0))
rnorm(10)
res <- microbenchmark(sfactorHe3dpNimble(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dpc(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),rnorm(100),times=1000L)
ggplot2::autoplot(res)
res
res <- microbenchmark(sfactorHe3dpNimble(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dpc(obsx,0.35,1,0.02,6,5,0),
sfactorHe3dp(obsx,0.35,1,0.02,6,5,0),times=1000L)
res
