logsigma5 <- log(1.055)  # factor uncertainty is 1.055, i.e., 5.5% for Cos00
y.norm6 ~ dlnorm(logmu6, pow(logsigma6, -2))
logmu6 <- log(1.0)       # median of factor uncertainty is 1.0
logsigma6 <- log(1.030)  # factor uncertainty is 1.030, i.e., 3.0% for Ali01_a
y.norm7 ~ dlnorm(logmu7, pow(logsigma7, -2))
logmu7 <- log(1.0)       # median of factor uncertainty is 1.0
logsigma7 <- log(1.030)  # factor uncertainty is 1.030, i.e., 3.0% for Ali01_b
}', file={f <- tempfile()})
# dunif(min=0, max=1): gives uniform density
# pow(a,b) = a^b
######################################################################
# n.adapt:  number of iterations in the chain for adaptation
#           [JAGS will use to choose the sampler and to assure optimum
#           mixing of the MCMC chain; will be discarded]
# update(): performs the burn-in on each chain by running the MCMC for
#           n.burn iterations without saving any of the posterior samples
# coda.samples(): runs each MCMC chain for the number of iterations
#           specified by n.iter, but it does not save every iteration;
#           instead, it saves only ever nth iteration, where n is given
#           by thin
# n.chains: number of mcmc chains
n.chains = 3
n.adapt = 1500
n.burn = 1500
n.iter = 1500
thin = 1
# "f": is the model specification from above;
# data = list(...): define all data elements that are referenced in the
# JAGS model
ourmodel <- jags.model(f, data = list(          ## jags wants all data in a list
'obsx1' = obsx1, 'obsy1' = obsy1, 'errobsy1' = errobsy1,
'obsx2' = obsx2, 'obsy2' = obsy2, 'errobsy2' = errobsy2,
'obsx3' = obsx3, 'obsy3' = obsy3, 'errobsy3' = errobsy3,
'obsx4' = obsx4, 'obsy4' = obsy4, 'errobsy4' = errobsy4,
'obsx5' = obsx5, 'obsy5' = obsy5, 'errobsy5' = errobsy5,
'obsx6' = obsx6, 'obsy6' = obsy6, 'errobsy6' = errobsy6,
'obsx7' = obsx7, 'obsy7' = obsy7, 'errobsy7' = errobsy7
),
#                inits = list(e0 = 0.236, ga = 0.36, gb = 0.035, ra = 3.25, rb = 5.77,
#                             uea=2e-4, ueb=1e-4),
n.chains = n.chains, n.adapt = n.adapt)
update(ourmodel, n.burn)
# variable.names are variables to be recorded in output file of samples
mcmcChain <- coda.samples(ourmodel,
variable.names=c(
'e0', 'ga', 'gb',
'ra', 'rb',
'uea', 'ueb',
'y.norm1', 'y.norm2', 'y.norm3', 'y.norm4', 'y.norm5',
'y.norm6', 'y.norm7',
'yscat1',  'yscat2',   'yscat3',  'yscat4', 'yscat5',
'yscat6', 'yscat7'
),
n.iter=n.iter, thin=thin)
# <---- rjags
######################################################################
######################################################################
# OUTPUT RESULTS TO SCREEN
######################################################################
cat("", "\n")    # output empty line
# sample size adjusted for autocorrelation
effectiveChainLength = effectiveSize(mcmcChain)
show(effectiveChainLength)
cat("", "\n")    # output empty line
cat("SUMMARY:", "\n")
show(summary(mcmcChain, quantiles = c(0.025, 0.16, 0.5, 0.84, 0.975)))
cat("-------------------------------------------", "\n")
######################################################################
# OUTPUT RESULTS TO FILES
######################################################################
# !!! make sure to check the order of the parameters in the MCMC output !!!
samplesmat = as.matrix(mcmcChain)
nsamp = nrow(samplesmat)
# output all results
capture.output(print(samplesmat, print.gap=3), file="MCMCresults3Hedp")
# select first six colums [e0, ga, gb, ra, rb] from matrix
samplesmat2 <- samplesmat[,1:5]
# output samples to file for rate calculation
capture.output( print(samplesmat2[sample(nrow(samplesmat2), size=1000,
replace=FALSE),],
print.gap=3), file="MCMCsamples3Hedp" )
######################################################################
# PLOTTING
######################################################################
## set margins in order south, west, north, east
## oma is "outer margin" of entire figure
## mar is the margin of individual panels, which sets margin sizes in
##    order bottom, left, top, right
## mfcol=c(nrows, ncols) fills in the matrix by columns
## tck sets tick mark lengths; negative value makes them point
##    outward
## las=1 shows tick mark labels in horizontal orientation
## mgp sets axis label locations relative to edge of inner plot window;
##   first value represents label locations [xlab, ylab], the second
##   the tick mark labels, the third the tick marks; default is c(3,1,0)
## cex controls symbol size
## cex.yy controls label sizes
## pch is the symbol id
## xlim describes plot limits
## main adds a title
library(sfsmisc)
library(plotrix)
library(emdbook)
library(magicaxis)
######################################################################
# TRACES AND DENSITIES
######################################################################
pdf("MCMC_3Hedp_a.pdf")
plot(mcmcChain)
dev.off()
######################################################################
# S-FACTOR FIT [red] + DATA [black & white]
######################################################################
pdf("MCMC_3Hedp_b.pdf",width=10,height=5,onefile=F)
par(mfcol=c(1,1), mar=c(4.0,7.0,1.0,6.0), oma=c(0.5,1.0,0.5,1.0), tck=0.02,
las=1)
xLim = c(3e-3,0.9)
yLim = c(0,20)
# plot axes only...add lines...then data
plot( 1, type="n", lwd=2 , col="black" , xlim=xLim, ylim=yLim,
axes=FALSE, main="", xlab = "", ylab = "", log="x", yaxs='i', xaxs='i' )
# control distance between axis and label [line=...]
title(xlab="Energy (MeV)", line=2.5, cex.lab=2.0)
title(ylab="S-Factor (MeV b)", line=2.5, cex.lab=2.0)
# control distance tick mark labels and axis; don't touch first number
# in mgp; second number controls distance tick mark labels and axis
# don't touch third number
# cex.axis controls size of tick mark labels
magaxis(mgp=c(0,0.4,0), cex.axis=1.3)
box()
# plot legend
legend(0.4, 19.0, legend=c("Gei99", "Kra87", "Moe80", "Zhi77", "Cos00",
"Ali01a", "Ali01b"), pch=c(1, 5, 0, 6, 3, 2, 4),
col=c("gray40", "gray40", "gray40", "gray40", "gray40", "gray40",
"gray40"))
# plot reaction label
text(0.015, 17, labels=expression(paste(NULL^"3","He(d,p)",NULL^"4","He")), cex=2.0)
text(0.0045, 5, labels=expression(paste("bare")), cex=1.3)
# plot credible S-factors:
# calculate for these energies and the set of Bayesian samples for
# Er, g^2_i, g^2_f the S_factor curve using R code above
# define grid of energy values in MeV on a log scale for plotting of credible
# solutions; lseq is appropriate for log scale
x1 = lseq(0.001, 0.5, length=300)
# ECM, E0, ga, gb, ra, rb, uea, ueb
# 500 samples are randomly selected for plotting of S-factor including
# electron screening
for ( i in round(runif(500, min=1, max=nsamp)) ) {
lines(x1,SfacHedp(x1,samplesmat[i,1],samplesmat[i,2],samplesmat[i,3],
samplesmat[i,4],samplesmat[i,5],samplesmat[i,6]),
col=adjustcolor("royalblue1", alpha=0.02), lw=0.1)
}
for ( i in round(runif(500, min=1, max=nsamp)) ) {
lines(x1,SfacHedp(x1,samplesmat[i,1],samplesmat[i,2],samplesmat[i,3],
samplesmat[i,4],samplesmat[i,5], samplesmat[i,7]),
col=adjustcolor("black", alpha=0.02), lw=0.1)
}
for ( i in round(runif(500, min=1, max=nsamp)) ) {
lines(x1,SfacHedp(x1,samplesmat[i,1],samplesmat[i,2],samplesmat[i,3],
samplesmat[i,4],samplesmat[i,5], 0.0),
col=adjustcolor("red", alpha=0.02), lw=0.1)
}
# add data
points( obsx1, obsy1, col="gray40", pch=1, cex=1.2 )
add.error.bars(obsx1, obsy1, 0.0, errobsy1, 0.0, col="gray40" )
points( obsx2, obsy2, col="gray40", pch=5, cex=1.0 )
add.error.bars(obsx2, obsy2, 0.0, errobsy2, 0.0, col="gray40" )
points( obsx3, obsy3, col="gray40", pch=0, cex=1.0 )
add.error.bars(obsx3, obsy3, 0.0, errobsy3, 0.0, col="gray40" )
points( obsx4, obsy4, col="gray40", pch=6, cex=1.0 )
add.error.bars(obsx4, obsy4, 0.0, errobsy4, 0.0, col="gray40" )
points( obsx5, obsy5, col="gray40", pch=3, cex=1.0 )
add.error.bars(obsx5, obsy5, 0.0, errobsy5, 0.0, col="gray40" )
points( obsx6, obsy6, col="gray40", pch=2, cex=1.0 )
add.error.bars(obsx6, obsy6, 0.0, errobsy6, 0.0, col="gray40" )
points( obsx7, obsy7, col="gray40", pch=4, cex=1.0 )
add.error.bars(obsx7, obsy7, 0.0, errobsy7, 0.0, col="gray40" )
dev.off()
######################################################################
# S-FACTOR DATA [color] ONLY
######################################################################
pdf("MCMC_3Hedp_c.pdf",width=10,height=5,onefile=F)
par(mfcol=c(1,1), mar=c(4.0,7.0,1.0,6.0), oma=c(0.5,1.0,0.5,1.0), tck=0.02,
las=1)
xLim = c(3e-3,0.9)
yLim = c(0,20)
# plot axes only...add lines...then data
plot( 1, type="n", lwd=2 , col="black" , xlim=xLim, ylim=yLim,
axes=FALSE, main="", xlab = "", ylab = "", log="x", yaxs='i', xaxs='i' )
# control distance between axis and label [line=...]
title(xlab="Energy (MeV)", line=2.5, cex.lab=2.0)
title(ylab="S-Factor (MeV b)", line=2.5, cex.lab=2.0)
# control distance tick mark labels and axis; don't touch first number
# in mgp; second number controls distance tick mark labels and axis
# don't touch third number
# cex.axis controls size of tick mark labels
magaxis(mgp=c(0,0.4,0), cex.axis=1.3)
box()
# plot legend
legend(0.4, 19.0, legend=c("Gei99", "Kra87", "Moe80", "Zhi77", "Cos00",
"Ali01a", "Ali01b"), pch=c(1, 5, 0, 6, 3, 2, 4),
col=c("red", "black", "green4", "blue", "purple", "orange",
"gray40"))
# plot reaction label
text(0.015, 17, labels=expression(paste(NULL^"3","He(d,p)",NULL^"4","He")), cex=2.0)
# add data
points( obsx1, obsy1, col="red", pch=1, cex=1.2 )
add.error.bars(obsx1, obsy1, 0.0, errobsy1, 0.0, col="red" )
points( obsx2, obsy2, col="black", pch=5, cex=1.0 )
add.error.bars(obsx2, obsy2, 0.0, errobsy2, 0.0, col="black" )
points( obsx3, obsy3, col="green4", pch=0, cex=1.0 )
add.error.bars(obsx3, obsy3, 0.0, errobsy3, 0.0, col="green4" )
points( obsx4, obsy4, col="blue", pch=6, cex=1.0 )
add.error.bars(obsx4, obsy4, 0.0, errobsy4, 0.0, col="blue" )
points( obsx5, obsy5, col="purple", pch=3, cex=1.0 )
add.error.bars(obsx5, obsy5, 0.0, errobsy5, 0.0, col="purple" )
points( obsx6, obsy6, col="orange", pch=2, cex=1.0 )
add.error.bars(obsx6, obsy6, 0.0, errobsy6, 0.0, col="orange" )
points( obsx7, obsy7, col="gray40", pch=4, cex=1.0 )
add.error.bars(obsx7, obsy7, 0.0, errobsy7, 0.0, col="gray40" )
dev.off()
######################################################################
# POSTERIORS OF RESONANCE ENERGY AND REDUCED WIDTHS
######################################################################
# first determine plot ranges
## mar is the margin of individual panels, which sets margin sizes in
##    order bottom, left, top, right
pdf("MCMC_3Hedp_d.pdf",width=10,height=5,onefile=F)
par(mfcol=c(1,3), mar=c(5.5,6.5,4.5,0), oma=c(2.0,5.0,0.5,2.0), tck=0.02,
las=1)
# plot eigenenergy in first panel
plot(density(samplesmat[,1]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(ylab="Probability density", line=4.5, cex.lab=2.3)
title(xlab=expression(paste(E [0], " (MeV)")), line=4.0, cex.lab=2.3)
polygon(density(samplesmat[,1]), col=adjustcolor("blue", alpha=0.5))
# order: E0, ga, gb ,ra, rb
# plot deuteron reduced width
plot(density(samplesmat[,2]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(gamma [d]^2, " (MeV)")), line=4.0, cex.lab=2.3,
yaxs='i', xaxs='i')
polygon(density(samplesmat[,2]), col=adjustcolor("blue", alpha=0.5))
# plot proton reduced width
plot(density(samplesmat[,3]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(gamma [p]^2, " (MeV)")), line=4.0, cex.lab=2.3,
yaxs='i', xaxs='i')
polygon(density(samplesmat[,3]), col=adjustcolor("blue", alpha=0.5))
dev.off()
######################################################################
# POSTERIORS OF CHANNEL RADII
######################################################################
# first determine plot ranges
## mar is the margin of individual panels, which sets margin sizes in
##    order bottom, left, top, right
pdf("MCMC_3Hedp_e.pdf",width=10,height=5,onefile=F)
par(mfcol=c(1,2), mar=c(5.5,6.5,4.5,0), oma=c(2.0,5.0,0.5,2.0), tck=0.02,
las=1)
# plot a_d in first panel
plot(density(samplesmat[,4]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(ylab="Probability density", line=4.5, cex.lab=2.3)
title(xlab=expression(paste(a [d], " (fm)")), line=4.0, cex.lab=2.3)
polygon(density(samplesmat[,4]), col=adjustcolor("blue", alpha=0.5))
# plot a_p in second panel
plot(density(samplesmat[,5]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(a [p], " (fm)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
polygon(density(samplesmat[,5]), col=adjustcolor("blue", alpha=0.5))
dev.off()
######################################################################
# POSTERIOR OF ELECTRON SCREENING POTENTIAL
######################################################################
pdf("MCMC_3Hedp_f.pdf",width=10, height=6, onefile=F)
par(mfcol=c(1,2), mar=c(5.5,6.5,4.5,0), oma=c(2.0,5.0,0.5,2.0), tck=0.02,
las=1)
xLim = c(0, 2000)
dens_a <- density(1e6*samplesmat[,6])
a98_a <- quantile(1e6*samplesmat[,6], prob = 0.975)
dens_b <- density(1e6*samplesmat[,7])
a98_b <- quantile(1e6*samplesmat[,7], prob = 0.975)
# plot density in first panel
# cex.axis controls tick mark label size
# xaxs and yaxs = "i" plots with exact limits
## plot 1:
plot(dens_a, main="", xlab="", ylab="",
cex.axis=1.5, yaxs='i', xaxs='i', xlim=xLim)
#text(400, 0.02, labels=expression(paste(NULL^"3","He(d,p)",NULL^"4","He")),
#   cex=2.0)
legend("topleft", inset=.01,
c(expression(paste(NULL^"3","He(d,p)",NULL^"4","He"))),
horiz=FALSE, cex=1.5, box.lty=0)
title(ylab="Probability density", line=4.5, cex.lab=2.3)
title(xlab=expression(paste("U"[e], " (eV)")), line=4.0, cex.lab=2.3)
polygon(dens_a, col=adjustcolor("blue", alpha=0.5))
## plot 2:
plot(dens_b, main="", xlab="", ylab="",
cex.axis=1.5, yaxs='i', xaxs='i', xlim=xLim)
legend("topleft", inset=.01,
c(expression(paste("d(",NULL^"3","He,p)",NULL^"4","He"))),
horiz=FALSE, cex=1.5, box.lty=0)
title(xlab=expression(paste("U"[e], " (eV)")), line=4.0, cex.lab=2.3)
polygon(dens_b, col=adjustcolor("blue", alpha=0.5))
dev.off()
######################################################################
# POSTERIOR OF S-FACTOR AT GIVEN ENERGY
######################################################################
# prediction: plot posterior predictive distribution at a given x by
# marginalization over all parameters; we will use all credible
# lines, calculate y-values for all samples at given x; this set of
# y-values represents our predicted posterior at x
# plot density at xchoice
pdf("MCMC_3Hedp_g.pdf")
par(mfcol=c(1,1), mar=c(5.5,6.5,4.5,0), oma=c(2.0,5.0,0.5,2.0), tck=0.02,
las=1)
# define x value for which we would like to predict y
xchoice <- 0.04
# declare vector with y values
fitvec <- vector(mode = "numeric", length = nsamp)
# calculate y values from all samples at given x value;
# bare S-factor
for(i in 1:nsamp) fitvec[i] <- SfacHedp(xchoice, samplesmat[i,1], samplesmat[i,2],
samplesmat[i,3], samplesmat[i,4],samplesmat[i,5], 0.0)
# define quantiles of y at xchoice
a16 <- quantile(fitvec, prob = 0.16)
a50 <- quantile(fitvec, prob = 0.50)
a84 <- quantile(fitvec, prob = 0.84)
# output
cat("", "\n")
cat("PREDICTION FOR x.choice=", xchoice, "\n")
cat("  16%        50%        84%", "\n")
cat(quantile(fitvec, probs = 0.16), quantile(fitvec, probs = 0.50),
quantile(fitvec, probs = 0.84), "\n")
plot(density(fitvec), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.0, cex.axis=1.3, yaxs='i', xaxs='i')
polygon(density(fitvec), col=adjustcolor("blue", alpha=0.5))
title(xlab=expression(paste(S [0], "  (MeV b)")), line=4.0, cex.lab=2.0)
title(ylab="Probability density", line=4.5, cex.lab=2.0)
dev.off()
######################################################################
# DENSITIES OF S-FACTOR NORMALIZATION FACTORS
######################################################################
pdf("MCMC_3Hedp_h.pdf",width=10, height=6, onefile=F)
par(mfcol=c(1,1), mar=c(5.0,7.0,1.0,6.0), oma=c(0.5,1.0,0.5,1.0), tck=0.02,
las=1)
xLim = c(0.90, 1.1)
# plot density in first panel
plot(density(samplesmat[,10]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5,
xlim=xLim, yaxs='i', xaxs='i')
title(ylab="Probability density", line=3.5, cex.lab=2.3)
title(xlab="S-factor normalization", line=4.0, cex.lab=2.3)
# order: "red", "black", "green4", "blue", "purple", "orange", "gray40"
polygon(density(samplesmat[,8]),
col=adjustcolor("red", alpha=0.5))
polygon(density(samplesmat[,9]),
col=adjustcolor("black", alpha=0.5))
polygon(density(samplesmat[,10]),
col=adjustcolor("green4", alpha=0.5))
polygon(density(samplesmat[,11]),
col=adjustcolor("blue", alpha=0.5))
polygon(density(samplesmat[,12]),
col=adjustcolor("purple", alpha=0.5))
polygon(density(samplesmat[,13]),
col=adjustcolor("orange", alpha=0.5))
polygon(density(samplesmat[,14]),
col=adjustcolor("yellow", alpha=0.5))
legend("topleft", inset=.01,
c("Gei99", "Kra87", "Moe80", "Zhi77", "Cos00", "Ali01a", "Ali01b"),
fill=adjustcolor(c("red", "black", "green4", "blue", "purple", "orange",
"yellow"), alpha=0.5),
horiz=FALSE, cex=1.5, box.lty=0)
dev.off()
######################################################################
# POSTERIOR EXTRINSIC S-FACTOR SCATTER
######################################################################
pdf("MCMC_3Hedp_i.pdf",width=10, height=6, onefile=F)
## mar is the margin of individual panels, which sets margin sizes in
##    order bottom, left, top, right
par(mfcol=c(2,4), mar=c(5.5,4.0,1.0,2.0), oma=c(0.5,7.0,0.5,1.0), tck=0.02,
las=1)
# plot #1
plot(density(samplesmat[,15]), main="", xlab="", ylab="", xlim=c(0,1.0),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3)
title(ylab="density", line=3.0, cex.lab=2.3)
legend("topright", legend="Gei99", pch=NA, cex=1.5)
polygon(density(samplesmat[,15]), col=adjustcolor("blue", alpha=0.5))
# plot #2
plot(density(samplesmat[,16]), main="", xlab="", ylab="", xlim=c(0,1.2),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
title(ylab="Probability", line=3.0, cex.lab=2.3)
legend("topright", legend="Kra87", pch=NA, cex=1.5)
polygon(density(samplesmat[,16]), col=adjustcolor("blue", alpha=0.5))
# plot #3
plot(density(samplesmat[,17]), main="", xlab="", ylab="", xlim=c(0,0.4),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
legend("topright", legend="Moe80", pch=NA, cex=1.5)
polygon(density(samplesmat[,17]), col=adjustcolor("blue", alpha=0.5))
# plot #4
plot(density(samplesmat[,18]), main="", xlab="", ylab="", xlim=c(0,1.2),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
legend("topright", legend="Zhi77", pch=NA, cex=1.5)
polygon(density(samplesmat[,18]), col=adjustcolor("blue", alpha=0.5))
# plot #5
plot(density(samplesmat[,19]), main="", xlab="", ylab="", xlim=c(0,2.0),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
legend("topright", legend="Cos00", pch=NA, cex=1.5)
polygon(density(samplesmat[,19]), col=adjustcolor("blue", alpha=0.5))
# plot #6
plot(density(samplesmat[,20]), main="", xlab="", ylab="", xlim=c(0,2.0),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
legend("topright", legend="Ali01a", pch=NA, cex=1.5)
polygon(density(samplesmat[,20]), col=adjustcolor("blue", alpha=0.5))
# plot #7
plot(density(samplesmat[,21]), main="", xlab="", ylab="", xlim=c(0,2.0),
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(sigma [S], " (MeVb)")), line=4.0, cex.lab=2.3, yaxs='i', xaxs='i')
legend("topright", legend="Ali01b", pch=NA, cex=1.5)
polygon(density(samplesmat[,21]), col=adjustcolor("blue", alpha=0.5))
dev.off()
######################################################################
# CORRELATION PLOT
######################################################################
pdf("MCMC_3Hedp_j.pdf", width=6, height=6, onefile=F)
pairs(~e0+ga+gb+ra+rb, col=adjustcolor("red", alpha=0.5),
data=samplesmat2[sample(nrow(samplesmat2), size=1000, replace=FALSE),],
main="Simple Scatterplot Matrix")
dev.off()
pairs(~e0+ga+gb+ra+rb, col=adjustcolor("red", alpha=0.5),
data=samplesmat2[sample(nrow(samplesmat2), size=1000, replace=FALSE),],
main="Simple Scatterplot Matrix")
par(mfcol=c(1,1), mar=c(4.0,7.0,1.0,6.0), oma=c(0.5,1.0,0.5,1.0), tck=0.02,
las=1)
xLim = c(3e-3,0.9)
yLim = c(0,20)
# plot axes only...add lines...then data
plot( 1, type="n", lwd=2 , col="black" , xlim=xLim, ylim=yLim,
axes=FALSE, main="", xlab = "", ylab = "", log="x", yaxs='i', xaxs='i' )
# control distance between axis and label [line=...]
title(xlab="Energy (MeV)", line=2.5, cex.lab=2.0)
title(ylab="S-Factor (MeV b)", line=2.5, cex.lab=2.0)
# control distance tick mark labels and axis; don't touch first number
# in mgp; second number controls distance tick mark labels and axis
# don't touch third number
# cex.axis controls size of tick mark labels
magaxis(mgp=c(0,0.4,0), cex.axis=1.3)
box()
# plot legend
legend(0.4, 19.0, legend=c("Gei99", "Kra87", "Moe80", "Zhi77", "Cos00",
"Ali01a", "Ali01b"), pch=c(1, 5, 0, 6, 3, 2, 4),
col=c("red", "black", "green4", "blue", "purple", "orange",
"gray40"))
# plot reaction label
text(0.015, 17, labels=expression(paste(NULL^"3","He(d,p)",NULL^"4","He")), cex=2.0)
# add data
points( obsx1, obsy1, col="red", pch=1, cex=1.2 )
add.error.bars(obsx1, obsy1, 0.0, errobsy1, 0.0, col="red" )
points( obsx2, obsy2, col="black", pch=5, cex=1.0 )
add.error.bars(obsx2, obsy2, 0.0, errobsy2, 0.0, col="black" )
points( obsx3, obsy3, col="green4", pch=0, cex=1.0 )
add.error.bars(obsx3, obsy3, 0.0, errobsy3, 0.0, col="green4" )
points( obsx4, obsy4, col="blue", pch=6, cex=1.0 )
add.error.bars(obsx4, obsy4, 0.0, errobsy4, 0.0, col="blue" )
points( obsx5, obsy5, col="purple", pch=3, cex=1.0 )
add.error.bars(obsx5, obsy5, 0.0, errobsy5, 0.0, col="purple" )
points( obsx6, obsy6, col="orange", pch=2, cex=1.0 )
add.error.bars(obsx6, obsy6, 0.0, errobsy6, 0.0, col="orange" )
points( obsx7, obsy7, col="gray40", pch=4, cex=1.0 )
add.error.bars(obsx7, obsy7, 0.0, errobsy7, 0.0, col="gray40" )
par(mfcol=c(1,3), mar=c(5.5,6.5,4.5,0), oma=c(2.0,5.0,0.5,2.0), tck=0.02,
las=1)
# plot eigenenergy in first panel
plot(density(samplesmat[,1]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(ylab="Probability density", line=4.5, cex.lab=2.3)
title(xlab=expression(paste(E [0], " (MeV)")), line=4.0, cex.lab=2.3)
polygon(density(samplesmat[,1]), col=adjustcolor("blue", alpha=0.5))
# order: E0, ga, gb ,ra, rb
# plot deuteron reduced width
plot(density(samplesmat[,2]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(gamma [d]^2, " (MeV)")), line=4.0, cex.lab=2.3,
yaxs='i', xaxs='i')
polygon(density(samplesmat[,2]), col=adjustcolor("blue", alpha=0.5))
# plot proton reduced width
plot(density(samplesmat[,3]), main="", xlab="", ylab="",
cex=10.5, cex.main=10.0, cex.lab=2.3, cex.axis=1.5, yaxs='i', xaxs='i'
)
title(xlab=expression(paste(gamma [p]^2, " (MeV)")), line=4.0, cex.lab=2.3,
yaxs='i', xaxs='i')
polygon(density(samplesmat[,3]), col=adjustcolor("blue", alpha=0.5))
