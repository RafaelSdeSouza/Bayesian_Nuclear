setwd("~/Documents/GitHub/BayesBBN/Dpg")
# Dpg analysis
#
# preparation: remove all variables from the work space
rm(list=ls())
set.seed(27)
######################################################################
# data input
# format: obsx, obsy, errobsy; the latter are the individual statistical
# errors of each datum [i]
#
# energy is in units of MeV, and the S-factor in MeVb;
######################################################################
# import packages
require(RcppGSL);require(ggplot2);require(ggthemes)
require(nuclear);library(magrittr);
library(dplyr);require(lessR);library(BayesianTools)
require(msm);require(mcmcplots);require(ggmcmc);
require(ggridges);require(plyr);require(MASS);
require(R2jags);require(scales)
source("..//auxiliar_functions/jagsresults.R")
source("..//auxiliar_functions/pair_wise_plot.R")
######################################################################
# DATA INPUT
######################################################################
# data input; the input is of the form: obsx, obsy, errobsy, where the
# latter is the individual statistical error of each datum [i];
# energy is in MeV, S-factor in MeVb
ensamble <- read.csv("ensamble_DPG.csv",header = T)
re <- as.numeric(ensamble$lab)
Nre <- length(unique(ensamble$lab))
N <- nrow(ensamble)
obsy <- ensamble$S*1e6    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat*1e6
set <- ensamble$lab
syst = c(0.08617770,0.07696104,0.08617770,0.04401689)
M <- 500
xx <- seq(0.9*min(obsx),1.1*max(obsx),length.out = M)
theory <- read.table("Marcucci2005.dat", header = FALSE)
interp.x <- theory[,1]
interp.y <- theory[,2]
model.data <- list(obsy = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble), # Sample size
syst = syst,
Nre = Nre,
re = re,
M = M,
xx = xx,
interp.x = interp.x,
interp.y = interp.y
)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(ya[i], pow(erry[i], -2))
ya[i] ~ dnorm(y.norm[re[i]]*mut[i],pow(tau[re[i]], -2))
mut[i] <- a.scale*interp.lin(obsx[i], interp.x, interp.y)
}
# Predicted values
for (j in 1:M){
# Bare...
mux[j] <- a.scale*interp.lin(xx[j], interp.x, interp.y)
}
### scaling factor of theory
a.scale ~ dt(0, pow(5,-2), 1)T(0,)
for (k in 1:Nre){
y.norm[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
tau[k] ~  dt(mt, pow(5,-2), 1)T(0,)
}
mt ~  dt(0, pow(5,-2), 1)T(0,)
}"
inits <- function(){list(a.scale = runif(1,0.5,1.5),y.norm=runif(4,0.5,1.5),tau=runif(4,0.01,10)) }
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("a.scale", "y.norm","tau","mux"),
model.file  = textConnection(Model),
n.thin = 5,
n.chains = 3,
n.burnin = 1000,
n.iter = 2000)
Normfit
source("..//auxiliar_functions/jagsresults.R")
source("..//auxiliar_functions/pair_wise_plot.R")
jagsresults(x=Normfit , params=c('tau',"a.scale", "y.norm"),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
######################################################################
# DATA INPUT
######################################################################
# data input; the input is of the form: obsx, obsy, errobsy, where the
# latter is the individual statistical error of each datum [i];
# energy is in MeV, S-factor in MeVb
ensamble <- read.csv("ensamble_DPG.csv",header = T)
re <- as.numeric(ensamble$lab)
Nre <- length(unique(ensamble$lab))
N <- nrow(ensamble)
obsy <- ensamble$S*1e6    # Response variable
obsx <-  ensamble$E   # Predictors
erry <- ensamble$Stat*1e6
set <- ensamble$lab
syst = c(0.08617770,0.07696104,0.08617770,0.04401689)
M <- 500
xx <- seq(0.9*min(obsx),1.1*max(obsx),length.out = M)
theory <- read.table("Marcucci2005.dat", header = FALSE)
interp.x <- theory[,1]
interp.y <- theory[,2]
model.data <- list(obsy = obsy,    # Response variable
obsx =  obsx,   # Predictors
erry = erry,
N = nrow(ensamble), # Sample size
syst = syst,
Nre = Nre,
re = re,
M = M,
xx = xx,
interp.x = interp.x,
interp.y = interp.y
)
######################################################################
Model <- "model{
# LIKELIHOOD
for (i in 1:N) {
obsy[i] ~ dnorm(ya[i], pow(erry[i], -2))
ya[i] ~ dnorm(y.norm[re[i]]*mut[i],pow(tau[re[i]], -2))
mut[i] <- a.scale*interp.lin(obsx[i], interp.x, interp.y)
}
# Predicted values
for (j in 1:M){
# Bare...
mux[j] <- a.scale*interp.lin(xx[j], interp.x, interp.y)
}
### scaling factor of theory
a.scale ~ dnorm(0, pow(5,-2))T(0,)
for (k in 1:Nre){
y.norm[k] ~ dlnorm(log(1.0),pow(syst[k],-2))
tau[k] ~  dnorm(mt, pow(5,-2))T(0,)
}
mt ~  dnorm(0, pow(5,-2))T(0,)
}"
inits <- function(){list(a.scale = runif(1,0.5,1.5),y.norm=runif(4,0.5,1.5),tau=runif(4,0.01,10)) }
# JAGS model with R2Jags;
Normfit <- jags(data = model.data,
inits = inits,
parameters.to.save  = c("a.scale", "y.norm","tau","mux"),
model.file  = textConnection(Model),
n.thin = 5,
n.chains = 3,
n.burnin = 1000,
n.iter = 2000)
jagsresults(x=Normfit , params=c('tau',"a.scale", "y.norm"),probs=c(0.005,0.025, 0.25, 0.5, 0.75, 0.975,0.995))
setwd("~/Documents/GitHub/JAGS_UNC/BBN_Reactions/Tdn/Synthetic")
library(greta)
require(gsl)
source("Sfactor3.R")
N <- 150
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
# variables and priors
Er = uniform(min = 0.001, max = 50)
gi = uniform(min = 0.001, max = 50)
gf = uniform(min = 0.001, max = 50)
sd =  uniform(min = 0.001, max = 50)
# operations
muF <- function(obsx1,Er,gi,gf){
if (is.na(as.matrix(Er)[[1]])){
xx <- runif(1,0,1)
mean = sfactorTdn_5p(obsx1,xx,gi,gf,6,5)
}else{
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
}
return(mean)
}
mean = muF(obsx1,Er,gi,gf)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
# sampling
draws <- mcmc(m, warmup = 500,n_samples = 1000,chains = 1)
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
# sampling
draws <- mcmc(m, warmup = 500,n_samples = 1000,chains = 1)
model(Er, gi, gf,sd)
plot(m)
library(greta)
require(gsl)
source("Sfactor3.R")
N <- 150
# data
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
# variables and priors
Er = uniform(min = 0.001, max = 50)
gi = uniform(min = 0.001, max = 50)
gf = uniform(min = 0.001, max = 50)
sd =  uniform(min = 0.001, max = 50)
# operations
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
install.packages(c("data.table", "dbplyr", "deldir", "dplyr", "e1071", "GA", "ggplot2", "ggthemes", "greta", "neuralnet", "Rcpp", "RcppArmadillo", "reticulate", "tensorflow", "tibble", "wavelets"))
install.packages(c("data.table", "dbplyr", "deldir", "dplyr", "e1071", "GA", "ggplot2", "ggthemes", "greta", "neuralnet", "Rcpp", "RcppArmadillo", "reticulate", "tensorflow", "tibble", "wavelets"))
install.packages(c("data.table", "dbplyr", "deldir", "dplyr", "e1071", "GA", "ggplot2", "ggthemes", "greta", "neuralnet", "Rcpp", "RcppArmadillo", "reticulate", "tensorflow", "tibble", "wavelets"))
library(greta)
require(gsl)
source("Sfactor3.R")
N <- 150
# data
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
# variables and priors
Er = uniform(min = 0.001, max = 50)
gi = uniform(min = 0.001, max = 50)
gf = uniform(min = 0.001, max = 50)
sd =  uniform(min = 0.001, max = 50)
# operations
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
# sampling
draws <- mcmc(m, warmup = 500,n_samples = 1000,chains = 1)
library("nuclear", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(greta)
require(gsl)
source("Sfactor3.R")
N <- 150
# data
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
# variables and priors
Er = uniform(min = 0.001, max = 50)
gi = uniform(min = 0.001, max = 50)
gf = uniform(min = 0.001, max = 50)
sd =  uniform(min = 0.001, max = 50)
# operations
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
# sampling
draws <- mcmc(m, warmup = 500,n_samples = 1000,chains = 1)
library("greta", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:greta", unload=TRUE)
library("greta", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(greta)
require(gsl)
source("Sfactor3.R")
N <- 150
# data
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
# variables and priors
Er = uniform(min = 0.001, max = 50)
gi = uniform(min = 0.001, max = 50)
gf = uniform(min = 0.001, max = 50)
sd =  uniform(min = 0.001, max = 50)
# operations
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
# sampling
draws <- mcmc(m, warmup = 500,n_samples = 1000,chains = 1)
install_tensorflow(extra_packages = "tensorflow-probability")
library(greta)
require(gsl)
source("Sfactor3.R")
N <- 150
# data
obsx1 <- exp(runif(N,log(1e-3),log(1)))
sd <- 1
# Artificial values, here we will just fit 3 parameters Er, gi, gf
y <- rnorm(N, sfactorTdn_5p(obsx1,0.0912,2.93,0.0794,6,5),sd = sd)
# variables and priors
Er = uniform(min = 0.001, max = 50)
gi = uniform(min = 0.001, max = 50)
gf = uniform(min = 0.001, max = 50)
sd =  uniform(min = 0.001, max = 50)
# operations
mean = sfactorTdn_5p(obsx1,Er,gi,gf,6,5)
# likelihood
distribution(y) = normal(mean, sd)
# defining the model
m <- model(Er, gi, gf,sd)
# plotting
plot(m)
# sampling
draws <- mcmc(m, warmup = 500,n_samples = 1000,chains = 1)
install_tensorflow()
